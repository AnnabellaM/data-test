{"signal":"HttpCore Tutorial\n\n\n\n\n    Oleg Kalnichevski\n\fPreface .................................................................................................................................... iv\n     1. HttpCore Scope ........................................................................................................... iv\n     2. HttpCore Goals ............................................................................................................ iv\n     3. What HttpCore is NOT ................................................................................................ iv\n1. Fundamentals ....................................................................................................................... 1\n     1.1. HTTP messages ......................................................................................................... 1\n            1.1.1. Structure ......................................................................................................... 1\n            1.1.2. Basic operations .............................................................................................. 1\n            1.1.3. HTTP entity .................................................................................................... 3\n            1.1.4. Creating entities .............................................................................................. 5\n     1.2. HTTP protocol processors .......................................................................................... 7\n            1.2.1. Standard protocol interceptors .......................................................................... 7\n            1.2.2. Working with protocol processors .................................................................... 8\n     1.3. HTTP execution context ............................................................................................. 9\n            1.3.1. Context sharing ............................................................................................... 9\n2. Blocking I/O model ............................................................................................................ 10\n     2.1. Blocking HTTP connections ..................................................................................... 10\n            2.1.1. Working with blocking HTTP connections ..................................................... 10\n            2.1.2. Content transfer with blocking I/O ................................................................. 11\n            2.1.3. Supported content transfer mechanisms .......................................................... 11\n            2.1.4. Terminating HTTP connections ...................................................................... 12\n     2.2. HTTP exception handling ......................................................................................... 12\n            2.2.1. Protocol exception ......................................................................................... 12\n     2.3. Blocking HTTP protocol handlers ............................................................................. 12\n            2.3.1. HTTP service ................................................................................................ 12\n            2.3.2. HTTP request executor .................................................................................. 14\n            2.3.3. Connection persistence / re-use ...................................................................... 14\n     2.4. Connection pools ..................................................................................................... 15\n     2.5. TLS/SSL support ..................................................................................................... 16\n     2.6. Embedded HTTP server ........................................................................................... 17\n3. Asynchronous I/O based on NIO ......................................................................................... 18\n     3.1. Differences from other I/O frameworks ..................................................................... 18\n     3.2. I/O reactor ............................................................................................................... 18\n            3.2.1. I/O dispatchers .............................................................................................. 18\n            3.2.2. I/O reactor shutdown ..................................................................................... 19\n            3.2.3. I/O sessions ................................................................................................... 19\n            3.2.4. I/O session state management ........................................................................ 19\n            3.2.5. I/O session event mask .................................................................................. 19\n            3.2.6. I/O session buffers ........................................................................................ 20\n            3.2.7. I/O session shutdown ..................................................................................... 20\n            3.2.8. Listening I/O reactors .................................................................................... 20\n            3.2.9. Connecting I/O reactors ................................................................................. 21\n     3.3. I/O reactor configuration .......................................................................................... 22\n            3.3.1. Queuing of I/O interest set operations ............................................................ 23\n     3.4. I/O reactor exception handling .................................................................................. 23\n            3.4.1. I/O reactor audit log ...................................................................................... 24\n     3.5. Non-blocking HTTP connections .............................................................................. 24\n            3.5.1. Execution context of non-blocking HTTP connections ..................................... 24\n            3.5.2. Working with non-blocking HTTP connections ............................................... 24\n\n\n\n                                                                                                                                            ii\n\f                                                HttpCore Tutorial\n\n           3.5.3. HTTP I/O control ..........................................................................................          25\n           3.5.4. Non-blocking content transfer ........................................................................               26\n           3.5.5. Supported non-blocking content transfer mechanisms ......................................                            27\n           3.5.6. Direct channel I/O .........................................................................................         27\n     3.6. HTTP I/O event dispatchers .....................................................................................             28\n     3.7. Non-blocking HTTP content producers .....................................................................                    30\n           3.7.1. Creating non-blocking entities ........................................................................              30\n     3.8. Non-blocking HTTP protocol handlers ......................................................................                   31\n           3.8.1. Asynchronous HTTP service ..........................................................................                 31\n           3.8.2. Asynchronous HTTP request executor ............................................................                      35\n     3.9. Non-blocking connection pools .................................................................................              37\n     3.10. Pipelined request execution .....................................................................................           38\n     3.11. Non-blocking TLS/SSL ..........................................................................................             39\n           3.11.1. SSL I/O session ...........................................................................................         39\n           3.11.2. TLS/SSL aware I/O event dispatches ............................................................                     40\n     3.12. Embedded non-blocking HTTP server .....................................................................                     41\n4. Advanced topics .................................................................................................................   42\n     4.1. HTTP message parsing and formatting framework .....................................................                          42\n           4.1.1. HTTP line parsing and formatting ..................................................................                  42\n           4.1.2. HTTP message streams and session I/O buffers ..............................................                          44\n           4.1.3. HTTP message parsers and formatters ............................................................                     45\n           4.1.4. HTTP header parsing on demand ...................................................................                    47\n\n\n\n\n                                                                                                                                       iii\n\fPreface\n     HttpCore is a set of components implementing the most fundamental aspects of the HTTP protocol\n     that are nonetheless sufficient to develop full-featured client-side and server-side HTTP services with\n     a minimal footprint.\n\n     HttpCore has the following scope and goals:\n\n\n1. HttpCore Scope\n     • A consistent API for building client / proxy / server side HTTP services\n\n     • A consistent API for building both synchronous and asynchronous HTTP services\n\n     • A set of low level components based on blocking (classic) and non-blocking (NIO) I/O models\n\n\n2. HttpCore Goals\n     • Implementation of the most fundamental HTTP transport aspects\n\n     • Balance between good performance and the clarity & expressiveness of API\n\n     • Small (predictable) memory footprint\n\n     • Self-contained library (no external dependencies beyond JRE)\n\n\n3. What HttpCore is NOT\n     • A replacement for HttpClient\n\n     • A replacement for Servlet APIs\n\n\n\n\n                                                                                                          iv\n\fChapter 1. Fundamentals\n1.1. HTTP messages\n1.1.1. Structure\n\n        A HTTP message consists of a header and an optional body. The message header of an HTTP request\n        consists of a request line and a collection of header fields. The message header of an HTTP response\n        consists of a status line and a collection of header fields. All HTTP messages must include the protocol\n        version. Some HTTP messages can optionally enclose a content body.\n\n        HttpCore defines the HTTP message object model to follow this definition closely, and provides\n        extensive support for serialization (formatting) and deserialization (parsing) of HTTP message\n        elements.\n\n1.1.2. Basic operations\n\n1.1.2.1. HTTP request message\n\n        HTTP request is a message sent from the client to the server. The first line of that message includes\n        the method to apply to the resource, the identifier of the resource, and the protocol version in use.\n\n\n          HttpRequest request = new BasicHttpRequest(\"GET\", \"/\",\n              HttpVersion.HTTP_1_1);\n\n          System.out.println(request.getRequestLine().getMethod());\n          System.out.println(request.getRequestLine().getUri());\n          System.out.println(request.getProtocolVersion());\n          System.out.println(request.getRequestLine().toString());\n\n\n        stdout >\n\n\n          GET\n          /\n          HTTP/1.1\n          GET / HTTP/1.1\n\n\n1.1.2.2. HTTP response message\n\n        HTTP response is a message sent by the server back to the client after having received and interpreted\n        a request message. The first line of that message consists of the protocol version followed by a numeric\n        status code and its associated textual phrase.\n\n\n          HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1,\n              HttpStatus.SC_OK, \"OK\");\n\n          System.out.println(response.getProtocolVersion());\n          System.out.println(response.getStatusLine().getStatusCode());\n          System.out.println(response.getStatusLine().getReasonPhrase());\n          System.out.println(response.getStatusLine().toString());\n\n\n        stdout >\n\n\n                                                                                                              1\n\f                                              Fundamentals\n\n\n         HTTP/1.1\n         200\n         OK\n         HTTP/1.1 200 OK\n\n\n1.1.2.3. HTTP message common properties and methods\n\n        An HTTP message can contain a number of headers describing properties of the message such as\n        the content length, content type, and so on. HttpCore provides methods to retrieve, add, remove, and\n        enumerate such headers.\n\n\n         HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1,\n             HttpStatus.SC_OK, \"OK\");\n         response.addHeader(\"Set-Cookie\",\n             \"c1=a; path=/; domain=localhost\");\n         response.addHeader(\"Set-Cookie\",\n             \"c2=b; path=\\\"/\\\", c3=c; domain=\\\"localhost\\\"\");\n         Header h1 = response.getFirstHeader(\"Set-Cookie\");\n         System.out.println(h1);\n         Header h2 = response.getLastHeader(\"Set-Cookie\");\n         System.out.println(h2);\n         Header[] hs = response.getHeaders(\"Set-Cookie\");\n         System.out.println(hs.length);\n\n\n        stdout >\n\n\n         Set-Cookie: c1=a; path=/; domain=localhost\n         Set-Cookie: c2=b; path=\"/\", c3=c; domain=\"localhost\"\n         2\n\n\n        There is an efficient way to obtain all headers of a given type using the HeaderIterator interface.\n\n\n         HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1,\n             HttpStatus.SC_OK, \"OK\");\n         response.addHeader(\"Set-Cookie\",\n             \"c1=a; path=/; domain=localhost\");\n         response.addHeader(\"Set-Cookie\",\n             \"c2=b; path=\\\"/\\\", c3=c; domain=\\\"localhost\\\"\");\n\n         HeaderIterator it = response.headerIterator(\"Set-Cookie\");\n\n         while (it.hasNext()) {\n             System.out.println(it.next());\n         }\n\n\n        stdout >\n\n\n         Set-Cookie: c1=a; path=/; domain=localhost\n         Set-Cookie: c2=b; path=\"/\", c3=c; domain=\"localhost\"\n\n\n        It also provides convenience methods to parse HTTP messages into individual header elements.\n\n\n         HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1,\n             HttpStatus.SC_OK, \"OK\");\n         response.addHeader(\"Set-Cookie\",\n             \"c1=a; path=/; domain=localhost\");\n\n\n\n\n                                                                                                              2\n\f                                                Fundamentals\n\n           response.addHeader(\"Set-Cookie\",\n               \"c2=b; path=\\\"/\\\", c3=c; domain=\\\"localhost\\\"\");\n\n           HeaderElementIterator it = new BasicHeaderElementIterator(\n                   response.headerIterator(\"Set-Cookie\"));\n\n           while (it.hasNext()) {\n               HeaderElement elem = it.nextElement();\n               System.out.println(elem.getName() + \" = \" + elem.getValue());\n               NameValuePair[] params = elem.getParameters();\n               for (int i = 0; i < params.length; i++) {\n                   System.out.println(\" \" + params[i]);\n               }\n           }\n\n\n         stdout >\n\n\n           c1 = a\n            path=/\n            domain=localhost\n           c2 = b\n            path=/\n           c3 = c\n            domain=localhost\n\n\n         HTTP headers are tokenized into individual header elements only on demand. HTTP headers received\n         over an HTTP connection are stored internally as an array of characters and parsed lazily only when\n         you access their properties.\n\n1.1.3. HTTP entity\n         HTTP messages can carry a content entity associated with the request or response. Entities can be found\n         in some requests and in some responses, as they are optional. Requests that use entities are referred to\n         as entity-enclosing requests. The HTTP specification defines two entity-enclosing methods: POST and\n         PUT. Responses are usually expected to enclose a content entity. There are exceptions to this rule such\n         as responses to HEAD method and 204 No Content, 304 Not Modified, 205 Reset Content responses.\n\n         HttpCore distinguishes three kinds of entities, depending on where their content originates:\n\n         • streamed:     The content is received from a stream, or generated on the fly. In particular, this\n           category includes entities being received from a connection. Streamed entities are generally not\n           repeatable.\n\n         • self-contained:     The content is in memory or obtained by means that are independent from a\n           connection or other entity. Self-contained entities are generally repeatable.\n\n         • wrapping:      The content is obtained from another entity.\n\n1.1.3.1. Repeatable entities\n\n         An entity can be repeatable, meaning its content can be read more than once. This is only possible with\n         self-contained entities (like ByteArrayEntity or StringEntity).\n\n1.1.3.2. Using HTTP entities\n\n         Since an entity can represent both binary and character content, it has support for character encodings\n         (to support the latter, i.e. character content).\n\n\n                                                                                                               3\n\f                                               Fundamentals\n\n         The entity is created when executing a request with enclosed content or when the request was successful\n         and the response body is used to send the result back to the client.\n\n         To read the content from the entity, one can either retrieve the input stream via the\n         HttpEntity#getContent() method, which returns an java.io.InputStream, or one can supply\n         an output stream to the HttpEntity#writeTo(OutputStream) method, which will return once all\n         content has been written to the given stream. Please note that some non-streaming (self-contained)\n         entities may be unable to represent their content as a java.io.InputStream efficiently. It is legal\n         for such entities to implement HttpEntity#writeTo(OutputStream) method only and to throw\n         UnsupportedOperationException from HttpEntity#getContent() method.\n\n         The EntityUtils class exposes several static methods to simplify extracting the content or information\n         from an entity. Instead of reading the java.io.InputStream directly, one can retrieve the complete\n         content body in a string or byte array by using the methods from this class.\n\n         When       the   entity   has been received with an incoming message, the methods\n         HttpEntity#getContentType() and HttpEntity#getContentLength() methods can be used for\n         reading the common metadata such as Content-Type and Content-Length headers (if they are\n         available). Since the Content-Type header can contain a character encoding for text mime-types\n         like text/plain or text/html, the HttpEntity#getContentEncoding() method is used to read this\n         information. If the headers aren't available, a length of -1 will be returned, and NULL for the content\n         type. If the Content-Type header is available, a Header object will be returned.\n\n         When creating an entity for a outgoing message, this meta data has to be supplied by the creator of\n         the entity.\n\n\n          StringEntity myEntity = new StringEntity(\"important message\",\n              Consts.UTF_8);\n\n          System.out.println(myEntity.getContentType());\n          System.out.println(myEntity.getContentLength());\n          System.out.println(EntityUtils.toString(myEntity));\n          System.out.println(EntityUtils.toByteArray(myEntity).length);\n\n\n         stdout >\n\n\n          Content-Type: text/plain; charset=UTF-8\n          17\n          important message\n          17\n\n\n1.1.3.3. Ensuring release of system resources\n\n         In order to ensure proper release of system resources one must close the content stream associated\n         with the entity.\n\n\n          HttpResponse response;\n          HttpEntity entity = response.getEntity();\n          if (entity != null) {\n              InputStream instream = entity.getContent();\n              try {\n                  // do something useful\n              } finally {\n                  instream.close();\n              }\n\n\n\n\n                                                                                                              4\n\f                                                Fundamentals\n\n           }\n\n\n         When working with streaming entities, one can use the EntityUtils#consume(HttpEntity) method\n         to ensure that the entity content has been fully consumed and the underlying stream has been closed.\n\n1.1.4. Creating entities\n         There are a few ways to create entities. HttpCore provides the following implementations:\n\n         • BasicHttpEntity\n\n         • ByteArrayEntity\n\n         • StringEntity\n\n         • InputStreamEntity\n\n         • FileEntity\n\n         • EntityTemplate\n\n         • HttpEntityWrapper\n\n         • BufferedHttpEntity\n\n1.1.4.1. BasicHttpEntity\n\n         Exactly as the name implies, this basic entity represents an underlying stream. In general, use this class\n         for entities received from HTTP messages.\n\n         This entity has an empty constructor. After construction, it represents no content, and has a negative\n         content length.\n\n         One needs to set the content stream, and optionally the length. This can be done with\n         the BasicHttpEntity#setContent(InputStream) and BasicHttpEntity#setContentLength(long)\n         methods respectively.\n\n\n           BasicHttpEntity myEntity = new BasicHttpEntity();\n           myEntity.setContent(someInputStream);\n           myEntity.setContentLength(340); // sets the length to 340\n\n\n1.1.4.2. ByteArrayEntity\n\n         ByteArrayEntity is a self-contained, repeatable entity that obtains its content from a given byte array.\n         Supply the byte array to the constructor.\n\n\n           ByteArrayEntity myEntity = new ByteArrayEntity(new byte[] {1,2,3},\n                   ContentType.APPLICATION_OCTET_STREAM);\n\n\n1.1.4.3. StringEntity\n\n         StringEntity    is a self-contained, repeatable entity that obtains its content from a java.lang.String\n         object. It has three constructors, one simply constructs with a given java.lang.String object; the\n         second also takes a character encoding for the data in the string; the third allows the mime type to\n         be specified.\n\n\n                                                                                                                 5\n\f                                                 Fundamentals\n\n\n           StringBuilder sb = new StringBuilder();\n           Map<String, String> env = System.getenv();\n           for (Map.Entry<String, String> envEntry : env.entrySet()) {\n               sb.append(envEntry.getKey())\n                       .append(\": \").append(envEntry.getValue())\n                       .append(\"\\r\\n\");\n           }\n\n           // construct without a character encoding (defaults to ISO-8859-1)\n           HttpEntity myEntity1 = new StringEntity(sb.toString());\n\n           // alternatively construct with an encoding (mime type defaults to \"text/plain\")\n           HttpEntity myEntity2 = new StringEntity(sb.toString(), Consts.UTF_8);\n\n           // alternatively construct with an encoding and a mime type\n           HttpEntity myEntity3 = new StringEntity(sb.toString(),\n                   ContentType.create(\"text/plain\", Consts.UTF_8));\n\n\n1.1.4.4. InputStreamEntity\n\n         InputStreamEntity is a streamed, non-repeatable entity that obtains its content from an input stream.\n         Construct it by supplying the input stream and the content length. Use the content length to limit the\n         amount of data read from the java.io.InputStream. If the length matches the content length available\n         on the input stream, then all data will be sent. Alternatively, a negative content length will read all data\n         from the input stream, which is the same as supplying the exact content length, so use the length to\n         limit the amount of data to read.\n\n\n           InputStream instream = getSomeInputStream();\n           InputStreamEntity myEntity = new InputStreamEntity(instream, 16);\n\n\n1.1.4.5. FileEntity\n\n         FileEntity is a self-contained, repeatable entity that obtains its content from a file. Use this mostly to\n         stream large files of different types, where you need to supply the content type of the file, for instance,\n         sending a zip file would require the content type application/zip, for XML application/xml.\n\n\n           HttpEntity entity = new FileEntity(staticFile,\n                   ContentType.create(\"application/java-archive\"));\n\n\n1.1.4.6. HttpEntityWrapper\n\n         This is the base class for creating wrapped entities. The wrapping entity holds a reference to a wrapped\n         entity and delegates all calls to it. Implementations of wrapping entities can derive from this class and\n         need to override only those methods that should not be delegated to the wrapped entity.\n\n1.1.4.7. BufferedHttpEntity\n\n         BufferedHttpEntity      is a subclass of HttpEntityWrapper. Construct it by supplying another entity.\n         It reads the content from the supplied entity, and buffers it in memory.\n\n         This makes it possible to make a repeatable entity, from a non-repeatable entity. If the supplied entity\n         is already repeatable, it simply passes calls through to the underlying entity.\n\n\n           myNonRepeatableEntity.setContent(someInputStream);\n           BufferedHttpEntity myBufferedEntity = new BufferedHttpEntity(\n\n\n\n\n                                                                                                                   6\n\f                                                Fundamentals\n\n             myNonRepeatableEntity);\n\n\n\n1.2. HTTP protocol processors\n         HTTP protocol interceptor is a routine that implements a specific aspect of the HTTP protocol. Usually\n         protocol interceptors are expected to act upon one specific header or a group of related headers of the\n         incoming message or populate the outgoing message with one specific header or a group of related\n         headers. Protocol interceptors can also manipulate content entities enclosed with messages; transparent\n         content compression / decompression being a good example. Usually this is accomplished by using the\n         'Decorator' pattern where a wrapper entity class is used to decorate the original entity. Several protocol\n         interceptors can be combined to form one logical unit.\n\n         HTTP protocol processor is a collection of protocol interceptors that implements the 'Chain of\n         Responsibility' pattern, where each individual protocol interceptor is expected to work on the particular\n         aspect of the HTTP protocol it is responsible for.\n\n         Usually the order in which interceptors are executed should not matter as long as they do not depend on\n         a particular state of the execution context. If protocol interceptors have interdependencies and therefore\n         must be executed in a particular order, they should be added to the protocol processor in the same\n         sequence as their expected execution order.\n\n         Protocol interceptors must be implemented as thread-safe. Similarly to servlets, protocol interceptors\n         should not use instance variables unless access to those variables is synchronized.\n\n1.2.1. Standard protocol interceptors\n         HttpCore comes with a number of most essential protocol interceptors for client and server HTTP\n         processing.\n\n1.2.1.1. RequestContent\n\n         RequestContent is the most important interceptor for outgoing requests. It is responsible for delimiting\n         content length by adding the Content-Length or Transfer-Content headers based on the properties\n         of the enclosed entity and the protocol version. This interceptor is required for correct functioning of\n         client side protocol processors.\n\n1.2.1.2. ResponseContent\n\n         ResponseContent    is the most important interceptor for outgoing responses. It is responsible for\n         delimiting content length by adding Content-Length or Transfer-Content headers based on the\n         properties of the enclosed entity and the protocol version. This interceptor is required for correct\n         functioning of server side protocol processors.\n\n1.2.1.3. RequestConnControl\n\n         RequestConnControl is responsible for adding the Connection header to the outgoing requests, which\n         is essential for managing persistence of HTTP/1.0 connections. This interceptor is recommended for\n         client side protocol processors.\n\n1.2.1.4. ResponseConnControl\n\n         ResponseConnControl      is responsible for adding the Connection header to the outgoing responses,\n         which is essential for managing persistence of HTTP/1.0 connections. This interceptor is recommended\n         for server side protocol processors.\n\n\n                                                                                                                 7\n\f                                                Fundamentals\n\n1.2.1.5. RequestDate\n\n         RequestDate    is responsible for adding the Date header to the outgoing requests. This interceptor is\n         optional for client side protocol processors.\n\n1.2.1.6. ResponseDate\n\n         ResponseDate is responsible for adding the Date header to the outgoing responses. This interceptor is\n         recommended for server side protocol processors.\n\n1.2.1.7. RequestExpectContinue\n\n         RequestExpectContinue     is responsible for enabling the 'expect-continue' handshake by adding the\n         Expect header. This interceptor is recommended for client side protocol processors.\n\n1.2.1.8. RequestTargetHost\n\n         RequestTargetHost    is responsible for adding the Host header. This interceptor is required for client\n         side protocol processors.\n\n1.2.1.9. RequestUserAgent\n\n         RequestUserAgent is responsible for adding the User-Agent header. This interceptor is recommended\n         for client side protocol processors.\n\n1.2.1.10. ResponseServer\n\n         ResponseServer    is responsible for adding the Server header. This interceptor is recommended for\n         server side protocol processors.\n\n1.2.2. Working with protocol processors\n         Usually HTTP protocol processors are used to pre-process incoming messages prior to executing\n         application specific processing logic and to post-process outgoing messages.\n\n\n           HttpProcessor httpproc = HttpProcessorBuilder.create()\n                   // Required protocol interceptors\n                   .add(new RequestContent())\n                   .add(new RequestTargetHost())\n                   // Recommended protocol interceptors\n                   .add(new RequestConnControl())\n                   .add(new RequestUserAgent(\"MyAgent-HTTP/1.1\"))\n                   // Optional protocol interceptors\n                   .add(new RequestExpectContinue(true))\n                   .build();\n\n           HttpCoreContext context = HttpCoreContext.create();\n           HttpRequest request = new BasicHttpRequest(\"GET\", \"/\");\n           httpproc.process(request, context);\n\n\n         Send the request to the target host and get a response.\n\n\n           HttpResponse = <...>\n           httpproc.process(response, context);\n\n\n         Please note the BasicHttpProcessor class does not synchronize access to its internal structures and\n         therefore may not be thread-safe.\n\n\n                                                                                                              8\n\f                                              Fundamentals\n\n\n1.3. HTTP execution context\n       Originally HTTP has been designed as a stateless, response-request oriented protocol. However, real\n       world applications often need to be able to persist state information through several logically related\n       request-response exchanges. In order to enable applications to maintain a processing state HttpCpre\n       allows HTTP messages to be executed within a particular execution context, referred to as HTTP\n       context. Multiple logically related messages can participate in a logical session if the same context is\n       reused between consecutive requests. HTTP context functions similarly to a java.util.Map<String,\n       Object>. It is simply a collection of logically related named values.\n\n       Please nore HttpContext can contain arbitrary objects and therefore may be unsafe to share between\n       multiple threads. Care must be taken to ensure that HttpContext instances can be accessed by one\n       thread at a time.\n\n1.3.1. Context sharing\n       Protocol interceptors can collaborate by sharing information - such as a processing state - through an\n       HTTP execution context. HTTP context is a structure that can be used to map an attribute name to\n       an attribute value. Internally HTTP context implementations are usually backed by a HashMap. The\n       primary purpose of the HTTP context is to facilitate information sharing among various logically\n       related components. HTTP context can be used to store a processing state for one message or several\n       consecutive messages. Multiple logically related messages can participate in a logical session if the\n       same context is reused between consecutive messages.\n\n\n        HttpProcessor httpproc = HttpProcessorBuilder.create()\n                .add(new HttpRequestInterceptor() {\n                    public void process(\n                            HttpRequest request,\n                            HttpContext context) throws HttpException, IOException {\n                        String id = (String) context.getAttribute(\"session-id\");\n                        if (id != null) {\n                            request.addHeader(\"Session-ID\", id);\n                        }\n                    }\n                })\n                .build();\n\n        HttpCoreContext context = HttpCoreContext.create();\n        HttpRequest request = new BasicHttpRequest(\"GET\", \"/\");\n        httpproc.process(request, context);\n\n\n\n\n                                                                                                             9\n\fChapter 2. Blocking I/O model\n      Blocking (or classic) I/O in Java represents a highly efficient and convenient I/O model well suited\n      for high performance applications where the number of concurrent connections is relatively moderate.\n      Modern JVMs are capable of efficient context switching and the blocking I/O model should offer the\n      best performance in terms of raw data throughput as long as the number of concurrent connections\n      is below one thousand and connections are mostly busy transmitting data. However for applications\n      where connections stay idle most of the time the overhead of context switching may become substantial\n      and a non-blocking I/O model may present a better alternative.\n\n\n2.1. Blocking HTTP connections\n      HTTP connections are responsible for HTTP message serialization and deserialization. One should\n      rarely need to use HTTP connection objects directly. There are higher level protocol components\n      intended for execution and processing of HTTP requests. However, in some cases direct interaction\n      with HTTP connections may be necessary, for instance, to access properties such as the connection\n      status, the socket timeout or the local and remote addresses.\n\n      It is important to bear in mind that HTTP connections are not thread-safe. We strongly recommend\n      limiting all interactions with HTTP connection objects to one thread. The only method of\n      HttpConnection interface and its sub-interfaces which is safe to invoke from another thread is\n      HttpConnection#shutdown() .\n\n\n2.1.1. Working with blocking HTTP connections\n      HttpCore does not provide full support for opening connections because the process of establishing\n      a new connection - especially on the client side - can be very complex when it involves one or more\n      authenticating or/and tunneling proxies. Instead, blocking HTTP connections can be bound to any\n      arbitrary network socket.\n\n\n        Socket socket = <...>\n\n        DefaultBHttpClientConnection conn = new DefaultBHttpClientConnection(8 * 1024);\n        conn.bind(socket);\n        System.out.println(conn.isOpen());\n        HttpConnectionMetrics metrics = conn.getMetrics();\n        System.out.println(metrics.getRequestCount());\n        System.out.println(metrics.getResponseCount());\n        System.out.println(metrics.getReceivedBytesCount());\n        System.out.println(metrics.getSentBytesCount());\n\n\n      HTTP connection interfaces, both client and server, send and receive messages in two stages. The\n      message head is transmitted first. Depending on properties of the message head, a message body may\n      follow it. Please note it is very important to always close the underlying content stream in order to\n      signal that the processing of the message is complete. HTTP entities that stream out their content\n      directly from the input stream of the underlying connection must ensure they fully consume the content\n      of the message body for that connection to be potentially re-usable.\n\n      Over-simplified process of request execution on the client side may look like this:\n\n\n        Socket socket = <...>\n\n\n\n\n                                                                                                         10\n\f                                          Blocking I/O model\n\n        DefaultBHttpClientConnection conn = new DefaultBHttpClientConnection(8 * 1024);\n        conn.bind(socket);\n        HttpRequest request = new BasicHttpRequest(\"GET\", \"/\");\n        conn.sendRequestHeader(request);\n        HttpResponse response = conn.receiveResponseHeader();\n        conn.receiveResponseEntity(response);\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            // Do something useful with the entity and, when done, ensure all\n            // content has been consumed, so that the underlying connection\n            // can be re-used\n            EntityUtils.consume(entity);\n        }\n\n\n       Over-simplified process of request handling on the server side may look like this:\n\n\n        Socket socket = <...>\n\n        DefaultBHttpServerConnection conn = new DefaultBHttpServerConnection(8 * 1024);\n        conn.bind(socket);\n        HttpRequest request = conn.receiveRequestHeader();\n        if (request instanceof HttpEntityEnclosingRequest) {\n            conn.receiveRequestEntity((HttpEntityEnclosingRequest) request);\n            HttpEntity entity = ((HttpEntityEnclosingRequest) request)\n                    .getEntity();\n            if (entity != null) {\n                // Do something useful with the entity and, when done, ensure all\n                // content has been consumed, so that the underlying connection\n                // could be re-used\n                EntityUtils.consume(entity);\n            }\n        }\n        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1,\n                200, \"OK\") ;\n        response.setEntity(new StringEntity(\"Got it\") );\n        conn.sendResponseHeader(response);\n        conn.sendResponseEntity(response);\n\n\n       Please note that one should rarely need to transmit messages using these low level methods and should\n       normally use the appropriate higher level HTTP service implementations instead.\n\n2.1.2. Content transfer with blocking I/O\n       HTTP connections manage the process of the content transfer using the                     HttpEntity\n       interface. HTTP connections generate an entity object that encapsulates the content stream\n       of the incoming message. Please note that         HttpServerConnection#receiveRequestEntity()\n       and HttpClientConnection#receiveResponseEntity() do not retrieve or buffer any incoming\n       data. They merely inject an appropriate content codec based on the properties of the incoming\n       message. The content can be retrieved by reading from the content input stream of the\n       enclosed entity using HttpEntity#getContent(). The incoming data will be decoded automatically\n       and completely transparently to the data consumer. Likewise, HTTP connections rely on\n       HttpEntity#writeTo(OutputStream) method to generate the content of an outgoing message. If an\n       outgoing message encloses an entity, the content will be encoded automatically based on the properties\n       of the message.\n\n2.1.3. Supported content transfer mechanisms\n       Default implementations of HTTP connections support three content transfer mechanisms defined by\n       the HTTP/1.1 specification:\n\n\n                                                                                                          11\n\f                                           Blocking I/O model\n\n       • Content-Length delimited:   The end of the content entity is determined by the value of the\n         Content-Length header. Maximum entity length: Long#MAX_VALUE.\n\n\n       • Identity coding: The end of the content entity is demarcated by closing the underlying connection\n         (end of stream condition). For obvious reasons the identity encoding can only be used on the server\n         side. Maximum entity length: unlimited.\n\n       • Chunk coding:       The content is sent in small chunks. Maximum entity length: unlimited.\n\n       The appropriate content stream class will be created automatically depending on properties of the entity\n       enclosed with the message.\n\n2.1.4. Terminating HTTP connections\n\n       HTTP connections can be terminated either gracefully by calling HttpConnection#close() or\n       forcibly by calling HttpConnection#shutdown(). The former tries to flush all buffered data prior to\n       terminating the connection and may block indefinitely. The HttpConnection#close() method is not\n       thread-safe. The latter terminates the connection without flushing internal buffers and returns control\n       to the caller as soon as possible without blocking for long. The HttpConnection#shutdown() method\n       is thread-safe.\n\n\n2.2. HTTP exception handling\n       All HttpCore components potentially throw two types of exceptions: IOException in case of an I/\n       O failure such as socket timeout or an socket reset and HttpException that signals an HTTP failure\n       such as a violation of the HTTP protocol. Usually I/O errors are considered non-fatal and recoverable,\n       whereas HTTP protocol errors are considered fatal and cannot be automatically recovered from.\n\n2.2.1. Protocol exception\n\n       ProtocolException    signals a fatal HTTP protocol violation that usually results in an immediate\n       termination of the HTTP message processing.\n\n\n2.3. Blocking HTTP protocol handlers\n2.3.1. HTTP service\n\n       HttpService is a server side HTTP protocol handler based on the blocking I/O model that implements\n       the essential requirements of the HTTP protocol for the server side message processing as described\n       by RFC 2616.\n\n       HttpService   relies on HttpProcessor instance to generate mandatory protocol headers for all\n       outgoing messages and apply common, cross-cutting message transformations to all incoming and\n       outgoing messages, whereas HTTP request handlers are expected to take care of application specific\n       content generation and processing.\n\n\n        HttpProcessor httpproc = HttpProcessorBuilder.create()\n                .add(new ResponseDate())\n                .add(new ResponseServer(\"MyServer-HTTP/1.1\"))\n                .add(new ResponseContent())\n                .add(new ResponseConnControl())\n\n\n\n\n                                                                                                            12\n\f                                            Blocking I/O model\n\n                  .build();\n          HttpService httpService = new HttpService(httpproc, null);\n\n\n2.3.1.1. HTTP request handlers\n\n         The HttpRequestHandler interface represents a routine for processing of a specific group of HTTP\n         requests. HttpService is designed to take care of protocol specific aspects, whereas individual request\n         handlers are expected to take care of application specific HTTP processing. The main purpose of a\n         request handler is to generate a response object with a content entity to be sent back to the client in\n         response to the given request.\n\n\n          HttpRequestHandler myRequestHandler = new HttpRequestHandler() {\n\n                 public void handle(\n                         HttpRequest request,\n                         HttpResponse response,\n                         HttpContext context) throws HttpException, IOException {\n                     response.setStatusCode(HttpStatus.SC_OK);\n                     response.setEntity(\n                             new StringEntity(\"some important message\",\n                                     ContentType.TEXT_PLAIN));\n                 }\n\n          };\n\n\n2.3.1.2. Request handler resolver\n\n         HTTP request handlers are usually managed by a HttpRequestHandlerResolver that matches a\n         request URI to a request handler. HttpCore includes a very simple implementation of the request\n         handler resolver based on a trivial pattern matching algorithm: HttpRequestHandlerRegistry\n         supports only three formats: *, <uri>* and *<uri>.\n\n\n          HttpProcessor httpproc = <...>\n\n          HttpRequestHandler myRequestHandler1 = <...>\n          HttpRequestHandler myRequestHandler2 = <...>\n          HttpRequestHandler myRequestHandler3 = <...>\n\n          UriHttpRequestHandlerMapper handlerMapper = new UriHttpRequestHandlerMapper();\n          handlerMapper.register(\"/service/*\", myRequestHandler1);\n          handlerMapper.register(\"*.do\", myRequestHandler2);\n          handlerMapper.register(\"*\", myRequestHandler3);\n          HttpService httpService = new HttpService(httpproc, handlerMapper);\n\n\n         Users      are    encouraged to     provide     more     sophisticated   implementations            of\n         HttpRequestHandlerResolver - for instance, based on regular expressions.\n\n\n2.3.1.3. Using HTTP service to handle requests\n\n         When fully initialized and configured, the HttpService can be used to execute and handle requests\n         for active HTTP connections. The HttpService#handleRequest() method reads an incoming request,\n         generates a response and sends it back to the client. This method can be executed in a loop to\n         handle multiple requests on a persistent connection. The HttpService#handleRequest() method is\n         safe to execute from multiple threads. This allows processing of requests on several connections\n         simultaneously, as long as all the protocol interceptors and requests handlers used by the HttpService\n         are thread-safe.\n\n\n                                                                                                             13\n\f                                          Blocking I/O model\n\n\n        HttpService httpService = <...>\n        HttpServerConnection conn = <...>\n        HttpContext context = <...>\n\n        boolean active = true;\n        try {\n            while (active && conn.isOpen()) {\n                httpService.handleRequest(conn, context);\n            }\n        } finally {\n            conn.shutdown();\n        }\n\n\n\n2.3.2. HTTP request executor\n\n       HttpRequestExecutor   is a client side HTTP protocol handler based on the blocking I/O model that\n       implements the essential requirements of the HTTP protocol for the client side message processing,\n       as described by RFC 2616. The HttpRequestExecutor relies on the HttpProcessor instance to\n       generate mandatory protocol headers for all outgoing messages and apply common, cross-cutting\n       message transformations to all incoming and outgoing messages. Application specific processing can\n       be implemented outside HttpRequestExecutor once the request has been executed and a response has\n       been received.\n\n\n        HttpClientConnection conn = <...>\n\n        HttpProcessor httpproc = HttpProcessorBuilder.create()\n                .add(new RequestContent())\n                .add(new RequestTargetHost())\n                .add(new RequestConnControl())\n                .add(new RequestUserAgent(\"MyClient/1.1\"))\n                .add(new RequestExpectContinue(true))\n                .build();\n        HttpRequestExecutor httpexecutor = new HttpRequestExecutor();\n\n        HttpRequest request = new BasicHttpRequest(\"GET\", \"/\");\n        HttpCoreContext context = HttpCoreContext.create();\n        httpexecutor.preProcess(request, httpproc, context);\n        HttpResponse response = httpexecutor.execute(request, conn, context);\n        httpexecutor.postProcess(response, httpproc, context);\n\n        HttpEntity entity = response.getEntity();\n        EntityUtils.consume(entity);\n\n\n       Methods of HttpRequestExecutor are safe to execute from multiple threads. This allows execution\n       of requests on several connections simultaneously, as long as all the protocol interceptors used by the\n       HttpRequestExecutor are thread-safe.\n\n\n2.3.3. Connection persistence / re-use\n\n       The ConnectionReuseStrategy interface is intended to determine whether the underlying connection\n       can be re-used for processing of further messages after the transmission of the current message has\n       been completed. The default connection re-use strategy attempts to keep connections alive whenever\n       possible. Firstly, it examines the version of the HTTP protocol used to transmit the message. HTTP/1.1\n       connections are persistent by default, while HTTP/1.0 connections are not. Secondly, it examines\n       the value of the Connection header. The peer can indicate whether it intends to re-use the connection\n       on the opposite side by sending Keep-Alive or Close values in the Connection header. Thirdly, the\n\n\n                                                                                                           14\n\f                                         Blocking I/O model\n\n     strategy makes the decision whether the connection is safe to re-use based on the properties of the\n     enclosed entity, if available.\n\n\n2.4. Connection pools\n     Efficient client-side HTTP transports often requires effective re-use of persistent connections.\n     HttpCore facilitates the process of connection re-use by providing support for managing pools of\n     persistent HTTP connections. Connection pool implementations are thread-safe and can be used\n     concurrently by multiple consumers.\n\n     By default the pool allows only 20 concurrent connections in total and two concurrent connections\n     per a unique route. The two connection limit is due to the requirements of the HTTP specification.\n     However, in practical terms this can often be too restrictive. One can change the pool configuration at\n     runtime to allow for more concurrent connections depending on a particular application context.\n\n\n      HttpHost target = new HttpHost(\"localhost\");\n      BasicConnPool connpool = new BasicConnPool();\n      connpool.setMaxTotal(200);\n      connpool.setDefaultMaxPerRoute(10);\n      connpool.setMaxPerRoute(target, 20);\n      Future<BasicPoolEntry> future = connpool.lease(target, null);\n      BasicPoolEntry poolEntry = future.get();\n      HttpClientConnection conn = poolEntry.getConnection();\n\n\n     Please note that the connection pool has no way of knowing whether or not a leased connection is still\n     being used. It is the responsibility of the connection pool user to ensure that the connection is released\n     back to the pool once it is not longer needed, even if the connection is not reusable.\n\n\n      BasicConnPool connpool = <...>\n      Future<BasicPoolEntry> future = connpool.lease(target, null);\n      BasicPoolEntry poolEntry = future.get();\n      try {\n          HttpClientConnection conn = poolEntry.getConnection();\n      } finally {\n          connpool.release(poolEntry, true);\n      }\n\n\n     The state of the connection pool can be interrogated at runtime.\n\n\n      HttpHost target = new HttpHost(\"localhost\");\n      BasicConnPool connpool = <...>\n      PoolStats totalStats = connpool.getTotalStats();\n      System.out.println(\"total available: \" + totalStats.getAvailable());\n      System.out.println(\"total leased: \" + totalStats.getLeased());\n      System.out.println(\"total pending: \" + totalStats.getPending());\n      PoolStats targetStats = connpool.getStats(target);\n      System.out.println(\"target available: \" + targetStats.getAvailable());\n      System.out.println(\"target leased: \" + targetStats.getLeased());\n      System.out.println(\"target pending: \" + targetStats.getPending());\n\n\n     Please note that connection pools do not pro-actively evict expired connections. Even though expired\n     connection cannot be leased to the requester, the pool may accumulate stale connections over time\n     especially after a period of inactivity. It is generally advisable to force eviction of expired and idle\n     connections from the pool after an extensive period of inactivity.\n\n\n\n\n                                                                                                            15\n\f                                       Blocking I/O model\n\n      BasicConnPool connpool = <...>\n      connpool.closeExpired();\n      connpool.closeIdle(1, TimeUnit.MINUTES);\n\n\n     Generally it is considered to be a responsibility of the consumer to keep track of connections\n     leased from the pool and to ensure their immediate release as soon as they are no longer needed\n     or actively used. Nevertheless BasicConnPool provides protected methods to enumerate available\n     idle connections and those currently leased from the pool. This enables the pool consumer to query\n     connection state and selectively terminate connections meeting a particular criterion.\n\n\n      static class MyBasicConnPool extends BasicConnPool {\n\n            @Override\n            protected void enumAvailable(final PoolEntryCallback<HttpHost, HttpClientConnection> callback) {\n                super.enumAvailable(callback);\n            }\n\n            @Override\n            protected void enumLeased(final PoolEntryCallback<HttpHost, HttpClientConnection> callback) {\n                super.enumLeased(callback);\n            }\n\n      }\n\n\n\n      MyBasicConnPool connpool = new MyBasicConnPool();\n      connpool.enumAvailable(new PoolEntryCallback<HttpHost, HttpClientConnection>() {\n\n            @Override\n            public void process(final PoolEntry<HttpHost, HttpClientConnection> entry) {\n                Date creationTime = new Date(entry.getCreated());\n                if (creationTime.before(someTime)) {\n                    entry.close();\n                }\n            }\n\n      });\n\n\n\n2.5. TLS/SSL support\n     Blocking connections can be bound to any arbitrary socket. This makes SSL support quite straight-\n     forward. Any SSLSocket instance can be bound to a blocking connection in order to make all messages\n     transmitted over than connection secured by TLS/SSL.\n\n\n      SSLContext sslcontext = SSLContexts.createSystemDefault();\n      SocketFactory sf = sslcontext.getSocketFactory();\n      SSLSocket socket = (SSLSocket) sf.createSocket(\"somehost\", 443);\n      // Enforce TLS and disable SSL\n      socket.setEnabledProtocols(new String[] {\n              \"TLSv1\",\n              \"TLSv1.1\",\n              \"TLSv1.2\" });\n      // Enforce strong ciphers\n      socket.setEnabledCipherSuites(new String[] {\n              \"TLS_RSA_WITH_AES_256_CBC_SHA\",\n              \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA\",\n              \"TLS_DHE_DSS_WITH_AES_256_CBC_SHA\" });\n      DefaultBHttpClientConnection conn = new DefaultBHttpClientConnection(8 * 1204);\n      conn.bind(socket);\n\n\n\n\n                                                                                                     16\n\f                                     Blocking I/O model\n\n\n2.6. Embedded HTTP server\n     As of version 4.4 HttpCore ships with an embedded HTTP server based on blocking I/O components\n     described above.\n\n\n      HttpRequestHandler requestHandler = <...>\n      HttpProcessor httpProcessor = <...>\n      SocketConfig socketConfig = SocketConfig.custom()\n              .setSoTimeout(15000)\n              .setTcpNoDelay(true)\n              .build();\n      final HttpServer server = ServerBootstrap.bootstrap()\n              .setListenerPort(8080)\n              .setHttpProcessor(httpProcessor)\n              .setSocketConfig(socketConfig)\n              .setExceptionLogger(new StdErrorExceptionLogger())\n              .registerHandler(\"*\", requestHandler)\n              .create();\n      server.start();\n      server.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);\n\n      Runtime.getRuntime().addShutdownHook(new Thread() {\n          @Override\n          public void run() {\n              server.shutdown(5, TimeUnit.SECONDS);\n          }\n      });\n\n\n\n\n                                                                                                17\n\fChapter 3. Asynchronous I/O based on\nNIO\n       Asynchronous I/O model may be more appropriate for those scenarios where raw data throughput is\n       less important than the ability to handle thousands of simultaneous connections in a scalable, resource\n       efficient manner. Asynchronous I/O is arguably more complex and usually requires a special care when\n       dealing with large message payloads.\n\n\n3.1. Differences from other I/O frameworks\n       Solves similar problems as other frameworks, but has certain distinct features:\n\n       • minimalistic, optimized for data volume intensive protocols such as HTTP.\n\n       • efficient memory management: data consumer can read is only as much input data as it can process\n         without having to allocate more memory.\n\n       • direct access to the NIO channels where possible.\n\n\n3.2. I/O reactor\n       HttpCore NIO is based on the Reactor pattern as described by Doug Lea. The purpose of I/O reactors\n       is to react to I/O events and to dispatch event notifications to individual I/O sessions. The main\n       idea of I/O reactor pattern is to break away from the one thread per connection model imposed\n       by the classic blocking I/O model. The IOReactor interface represents an abstract object which\n       implements the Reactor pattern. Internally, IOReactor implementations encapsulate functionality of\n       the NIO java.nio.channels.Selector.\n\n       I/O reactors usually employ a small number of dispatch threads (often as few as one) to dispatch I/O\n       event notifications to a much greater number (often as many as several thousands) of I/O sessions or\n       connections. It is generally recommended to have one dispatch thread per CPU core.\n\n\n        IOReactorConfig config = IOReactorConfig.DEFAULT;\n        IOReactor ioreactor = new DefaultConnectingIOReactor(config);\n\n\n\n3.2.1. I/O dispatchers\n\n       IOReactor   implementations make use of the IOEventDispatch interface to notify clients of events\n       pending for a particular session. All methods of the IOEventDispatch are executed on a dispatch\n       thread of the I/O reactor. Therefore, it is important that processing that takes place in the event methods\n       will not block the dispatch thread for too long, as the I/O reactor will be unable to react to other events.\n\n\n        IOReactor ioreactor = new DefaultConnectingIOReactor();\n\n        IOEventDispatch eventDispatch = <...>\n        ioreactor.execute(eventDispatch);\n\n\n       Generic I/O events as defined by the IOEventDispatch interface:\n\n\n                                                                                                                18\n\f                                     Asynchronous I/O based on NIO\n\n       • connected:       Triggered when a new session has been created.\n\n       • inputReady:       Triggered when the session has pending input.\n\n       • outputReady:       Triggered when the session is ready for output.\n\n       • timeout:      Triggered when the session has timed out.\n\n       • disconnected:       Triggered when the session has been terminated.\n\n3.2.2. I/O reactor shutdown\n       The shutdown of I/O reactors is a complex process and may usually take a while to complete. I/O\n       reactors will attempt to gracefully terminate all active I/O sessions and dispatch threads approximately\n       within the specified grace period. If any of the I/O sessions fails to terminate correctly, the I/O reactor\n       will forcibly shut down remaining sessions.\n\n\n        IOReactor ioreactor = <...>\n        long gracePeriod = 3000L; // milliseconds\n        ioreactor.shutdown(gracePeriod);\n\n\n       The IOReactor#shutdown(long) method is safe to call from any thread.\n\n3.2.3. I/O sessions\n       The IOSession interface represents a sequence of logically related data exchanges between two\n       end points. IOSession encapsulates functionality of NIO java.nio.channels.SelectionKey and\n       java.nio.channels.SocketChannel. The channel associated with the IOSession can be used to read\n       data from and write data to the session.\n\n\n        IOSession iosession = <...>\n        ReadableByteChannel ch = (ReadableByteChannel) iosession.channel();\n        ByteBuffer dst = ByteBuffer.allocate(2048);\n        ch.read(dst);\n\n\n3.2.4. I/O session state management\n       I/O sessions are not bound to an execution thread, therefore one cannot use the context of the thread\n       to store a session's state. All details about a particular session must be stored within the session itself.\n\n\n        IOSession iosession = <...>\n        Object someState = <...>\n        iosession.setAttribute(\"state\", someState);\n        ...\n        IOSession iosession = <...>\n        Object currentState = iosession.getAttribute(\"state\");\n\n\n       Please note that if several sessions make use of shared objects, access to those objects must be made\n       thread-safe.\n\n3.2.5. I/O session event mask\n       One can declare an interest in a particular type of I/O events for a particular I/O session by setting\n       its event mask.\n\n\n                                                                                                                19\n\f                                     Asynchronous I/O based on NIO\n\n\n         IOSession iosession = <...>\n         iosession.setEventMask(SelectionKey.OP_READ | SelectionKey.OP_WRITE);\n\n\n       One can also toggle OP_READ and OP_WRITE flags individually.\n\n\n         IOSession iosession = <...>\n         iosession.setEvent(SelectionKey.OP_READ);\n         iosession.clearEvent(SelectionKey.OP_READ);\n\n\n       Event notifications will not take place if the corresponding interest flag is not set.\n\n3.2.6. I/O session buffers\n\n       Quite often I/O sessions need to maintain internal I/O buffers in order to transform input / output data\n       prior to returning it to the consumer or writing it to the underlying channel. Memory management in\n       HttpCore NIO is based on the fundamental principle that the data a consumer can read, is only as much\n       input data as it can process without having to allocate more memory. That means, quite often some\n       input data may remain unread in one of the internal or external session buffers. The I/O reactor can\n       query the status of these session buffers, and make sure the consumer gets notified correctly as more\n       data gets stored in one of the session buffers, thus allowing the consumer to read the remaining data\n       once it is able to process it. I/O sessions can be made aware of the status of external session buffers\n       using the SessionBufferStatus interface.\n\n\n         IOSession iosession = <...>\n         SessionBufferStatus myBufferStatus = <...>\n         iosession.setBufferStatus(myBufferStatus);\n         iosession.hasBufferedInput();\n         iosession.hasBufferedOutput();\n\n\n\n3.2.7. I/O session shutdown\n\n       One can close an I/O session gracefully by calling IOSession#close() allowing the session to be\n       closed in an orderly manner or by calling IOSession#shutdown() to forcibly close the underlying\n       channel. The distinction between two methods is of primary importance for those types of I/O sessions\n       that involve some sort of a session termination handshake such as SSL/TLS connections.\n\n3.2.8. Listening I/O reactors\n\n       ListeningIOReactor     represents an I/O reactor capable of listening for incoming connections on one\n       or several ports.\n\n\n         ListeningIOReactor ioreactor = <...>\n         ListenerEndpoint ep1 = ioreactor.listen(new InetSocketAddress(8081) );\n         ListenerEndpoint ep2 = ioreactor.listen(new InetSocketAddress(8082));\n         ListenerEndpoint ep3 = ioreactor.listen(new InetSocketAddress(8083));\n         // Wait until all endpoints are up\n         ep1.waitFor();\n         ep2.waitFor();\n         ep3.waitFor();\n\n\n       Once an endpoint is fully initialized it starts accepting incoming connections and propagates I/O\n       activity notifications to the IOEventDispatch instance.\n\n\n                                                                                                            20\n\f                                    Asynchronous I/O based on NIO\n\n       One can obtain a set of registered endpoints at runtime, query the status of an endpoint at runtime,\n       and close it if desired.\n\n\n        ListeningIOReactor ioreactor = <...>\n\n        Set<ListenerEndpoint> eps = ioreactor.getEndpoints();\n        for (ListenerEndpoint ep: eps) {\n            // Still active?\n            System.out.println(ep.getAddress());\n            if (ep.isClosed()) {\n                // If not, has it terminated due to an exception?\n                if (ep.getException() != null) {\n                    ep.getException().printStackTrace();\n                }\n            } else {\n                ep.close();\n            }\n        }\n\n\n3.2.9. Connecting I/O reactors\n       ConnectingIOReactor represents an I/O reactor capable of establishing connections with remote hosts.\n\n\n\n        ConnectingIOReactor ioreactor = <...>\n\n        SessionRequest sessionRequest = ioreactor.connect(\n                new InetSocketAddress(\"www.google.com\", 80),\n                null, null, null);\n\n\n       Opening a connection to a remote host usually tends to be a time consuming process and may take a\n       while to complete. One can monitor and control the process of session initialization by means of the\n       SessionRequestinterface.\n\n\n\n        // Make sure the request times out if connection\n        // has not been established after 1 sec\n        sessionRequest.setConnectTimeout(1000);\n        // Wait for the request to complete\n        sessionRequest.waitFor();\n        // Has request terminated due to an exception?\n        if (sessionRequest.getException() != null) {\n            sessionRequest.getException().printStackTrace();\n        }\n        // Get hold of the new I/O session\n        IOSession iosession = sessionRequest.getSession();\n\n\n       SessionRequest    implementations are expected to be thread-safe. Session request can be aborted at\n       any time by calling IOSession#cancel() from another thread of execution.\n\n\n        if (!sessionRequest.isCompleted()) {\n            sessionRequest.cancel();\n        }\n\n\n       One can pass several optional parameters to the ConnectingIOReactor#connect() method to exert\n       a greater control over the process of session initialization.\n\n       A non-null local socket address parameter can be used to bind the socket to a specific local address.\n\n\n\n\n                                                                                                          21\n\f                                  Asynchronous I/O based on NIO\n\n       ConnectingIOReactor ioreactor = <...>\n\n       SessionRequest sessionRequest = ioreactor.connect(\n               new InetSocketAddress(\"www.google.com\", 80),\n               new InetSocketAddress(\"192.168.0.10\", 1234),\n               null, null);\n\n\n      One can provide an attachment object, which will be added to the new session's context upon\n      initialization. This object can be used to pass an initial processing state to the protocol handler.\n\n\n       SessionRequest sessionRequest = ioreactor.connect(\n               new InetSocketAddress(\"www.google.com\", 80),\n               null, new HttpHost(\"www.google.ru\"), null);\n\n       IOSession iosession = sessionRequest.getSession();\n       HttpHost virtualHost = (HttpHost) iosession.getAttribute(\n           IOSession.ATTACHMENT_KEY);\n\n\n      It is often desirable to be able to react to the completion of a session request asynchronously\n      without having to wait for it, blocking the current thread of execution. One can optionally provide\n      an implementation SessionRequestCallback interface to get notified of events related to session\n      requests, such as request completion, cancellation, failure or timeout.\n\n\n       ConnectingIOReactor ioreactor = <...>\n\n       SessionRequest sessionRequest = ioreactor.connect(\n               new InetSocketAddress(\"www.google.com\", 80), null, null,\n               new SessionRequestCallback() {\n\n                      public void cancelled(SessionRequest request) {\n                      }\n\n                      public void completed(SessionRequest request) {\n                          System.out.println(\"new connection to \" +\n                              request.getRemoteAddress());\n                      }\n\n                      public void failed(SessionRequest request) {\n                          if (request.getException() != null) {\n                              request.getException().printStackTrace();\n                          }\n                      }\n\n                      public void timeout(SessionRequest request) {\n                      }\n\n                });\n\n\n\n3.3. I/O reactor configuration\n      I/O reactors by default use system dependent configuration which in most cases should be sensible\n      enough.\n\n\n       IOReactorConfig config = IOReactorConfig.DEFAULT;\n       IOReactor ioreactor = new DefaultListeningIOReactor(config);\n\n\n      However in some cases custom settings may be necessary, for instance, in order to alter default socket\n      properties and timeout values. One should rarely need to change other parameters.\n\n\n                                                                                                         22\n\f                                     Asynchronous I/O based on NIO\n\n\n        IOReactorConfig config = IOReactorConfig.custom()\n                .setTcpNoDelay(true)\n                .setSoTimeout(5000)\n                .setSoReuseAddress(true)\n                .setConnectTimeout(5000)\n                .build();\n        IOReactor ioreactor = new DefaultListeningIOReactor(config);\n\n\n\n3.3.1. Queuing of I/O interest set operations\n\n       Several older JRE implementations (primarily from IBM) include what Java API documentation refers\n       to as a naive implementation of the java.nio.channels.SelectionKey class. The problem with\n       java.nio.channels.SelectionKey in such JREs is that reading or writing of the I/O interest set may\n       block indefinitely if the I/O selector is in the process of executing a select operation. HttpCore NIO can\n       be configured to operate in a special mode wherein I/O interest set operations are queued and executed\n       by on the dispatch thread only when the I/O selector is not engaged in a select operation.\n\n\n        IOReactorConfig config = IOReactorConfig.custom()\n                .setInterestOpQueued(true)\n                .build();\n\n\n\n3.4. I/O reactor exception handling\n       Protocol specific exceptions as well as those I/O exceptions thrown in the course of interaction with\n       the session's channel are to be expected and are to be dealt with by specific protocol handlers. These\n       exceptions may result in termination of an individual session but should not affect the I/O reactor and all\n       other active sessions. There are situations, however, when the I/O reactor itself encounters an internal\n       problem such as an I/O exception in the underlying NIO classes or an unhandled runtime exception.\n       Those types of exceptions are usually fatal and will cause the I/O reactor to shut down automatically.\n\n       There is a possibility to override this behavior and prevent I/O reactors from shutting down\n       automatically in case of a runtime exception or an I/O exception in internal classes. This can be\n       accomplished by providing a custom implementation of the IOReactorExceptionHandler interface.\n\n\n        DefaultConnectingIOReactor ioreactor = <...>\n\n        ioreactor.setExceptionHandler(new IOReactorExceptionHandler() {\n\n              public boolean handle(IOException ex) {\n                  if (ex instanceof BindException) {\n                      // bind failures considered OK to ignore\n                      return true;\n                  }\n                  return false;\n              }\n\n              public boolean handle(RuntimeException ex) {\n                  if (ex instanceof UnsupportedOperationException) {\n                      // Unsupported operations considered OK to ignore\n                      return true;\n                  }\n                  return false;\n              }\n\n        });\n\n\n\n\n                                                                                                               23\n\f                                     Asynchronous I/O based on NIO\n\n       One needs to be very careful about discarding exceptions indiscriminately. It is often much better to\n       let the I/O reactor shut down itself cleanly and restart it rather than leaving it in an inconsistent or\n       unstable state.\n\n3.4.1. I/O reactor audit log\n       If an I/O reactor is unable to automatically recover from an I/O or a runtime exception it will enter the\n       shutdown mode. First off, it will close all active listeners and cancel all pending new session requests.\n       Then it will attempt to close all active I/O sessions gracefully giving them some time to flush pending\n       output data and terminate cleanly. Lastly, it will forcibly shut down those I/O sessions that still remain\n       active after the grace period. This is a fairly complex process, where many things can fail at the same\n       time and many different exceptions can be thrown in the course of the shutdown process. The I/O\n       reactor will record all exceptions thrown during the shutdown process, including the original one that\n       actually caused the shutdown in the first place, in an audit log. One can examine the audit log and\n       decide whether it is safe to restart the I/O reactor.\n\n\n         DefaultConnectingIOReactor ioreactor = <...>\n\n         // Give it 5 sec grace period\n         ioreactor.shutdown(5000);\n         List<ExceptionEvent> events = ioreactor.getAuditLog();\n         for (ExceptionEvent event: events) {\n             System.err.println(\"Time: \" + event.getTimestamp());\n             event.getCause().printStackTrace();\n         }\n\n\n\n3.5. Non-blocking HTTP connections\n       Effectively non-blocking HTTP connections are wrappers around IOSession with HTTP specific\n       functionality. Non-blocking HTTP connections are stateful and not thread-safe. Input / output\n       operations on non-blocking HTTP connections should be restricted to the dispatch events triggered by\n       the I/O event dispatch thread.\n\n3.5.1. Execution context of non-blocking HTTP connections\n       Non-blocking HTTP connections are not bound to a particular thread of execution and therefore\n       they need to maintain their own execution context. Each non-blocking HTTP connection has an\n       HttpContext instance associated with it, which can be used to maintain a processing state. The\n       HttpContext instance is thread-safe and can be manipulated from multiple threads.\n\n\n\n         DefaultNHttpClientConnection conn = <...>\n         Object myStateObject = <...>\n\n         HttpContext context = conn.getContext();\n         context.setAttribute(\"state\", myStateObject);\n\n\n3.5.2. Working with non-blocking HTTP connections\n       At any point of time one can obtain the request and response objects currently being transferred over\n       the non-blocking HTTP connection. Any of these objects, or both, can be null if there is no incoming\n       or outgoing message currently being transferred.\n\n\n         NHttpConnection conn = <...>\n\n\n\n\n                                                                                                              24\n\f                                    Asynchronous I/O based on NIO\n\n\n        HttpRequest request = conn.getHttpRequest();\n        if (request != null) {\n            System.out.println(\"Transferring request: \" +\n                    request.getRequestLine());\n        }\n        HttpResponse response = conn.getHttpResponse();\n        if (response != null) {\n            System.out.println(\"Transferring response: \" +\n                    response.getStatusLine());\n        }\n\n\n       However, please note that the current request and the current response may not necessarily represent\n       the same message exchange! Non-blocking HTTP connections can operate in a full duplex mode. One\n       can process incoming and outgoing messages completely independently from one another. This makes\n       non-blocking HTTP connections fully pipelining capable, but at same time implies that this is the job\n       of the protocol handler to match logically related request and the response messages.\n\n       Over-simplified process of submitting a request on the client side may look like this:\n\n\n        NHttpClientConnection conn = <...>\n        // Obtain execution context\n        HttpContext context = conn.getContext();\n        // Obtain processing state\n        Object state = context.getAttribute(\"state\");\n        // Generate a request based on the state information\n        HttpRequest request = new BasicHttpRequest(\"GET\", \"/\");\n\n        conn.submitRequest(request);\n        System.out.println(conn.isRequestSubmitted());\n\n\n       Over-simplified process of submitting a response on the server side may look like this:\n\n\n        NHttpServerConnection conn = <...>\n        // Obtain execution context\n        HttpContext context = conn.getContext();\n        // Obtain processing state\n        Object state = context.getAttribute(\"state\");\n\n        // Generate a response based on the state information\n        HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1,\n            HttpStatus.SC_OK, \"OK\");\n        BasicHttpEntity entity = new BasicHttpEntity();\n        entity.setContentType(\"text/plain\");\n        entity.setChunked(true);\n        response.setEntity(entity);\n\n        conn.submitResponse(response);\n        System.out.println(conn.isResponseSubmitted());\n\n\n       Please note that one should rarely need to transmit messages using these low level methods and should\n       use appropriate higher level HTTP service implementations instead.\n\n3.5.3. HTTP I/O control\n       All non-blocking HTTP connections classes implement IOControl interface, which represents\n       a subset of connection functionality for controlling interest in I/O even notifications. IOControl\n       instances are expected to be fully thread-safe. Therefore IOControl can be used to request / suspend\n       I/O event notifications from any thread.\n\n\n                                                                                                         25\n\f                                    Asynchronous I/O based on NIO\n\n       One must take special precautions when interacting with non-blocking connections. HttpRequest and\n       HttpResponse are not thread-safe. It is generally advisable that all input / output operations on a non-\n       blocking connection are executed from the I/O event dispatch thread.\n\n       The following pattern is recommended:\n\n       • Use IOControl interface to pass control over connection's I/O events to another thread / session.\n\n       • If input / output operations need be executed on that particular connection, store all the required\n         information (state) in the connection context and request the appropriate I/O operation by calling\n         IOControl#requestInput() or IOControl#requestOutput() method.\n\n\n       • Execute the required operations from the event method on the dispatch thread using information\n         stored in connection context.\n\n       Please note all operations that take place in the event methods should not block for too long, because\n       while the dispatch thread remains blocked in one session, it is unable to process events for all other\n       sessions. I/O operations with the underlying channel of the session are not a problem as they are\n       guaranteed to be non-blocking.\n\n3.5.4. Non-blocking content transfer\n\n       The process of content transfer for non-blocking connections works completely differently compared\n       to that of blocking connections, as non-blocking connections need to accommodate to the asynchronous\n       nature of the NIO model. The main distinction between two types of connections is inability to use\n       the usual, but inherently blocking java.io.InputStream and java.io.OutputStream classes to\n       represent streams of inbound and outbound content. HttpCore NIO provides ContentEncoder and\n       ContentDecoder interfaces to handle the process of asynchronous content transfer. Non-blocking\n       HTTP connections will instantiate the appropriate implementation of a content codec based on\n       properties of the entity enclosed with the message.\n\n       Non-blocking HTTP connections will fire input events until the content entity is fully transferred.\n\n\n        ContentDecoder decoder = <...>\n        //Read data in\n        ByteBuffer dst = ByteBuffer.allocate(2048);\n        decoder.read(dst);\n        // Decode will be marked as complete when\n        // the content entity is fully transferred\n        if (decoder.isCompleted()) {\n            // Done\n        }\n\n\n       Non-blocking HTTP connections will fire output events until the content entity is marked as fully\n       transferred.\n\n\n        ContentEncoder encoder = <...>\n        // Prepare output data\n        ByteBuffer src = ByteBuffer.allocate(2048);\n        // Write data out\n        encoder.write(src);\n        // Mark content entity as fully transferred when done\n        encoder.complete();\n\n\n\n\n                                                                                                             26\n\f                                   Asynchronous I/O based on NIO\n\n       Please note, one still has to provide an HttpEntity instance when submitting an entity enclosing\n       message to the non-blocking HTTP connection. Properties of that entity will be used to initialize an\n       ContentEncoder instance to be used for transferring entity content. Non-blocking HTTP connections,\n       however, ignore inherently blocking HttpEntity#getContent() and             HttpEntity#writeTo()\n       methods of the enclosed entities.\n\n\n         NHttpServerConnection conn    = <...>\n\n         HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1,\n             HttpStatus.SC_OK, \"OK\");\n         BasicHttpEntity entity = new BasicHttpEntity();\n         entity.setContentType(\"text/plain\");\n         entity.setChunked(true);\n         entity.setContent(null);\n         response.setEntity(entity);\n\n         conn.submitResponse(response);\n\n\n       Likewise, incoming entity enclosing message will have an HttpEntity instance associated with them,\n       but an attempt to call HttpEntity#getContent() or HttpEntity#writeTo() methods will cause an\n       java.lang.IllegalStateException. The HttpEntity instance can be used to determine properties\n       of the incoming entity such as content length.\n\n\n         NHttpClientConnection conn = <...>\n\n         HttpResponse response = conn.getHttpResponse();\n         HttpEntity entity = response.getEntity();\n         if (entity != null) {\n             System.out.println(entity.getContentType());\n             System.out.println(entity.getContentLength());\n             System.out.println(entity.isChunked());\n         }\n\n\n\n3.5.5. Supported non-blocking content transfer mechanisms\n\n       Default implementations of the non-blocking HTTP connection interfaces support three content\n       transfer mechanisms defined by the HTTP/1.1 specification:\n\n       • Content-Length delimited:   The end of the content entity is determined by the value of the\n         Content-Length header. Maximum entity length: Long#MAX_VALUE.\n\n\n       • Identity coding: The end of the content entity is demarcated by closing the underlying connection\n         (end of stream condition). For obvious reasons the identity encoding can only be used on the server\n         side. Max entity length: unlimited.\n\n       • Chunk coding:       The content is sent in small chunks. Max entity length: unlimited.\n\n       The appropriate content codec will be created automatically depending on properties of the entity\n       enclosed with the message.\n\n3.5.6. Direct channel I/O\n\n       Content codes are optimized to read data directly from or write data directly to the underlying I/O\n       session's channel, whenever possible avoiding intermediate buffering in a session buffer. Moreover,\n\n\n                                                                                                         27\n\f                                   Asynchronous I/O based on NIO\n\n      those codecs that do not perform any content transformation (Content-Length delimited and identity\n      codecs, for example) can leverage NIO java.nio.FileChannel methods for significantly improved\n      performance of file transfer operations both inbound and outbound.\n\n      If the actual content decoder implements FileContentDecoder one can make use of its methods to\n      read incoming content directly to a file bypassing an intermediate java.nio.ByteBuffer.\n\n\n       ContentDecoder decoder = <...>\n       //Prepare file channel\n       FileChannel dst;\n       //Make use of direct file I/O if possible\n       if (decoder instanceof FileContentDecoder) {\n           long Bytesread = ((FileContentDecoder) decoder)\n               .transfer(dst, 0, 2048);\n            // Decode will be marked as complete when\n            // the content entity is fully transmitted\n            if (decoder.isCompleted()) {\n                // Done\n            }\n       }\n\n\n      If the actual content encoder implements FileContentEncoder one can make use of its methods to\n      write outgoing content directly from a file bypassing an intermediate java.nio.ByteBuffer.\n\n\n       ContentEncoder encoder = <...>\n       // Prepare file channel\n       FileChannel src;\n       // Make use of direct file I/O if possible\n       if (encoder instanceof FileContentEncoder) {\n           // Write data out\n           long bytesWritten = ((FileContentEncoder) encoder)\n               .transfer(src, 0, 2048);\n           // Mark content entity as fully transferred when done\n           encoder.complete();\n       }\n\n\n\n3.6. HTTP I/O event dispatchers\n      HTTP I/O event dispatchers serve to convert generic I/O events triggered by an I/O reactor to HTTP\n      protocol specific events. They rely on NHttpClientEventHandler and NHttpServerEventHandler\n      interfaces to propagate HTTP protocol events to a HTTP protocol handler.\n\n      Server side HTTP I/O events as defined by the NHttpServerEventHandler interface:\n\n      • connected:      Triggered when a new incoming connection has been created.\n\n      • requestReceived: Triggered when a new HTTP request is received. The connection passed as a\n        parameter to this method is guaranteed to return a valid HTTP request object. If the request received\n        encloses a request entity this method will be followed a series of inputReady events to transfer the\n        request content.\n\n      • inputReady:      Triggered when the underlying channel is ready for reading a new portion\n        of the request entity through the corresponding content decoder. If the content consumer is\n        unable to process the incoming content, input event notifications can temporarily suspended\n        using IOControl interface (super interface of NHttpServerConnection). Please note that the\n\n\n                                                                                                          28\n\f                             Asynchronous I/O based on NIO\n\n  NHttpServerConnection      and ContentDecoder objects are not thread-safe and should only be used\n  within the context of this method call. The IOControl object can be shared and used on other thread\n  to resume input event notifications when the handler is capable of processing more content.\n\n• responseReady:      Triggered when the connection is ready to accept new HTTP response. The\n  protocol handler does not have to submit a response if it is not ready.\n\n• outputReady:       Triggered when the underlying channel is ready for writing a next portion\n  of the response entity through the corresponding content encoder. If the content producer is\n  unable to generate the outgoing content, output event notifications can be temporarily suspended\n  using IOControl interface (super interface of NHttpServerConnection). Please note that the\n  NHttpServerConnection and ContentEncoder objects are not thread-safe and should only be used\n  within the context of this method call. The IOControl object can be shared and used on other thread\n  to resume output event notifications when more content is made available.\n\n• exception: Triggered when an I/O error occurrs while reading from or writing to the underlying\n  channel or when an HTTP protocol violation occurs while receiving an HTTP request.\n\n• timeout:       Triggered when no input is detected on this connection over the maximum period of\n  inactivity.\n\n• closed:       Triggered when the connection has been closed.\n\nClient side HTTP I/O events as defined by the NHttpClientEventHandler interface:\n\n• connected: Triggered when a new outgoing connection has been created. The attachment object\n  passed as a parameter to this event is an arbitrary object that was attached to the session request.\n\n• requestReady:      Triggered when the connection is ready to accept new HTTP request. The\n  protocol handler does not have to submit a request if it is not ready.\n\n• outputReady:       Triggered when the underlying channel is ready for writing a next portion\n  of the request entity through the corresponding content encoder. If the content producer is\n  unable to generate the outgoing content, output event notifications can be temporarily suspended\n  using IOControl interface (super interface of NHttpClientConnection). Please note that the\n  NHttpClientConnection and ContentEncoder objects are not thread-safe and should only be used\n  within the context of this method call. The IOControl object can be shared and used on other thread\n  to resume output event notifications when more content is made available.\n\n• responseReceived:       Triggered when an HTTP response is received. The connection passed as\n  a parameter to this method is guaranteed to return a valid HTTP response object. If the response\n  received encloses a response entity this method will be followed a series of inputReady events to\n  transfer the response content.\n\n• inputReady:       Triggered when the underlying channel is ready for reading a new portion\n  of the response entity through the corresponding content decoder. If the content consumer is\n  unable to process the incoming content, input event notifications can be temporarily suspended\n  using IOControl interface (super interface of NHttpClientConnection). Please note that the\n  NHttpClientConnection and ContentDecoder objects are not thread-safe and should only be used\n  within the context of this method call. The IOControl object can be shared and used on other thread\n  to resume input event notifications when the handler is capable of processing more content.\n\n\n                                                                                                   29\n\f                                         Asynchronous I/O based on NIO\n\n         • exception: Triggered when an I/O error occurs while reading from or writing to the underlying\n           channel or when an HTTP protocol violation occurs while receiving an HTTP response.\n\n         • timeout:        Triggered when no input is detected on this connection over the maximum period of\n           inactivity.\n\n         • closed:        Triggered when the connection has been closed.\n\n\n3.7. Non-blocking HTTP content producers\n         As discussed previously the process of content transfer for non-blocking connections works completely\n         differently compared to that for blocking connections. For obvious reasons classic I/O abstraction\n         based on inherently blocking java.io.InputStream and java.io.OutputStream classes is not\n         well suited for asynchronous data transfer. In order to avoid inefficient and potentially blocking I/\n         O operation redirection through java.nio.channels.Channles#newChannel non-blocking HTTP\n         entities are expected to implement NIO specific extension interface HttpAsyncContentProducer.\n\n         The HttpAsyncContentProducer interface defines several additional method for efficient streaming\n         of content to a non-blocking HTTP connection:\n\n         • produceContent:         Invoked to write out a chunk of content to the ContentEncoder .\n           The IOControl interface can be used to suspend output events if the entity is temporarily\n           unable to produce more content. When all content is finished, the producer MUST call\n           ContentEncoder#complete(). Failure to do so may cause the entity to be incorrectly delimited.\n           Please note that the ContentEncoder object is not thread-safe and should only be used within the\n           context of this method call. The IOControl object can be shared and used on other thread resume\n           output event notifications when more content is made available.\n\n         • isRepeatable: Determines whether or not this producer is capable of producing its content more\n           than once. Repeatable content producers are expected to be able to recreate their content even after\n           having been closed.\n\n         • close:        Closes the producer and releases all resources currently allocated by it.\n\n3.7.1. Creating non-blocking entities\n\n         Several HTTP entity implementations included in HttpCore NIO support HttpAsyncContentProducer\n         interface:\n\n         • NByteArrayEntity\n\n         • NStringEntity\n\n         • NFileEntity\n\n3.7.1.1. NByteArrayEntity\n\n         This is a simple self-contained repeatable entity, which receives its content from a given byte array.\n         This byte array is supplied to the constructor.\n\n\n           NByteArrayEntity entity = new NByteArrayEntity(new byte[] {1, 2, 3});\n\n\n\n\n                                                                                                            30\n\f                                       Asynchronous I/O based on NIO\n\n3.7.1.2. NStringEntity\n\n         This is a simple, self-contained, repeatable entity that retrieves its data from a java.lang.String\n         object. It has 2 constructors, one simply constructs with a given string where the other also takes a\n         character encoding for the data in the java.lang.String.\n\n\n           NStringEntity myEntity = new NStringEntity(\"important message\",\n                   Consts.UTF_8);\n\n\n\n3.7.1.3. NFileEntity\n\n         This entity reads its content body from a file. This class is mostly used to stream large files of different\n         types, so one needs to supply the content type of the file to make sure the content can be correctly\n         recognized and processed by the recipient.\n\n\n           File staticFile = new File(\"/path/to/myapp.jar\");\n           NFileEntity entity = new NFileEntity(staticFile,\n               ContentType.create(\"application/java-archive\", null));\n\n\n\n         The NHttpEntity will make use of the direct channel I/O whenever possible, provided the content\n         encoder is capable of transferring data directly from a file to the socket of the underlying connection.\n\n\n3.8. Non-blocking HTTP protocol handlers\n3.8.1. Asynchronous HTTP service\n         HttpAsyncService  is a fully asynchronous HTTP server side protocol handler based on the non-\n         blocking (NIO) I/O model.      HttpAsyncService translates individual events fired through the\n         NHttpServerEventHandler interface into logically related HTTP message exchanges.\n\n         Upon receiving an incoming request the HttpAsyncService verifies the message for compliance\n         with the server expectations using        HttpAsyncExpectationVerifier, if provided, and\n         then     HttpAsyncRequestHandlerResolver is used to resolve the request URI to a particular\n         HttpAsyncRequestHandler intended to handle the request with the given URI. The protocol handler\n         uses the selected HttpAsyncRequestHandler instance to process the incoming request and to generate\n         an outgoing response.\n\n         HttpAsyncService relies on HttpProcessor   to generate mandatory protocol headers for all outgoing\n         messages and apply common, cross-cutting message transformations to all incoming and outgoing\n         messages, whereas individual HTTP request handlers are expected to implement application specific\n         content generation and processing.\n\n\n           HttpProcessor httpproc = HttpProcessorBuilder.create()\n                   .add(new ResponseDate())\n                   .add(new ResponseServer(\"MyServer-HTTP/1.1\"))\n                   .add(new ResponseContent())\n                   .add(new ResponseConnControl())\n                   .build();\n           HttpAsyncService protocolHandler = new HttpAsyncService(httpproc, null);\n           IOEventDispatch ioEventDispatch = new DefaultHttpServerIODispatch(\n                   protocolHandler,\n                   new DefaultNHttpServerConnectionFactory(ConnectionConfig.DEFAULT));\n\n\n\n\n                                                                                                                  31\n\f                                     Asynchronous I/O based on NIO\n\n          ListeningIOReactor ioreactor = new DefaultListeningIOReactor();\n          ioreactor.execute(ioEventDispatch);\n\n\n3.8.1.1. Non-blocking HTTP request handlers\n\n        HttpAsyncRequestHandler      represents a routine for asynchronous processing of a specific group of\n        non-blocking HTTP requests. Protocol handlers are designed to take care of protocol specific aspects,\n        whereas individual request handlers are expected to take care of application specific HTTP processing.\n        The main purpose of a request handler is to generate a response object with a content entity to be sent\n        back to the client in response to the given request.\n\n\n          HttpAsyncRequestHandler<HttpRequest> rh = new HttpAsyncRequestHandler<HttpRequest>() {\n\n               public HttpAsyncRequestConsumer<HttpRequest> processRequest(\n                       final HttpRequest request,\n                       final HttpContext context) {\n                   // Buffer request content in memory for simplicity\n                   return new BasicAsyncRequestConsumer();\n               }\n\n               public void handle(\n                       final HttpRequest request,\n                       final HttpAsyncExchange httpexchange,\n                       final HttpContext context) throws HttpException, IOException {\n                   HttpResponse response = httpexchange.getResponse();\n                   response.setStatusCode(HttpStatus.SC_OK);\n                   NFileEntity body = new NFileEntity(new File(\"static.html\"),\n                           ContentType.create(\"text/html\", Consts.UTF_8));\n                   response.setEntity(body);\n                   httpexchange.submitResponse(new BasicAsyncResponseProducer(response));\n               }\n\n          };\n\n\n        Request handlers must be implemented in a thread-safe manner. Similarly to servlets, request handlers\n        should not use instance variables unless access to those variables are synchronized.\n\n3.8.1.2. Asynchronous HTTP exchange\n\n        The most fundamental difference of the non-blocking request handlers compared to their blocking\n        counterparts is ability to defer transmission of the HTTP response back to the client without\n        blocking the I/O thread by delegating the process of handling the HTTP request to a worker\n        thread or another service. The instance of HttpAsyncExchange passed as a parameter to the\n        HttpAsyncRequestHandler#handle method to submit a response as at a later point once response\n        content becomes available.\n\n        The HttpAsyncExchange interface can be interacted with using the following methods:\n\n        • getRequest:      Returns the received HTTP request message.\n\n        • getResponse:      Returns the default HTTP response message that can submitted once ready.\n\n        • submitResponse:       Submits an HTTP response and completed the message exchange.\n\n        • isCompleted:      Determines whether or not the message exchange has been completed.\n\n        • setCallback: Sets Cancellable callback to be invoked in case the underlying connection times\n          out or gets terminated prematurely by the client. This callback can be used to cancel a long running\n          response generating process if a response is no longer needed.\n\n\n                                                                                                            32\n\f                                     Asynchronous I/O based on NIO\n\n        • setTimeout:      Sets timeout for this message exchange.\n\n        • getTimeout:      Returns timeout for this message exchange.\n\n\n         HttpAsyncRequestHandler<HttpRequest> rh = new HttpAsyncRequestHandler<HttpRequest>() {\n\n              public HttpAsyncRequestConsumer<HttpRequest> processRequest(\n                      final HttpRequest request,\n                      final HttpContext context) {\n                  // Buffer request content in memory for simplicity\n                  return new BasicAsyncRequestConsumer();\n              }\n\n              public void handle(\n                      final HttpRequest request,\n                      final HttpAsyncExchange httpexchange,\n                      final HttpContext context) throws HttpException, IOException {\n\n                  new Thread() {\n\n                      @Override\n                      public void run() {\n                          try {\n                              Thread.sleep(10);\n                          }\n                          catch(InterruptedException ie) {}\n                          HttpResponse response = httpexchange.getResponse();\n                          response.setStatusCode(HttpStatus.SC_OK);\n                          NFileEntity body = new NFileEntity(new File(\"static.html\"),\n                                  ContentType.create(\"text/html\", Consts.UTF_8));\n                          response.setEntity(body);\n                          httpexchange.submitResponse(new BasicAsyncResponseProducer(response));\n                      }\n                  }.start();\n\n              }\n\n         };\n\n\n        Please note HttpResponse instances are not thread-safe and may not be modified concurrently. Non-\n        blocking request handlers must ensure HTTP response cannot be accessed by more than one thread\n        at a time.\n\n3.8.1.3. Asynchronous HTTP request consumer\n\n        HttpAsyncRequestConsumer     facilitates the process of asynchronous processing of HTTP requests. It\n        is a callback interface used by HttpAsyncRequestHandlers to process an incoming HTTP request\n        message and to stream its content from a non-blocking server side HTTP connection.\n\n        HTTP I/O events and methods as defined by the HttpAsyncRequestConsumer interface:\n\n        • requestReceived:       Invoked when a HTTP request message is received.\n\n        • consumeContent:       Invoked to process a chunk of content from the ContentDecoder. The\n          IOControl interface can be used to suspend input events if the consumer is temporarily unable\n          to consume more content. The consumer can use the ContentDecoder#isCompleted() method\n          to find out whether or not the message content has been fully consumed. Please note that the\n          ContentDecoder object is not thread-safe and should only be used within the context of this method\n          call. The IOControl object can be shared and used on other thread to resume input event notifications\n\n\n                                                                                                            33\n\f                                     Asynchronous I/O based on NIO\n\n          when the consumer is capable of processing more content. This event is invoked only if the incoming\n          request message has a content entity enclosed in it.\n\n        • requestCompleted:       Invoked to signal that the request has been fully processed.\n\n        • failed:     Invoked to signal that the request processing terminated abnormally.\n\n        • getException:       Returns an exception in case of an abnormal termination. This method returns\n          null if the request execution is still ongoing or if it completed successfully.\n\n        • getResult: Returns a result of the request execution, when available. This method returns null\n          if the request execution is still ongoing.\n\n        • isDone:     Determines whether or not the request execution completed. If the request processing\n          terminated normally getResult() can be used to obtain the result. If the request processing\n          terminated abnormally getException() can be used to obtain the cause.\n\n        • close:     Closes the consumer and releases all resources currently allocated by it.\n\n        HttpAsyncRequestConsumer     implementations are expected to be thread-safe.\n\n        BasicAsyncRequestConsumer       is a very basic implementation of the HttpAsyncRequestConsumer\n        interface shipped with the library. Please note that this consumer buffers request content in memory\n        and therefore should be used for relatively small request messages.\n\n3.8.1.4. Asynchronous HTTP response producer\n\n        HttpAsyncResponseProducer        facilitates the process of asynchronous generation of HTTP responses.\n        It is a callback interface used by HttpAsyncRequestHandlers to generate an HTTP response message\n        and to stream its content to a non-blocking server side HTTP connection.\n\n        HTTP I/O events and methods as defined by the HttpAsyncResponseProducer interface:\n\n        • generateResponse:       Invoked to generate a HTTP response message header.\n\n        • produceContent:        Invoked to write out a chunk of content to the ContentEncoder. The\n          IOControl      interface can be used to suspend output events if the producer is temporarily\n          unable to produce more content. When all content is finished, the producer MUST call\n          ContentEncoder#complete(). Failure to do so may cause the entity to be incorrectly delimited.\n          Please note that the ContentEncoder object is not thread-safe and should only be used within the\n          context of this method call. The IOControl object can be shared and used on other thread resume\n          output event notifications when more content is made available. This event is invoked only for if the\n          outgoing response message has a content entity enclosed in it, that is HttpResponse#getEntity()\n          returns null.\n\n        • responseCompleted:       Invoked to signal that the response has been fully written out.\n\n        • failed:     Invoked to signal that the response processing terminated abnormally.\n\n        • close:     Closes the producer and releases all resources currently allocated by it.\n\n        HttpAsyncResponseProducer      implementations are expected to be thread-safe.\n\n        BasicAsyncResponseProducer       is a basic implementation of the HttpAsyncResponseProducer\n        interface shipped with the library. The producer can make use of the HttpAsyncContentProducer\n\n\n                                                                                                            34\n\f                                     Asynchronous I/O based on NIO\n\n         interface to efficiently stream out message content to a non-blocking HTTP connection, if it is\n         implemented by the HttpEntity enclosed in the response.\n\n3.8.1.5. Non-blocking request handler resolver\n\n         The management of non-blocking HTTP request handlers is quite similar to that of blocking HTTP\n         request handlers. Usually an instance of HttpAsyncRequestHandlerResolver is used to maintain a\n         registry of request handlers and to matches a request URI to a particular request handler. HttpCore\n         includes only a very simple implementation of the request handler resolver based on a trivial pattern\n         matching algorithm: HttpAsyncRequestHandlerRegistry supports only three formats: *, <uri>* and\n         *<uri>.\n\n\n\n          HttpAsyncRequestHandler<?> myRequestHandler1 = <...>\n          HttpAsyncRequestHandler<?> myRequestHandler2 = <...>\n          HttpAsyncRequestHandler<?> myRequestHandler3 = <...>\n          UriHttpAsyncRequestHandlerMapper handlerReqistry =\n                  new UriHttpAsyncRequestHandlerMapper();\n          handlerReqistry.register(\"/service/*\", myRequestHandler1);\n          handlerReqistry.register(\"*.do\", myRequestHandler2);\n          handlerReqistry.register(\"*\", myRequestHandler3);\n\n\n         Users    are     encouraged      to\n                                           provide      more     sophisticated    implementations          of\n         HttpAsyncRequestHandlerResolver, for instance, based on regular expressions.\n\n\n3.8.2. Asynchronous HTTP request executor\n\n         HttpAsyncRequestExecutor   is a fully asynchronous client side HTTP protocol handler based on\n         the NIO (non-blocking) I/O model. HttpAsyncRequestExecutor translates individual events fired\n         through the NHttpClientEventHandler interface into logically related HTTP message exchanges.\n\n         HttpAsyncRequestExecutor    relies on    HttpAsyncRequestExecutionHandler to implement\n         application specific content generation and processing and to handle logically related\n         series of HTTP request / response exchanges, which may also span across multiple\n         connections. HttpProcessor provided by the     HttpAsyncRequestExecutionHandler instance\n         will be used to generate mandatory protocol headers for all outgoing messages and apply\n         common, cross-cutting message transformations to all incoming and outgoing messages. The\n         caller is expected to pass an instance of HttpAsyncRequestExecutionHandler to be used\n         for the next series of HTTP message exchanges through the connection context using\n         HttpAsyncRequestExecutor#HTTP_HANDLER attribute. HTTP exchange sequence is considered\n         complete when the HttpAsyncRequestExecutionHandler#isDone() method returns true.\n\n\n          HttpAsyncRequestExecutor ph = new HttpAsyncRequestExecutor();\n          IOEventDispatch ioEventDispatch = new DefaultHttpClientIODispatch(ph,\n                  new DefaultNHttpClientConnectionFactory(ConnectionConfig.DEFAULT));\n          ConnectingIOReactor ioreactor = new DefaultConnectingIOReactor();\n          ioreactor.execute(ioEventDispatch);\n\n\n         The HttpAsyncRequester utility class can be used to abstract away low level details of\n         HttpAsyncRequestExecutionHandler        management. Please note HttpAsyncRequester supports\n         single HTTP request / response exchanges only. It does not support HTTP authentication and does not\n         handle redirects automatically.\n\n\n\n\n                                                                                                           35\n\f                                     Asynchronous I/O based on NIO\n\n         HttpProcessor httpproc = HttpProcessorBuilder.create()\n                 .add(new RequestContent())\n                 .add(new RequestTargetHost())\n                 .add(new RequestConnControl())\n                 .add(new RequestUserAgent(\"MyAgent-HTTP/1.1\"))\n                 .add(new RequestExpectContinue(true))\n                 .build();\n         HttpAsyncRequester requester = new HttpAsyncRequester(httpproc);\n         NHttpClientConnection conn = <...>\n         Future<HttpResponse> future = requester.execute(\n                 new BasicAsyncRequestProducer(\n                         new HttpHost(\"localhost\"),\n                         new BasicHttpRequest(\"GET\", \"/\")),\n                 new BasicAsyncResponseConsumer(),\n                 conn);\n         HttpResponse response = future.get();\n\n\n3.8.2.1. Asynchronous HTTP request producer\n\n        HttpAsyncRequestProducer      facilitates the process of asynchronous generation of HTTP requests. It\n        is a callback interface whose methods get invoked to generate an HTTP request message and to stream\n        message content to a non-blocking client side HTTP connection.\n\n        Repeatable request producers capable of generating the same request message more than once can be\n        reset to their initial state by calling the resetRequest() method, at which point request producers\n        are expected to release currently allocated resources that are no longer needed or re-acquire resources\n        needed to repeat the process.\n\n        HTTP I/O events and methods as defined by the HttpAsyncRequestProducer interface:\n\n        • getTarget:      Invoked to obtain the request target host.\n\n        • generateRequest: Invoked to generate a HTTP request message header. The message is expected\n          to implement the HttpEntityEnclosingRequest interface if it is to enclose a content entity.\n\n        • produceContent:       Invoked to write out a chunk of content to the ContentEncoder. The\n          IOControl     interface can be used to suspend output events if the producer is temporarily\n          unable to produce more content. When all content is finished, the producer MUST call\n          ContentEncoder#complete(). Failure to do so may cause the entity to be incorrectly delimited\n          Please note that the ContentEncoder object is not thread-safe and should only be used within\n          the context of this method call. The IOControl object can be shared and used on other\n          thread resume output event notifications when more content is made available. This event is\n          invoked only for if the outgoing request message has a content entity enclosed in it, that is\n          HttpEntityEnclosingRequest#getEntity() returns null .\n\n\n        • requestCompleted:       Invoked to signal that the request has been fully written out.\n\n        • failed:      Invoked to signal that the request processing terminated abnormally.\n\n        • resetRequest: Invoked to reset the producer to its initial state. Repeatable request producers are\n          expected to release currently allocated resources that are no longer needed or re-acquire resources\n          needed to repeat the process.\n\n        • close:     Closes the producer and releases all resources currently allocated by it.\n\n        HttpAsyncRequestProducer      implementations are expected to be thread-safe.\n\n\n                                                                                                            36\n\f                                     Asynchronous I/O based on NIO\n\n        BasicAsyncRequestProducer      is a basic implementation of the HttpAsyncRequestProducer interface\n        shipped with the library. The producer can make use of the HttpAsyncContentProducer interface to\n        efficiently stream out message content to a non-blocking HTTP connection, if it is implemented by\n        the HttpEntity enclosed in the request.\n\n3.8.2.2. Asynchronous HTTP response consumer\n\n        HttpAsyncResponseConsumer      facilitates the process of asynchronous processing of HTTP responses.\n        It is a callback interface whose methods get invoked to process an HTTP response message and to\n        stream message content from a non-blocking client side HTTP connection.\n\n        HTTP I/O events and methods as defined by the HttpAsyncResponseConsumer interface:\n\n        • responseReceived:       Invoked when a HTTP response message is received.\n\n        • consumeContent:       Invoked to process a chunk of content from the ContentDecoder. The\n          IOControl interface can be used to suspend input events if the consumer is temporarily unable\n          to consume more content. The consumer can use the ContentDecoder#isCompleted() method\n          to find out whether or not the message content has been fully consumed. Please note that the\n          ContentDecoder object is not thread-safe and should only be used within the context of this method\n          call. The IOControl object can be shared and used on other thread to resume input event notifications\n          when the consumer is capable of processing more content. This event is invoked only for if the\n          incoming response message has a content entity enclosed in it.\n\n        • responseCompleted:       Invoked to signal that the response has been fully processed.\n\n        • failed:     Invoked to signal that the response processing terminated abnormally.\n\n        • getException:      Returns an exception in case of an abnormal termination. This method returns\n          null if the response processing is still ongoing or if it completed successfully.\n\n\n        • getResult:      Returns a result of the response processing, when available. This method returns\n          null if the response processing is still ongoing.\n\n\n        • isDone: Determines whether or not the response processing completed. If the response processing\n          terminated normally getResult() can be used to obtain the result. If the response processing\n          terminated abnormally getException() can be used to obtain the cause.\n\n        • close:     Closes the consumer and releases all resources currently allocated by it.\n\n        HttpAsyncResponseConsumer      implementations are expected to be thread-safe.\n\n        BasicAsyncResponseConsumer       is a very basic implementation of the HttpAsyncResponseConsumer\n        interface shipped with the library. Please note that this consumer buffers response content in memory\n        and therefore should be used for relatively small response messages.\n\n\n3.9. Non-blocking connection pools\n        Non-blocking connection pools are quite similar to blocking one with one significant distinction that\n        they have to reply an I/O reactor to establish new connections. As a result connections leased from\n        a non-blocking pool are returned fully initialized and already bound to a particular I/O session. Non-\n        blocking connections managed by a connection pool cannot be bound to an arbitrary I/O session.\n\n\n                                                                                                            37\n\f                                  Asynchronous I/O based on NIO\n\n\n       HttpHost target = new HttpHost(\"localhost\");\n       ConnectingIOReactor ioreactor = <...>\n       BasicNIOConnPool connpool = new BasicNIOConnPool(ioreactor);\n       connpool.lease(target, null,\n               10, TimeUnit.SECONDS,\n               new FutureCallback<BasicNIOPoolEntry>() {\n                   @Override\n                   public void completed(BasicNIOPoolEntry entry) {\n                       NHttpClientConnection conn = entry.getConnection();\n                       System.out.println(\"Connection successfully leased\");\n                       // Update connection context and request output\n                       conn.requestOutput();\n                   }\n\n                      @Override\n                      public void failed(Exception ex) {\n                          System.out.println(\"Connection request failed\");\n                          ex.printStackTrace();\n                      }\n\n                      @Override\n                      public void cancelled() {\n                      }\n                });\n\n\n      Please note due to event-driven nature of asynchronous communication model it is quite difficult\n      to ensure proper release of persistent connections back to the pool. One can make use of\n      HttpAsyncRequester to handle connection lease and release behind the scene.\n\n\n\n       ConnectingIOReactor ioreactor = <...>\n       HttpProcessor httpproc = <...>\n       BasicNIOConnPool connpool = new BasicNIOConnPool(ioreactor);\n       HttpAsyncRequester requester = new HttpAsyncRequester(httpproc);\n       HttpHost target = new HttpHost(\"localhost\");\n       Future<HttpResponse> future = requester.execute(\n               new BasicAsyncRequestProducer(\n                       new HttpHost(\"localhost\"),\n                       new BasicHttpRequest(\"GET\", \"/\")),\n               new BasicAsyncResponseConsumer(),\n               connpool);\n\n\n\n3.10. Pipelined request execution\n      In addition to the normal request / response execution mode HttpAsyncRequester is also capable of\n      executing requests in the so called pipelined mode whereby several requests are immediately written\n      out to the underlying connection. Please note that entity enclosing requests can be executed in the\n      pipelined mode but the 'expect: continue' handshake should be disabled (request messages should\n      contains no 'Expect: 100-continue' header).\n\n\n       HttpProcessor httpproc = <...>\n       HttpAsyncRequester requester = new HttpAsyncRequester(httpproc);\n       HttpHost target = new HttpHost(\"www.apache.org\");\n       List<BasicAsyncRequestProducer> requestProducers = Arrays.asList(\n               new BasicAsyncRequestProducer(target, new BasicHttpRequest(\"GET\", \"/index.html\")),\n               new BasicAsyncRequestProducer(target, new BasicHttpRequest(\"GET\", \"/foundation/index.html\")),\n               new BasicAsyncRequestProducer(target, new BasicHttpRequest(\"GET\", \"/foundation/how-it-works.ht\n       );\n       List<BasicAsyncResponseConsumer> responseConsumers = Arrays.asList(\n               new BasicAsyncResponseConsumer(),\n\n\n\n\n                                                                                                      38\n\f                                     Asynchronous I/O based on NIO\n\n                   new BasicAsyncResponseConsumer(),\n                   new BasicAsyncResponseConsumer()\n          );\n          HttpCoreContext context = HttpCoreContext.create();\n          Future<List<HttpResponse>> future = requester.executePipelined(\n                  target, requestProducers, responseConsumers, pool, context, null);\n\n\n         Please note that older web servers and especially older HTTP proxies may be unable to handle pipelined\n         requests correctly. Use the pipelined execution mode with caution.\n\n\n3.11. Non-blocking TLS/SSL\n3.11.1. SSL I/O session\n         SSLIOSession   is a decorator class intended to transparently extend any arbitrary IOSession with\n         transport layer security capabilities based on the SSL/TLS protocol. Default HTTP connection\n         implementations and protocol handlers should be able to work with SSL sessions without special\n         preconditions or modifications.\n\n\n          SSLContext sslcontext = SSLContext.getInstance(\"Default\");\n          sslcontext.init(null, null, null);\n          // Plain I/O session\n          IOSession iosession = <...>\n          SSLIOSession sslsession = new SSLIOSession(\n                  iosession, SSLMode.CLIENT, sslcontext, null);\n          iosession.setAttribute(SSLIOSession.SESSION_KEY, sslsession);\n          NHttpClientConnection conn = new DefaultNHttpClientConnection(\n                  sslsession, 8 * 1024);\n\n\n         One can also use SSLNHttpClientConnectionFactory or SSLNHttpServerConnectionFactory\n         classes to conveniently create SSL encrypterd HTTP connections.\n\n\n          SSLContext sslcontext = SSLContext.getInstance(\"Default\");\n          sslcontext.init(null, null, null);\n          // Plain I/O session\n          IOSession iosession = <...>\n          SSLNHttpClientConnectionFactory connfactory = new SSLNHttpClientConnectionFactory(\n                  sslcontext, null, ConnectionConfig.DEFAULT);\n          NHttpClientConnection conn = connfactory.createConnection(iosession);\n\n\n3.11.1.1. SSL setup handler\n\n         Applications can customize various aspects of the TLS/SSl protocol by passing a custom\n         implementation of the SSLSetupHandler interface.\n\n         SSL events as defined by the SSLSetupHandler interface:\n\n         • initalize:     Triggered when the SSL connection is being initialized. The handler can use this\n           callback to customize properties of the javax.net.ssl.SSLEngine used to establish the SSL\n           session.\n\n         • verify:      Triggered when the SSL connection has been established and initial SSL handshake\n           has been successfully completed. The handler can use this callback to verify properties of the\n           SSLSession. For instance this would be the right place to enforce SSL cipher strength, validate\n           certificate chain and do hostname checks.\n\n\n\n\n                                                                                                            39\n\f                                  Asynchronous I/O based on NIO\n\n        SSLContext sslcontext = SSLContexts.createDefault();\n        // Plain I/O session\n        IOSession iosession = <...>\n\n        SSLIOSession sslsession = new SSLIOSession(\n                iosession, SSLMode.CLIENT, sslcontext, new SSLSetupHandler() {\n\n              public void initalize(final SSLEngine sslengine) throws SSLException {\n                  // Enforce TLS and disable SSL\n                  sslengine.setEnabledProtocols(new String[] {\n                          \"TLSv1\",\n                          \"TLSv1.1\",\n                          \"TLSv1.2\" });\n                  // Enforce strong ciphers\n                  sslengine.setEnabledCipherSuites(new String[] {\n                          \"TLS_RSA_WITH_AES_256_CBC_SHA\",\n                          \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA\",\n                          \"TLS_DHE_DSS_WITH_AES_256_CBC_SHA\" });\n              }\n\n              public void verify(\n                      final IOSession iosession,\n                      final SSLSession sslsession) throws SSLException {\n                  X509Certificate[] certs = sslsession.getPeerCertificateChain();\n                  // Examine peer certificate chain\n                  for (X509Certificate cert: certs) {\n                      System.out.println(cert.toString());\n                  }\n              }\n\n        });\n\n\n       SSLSetupHandler impelemntations can also be used with the SSLNHttpClientConnectionFactory or\n       SSLNHttpServerConnectionFactory    classes.\n\n\n        SSLContext sslcontext = SSLContexts.createDefault();\n        // Plain I/O session\n        IOSession iosession = <...>\n\n        SSLSetupHandler mysslhandler = new SSLSetupHandler() {\n\n              public void initalize(final SSLEngine sslengine) throws SSLException {\n                  // Enforce TLS and disable SSL\n                  sslengine.setEnabledProtocols(new String[] {\n                          \"TLSv1\",\n                          \"TLSv1.1\",\n                          \"TLSv1.2\" });\n              }\n\n              public void verify(\n                      final IOSession iosession, final SSLSession sslsession) throws SSLException {\n              }\n\n\n\n        };\n        SSLNHttpClientConnectionFactory connfactory = new SSLNHttpClientConnectionFactory(\n                sslcontext, mysslhandler, ConnectionConfig.DEFAULT);\n        NHttpClientConnection conn = connfactory.createConnection(iosession);\n\n\n\n3.11.2. TLS/SSL aware I/O event dispatches\n\n       Default    IOEventDispatch  implementations shipped   with   the   library   such    as\n       DefaultHttpServerIODispatch and   DefaultHttpClientIODispatch automatically detect SSL\n\n\n\n                                                                                                  40\n\f                                 Asynchronous I/O based on NIO\n\n     encrypted sessions and handle SSL transport aspects transparently. However, custom I/O event\n     dispatchers that do not extend AbstractIODispatch are required to take some additional actions to\n     ensure correct functioning of the transport layer encryption.\n\n     • The I/O dispatch may need to call SSLIOSession#initalize() method in order to put the SSL\n       session either into a client or a server mode, if the SSL session has not been yet initialized.\n\n     • When the underlying I/O session is input ready, the I/O dispatcher should check whether the SSL I/\n       O session is ready to produce input data by calling SSLIOSession#isAppInputReady(), pass control\n       to the protocol handler if it is, and finally call SSLIOSession#inboundTransport() method in order\n       to do the necessary SSL handshaking and decrypt input data.\n\n     • When the underlying I/O session is output ready, the I/O dispatcher should check whether the SSL I/\n       O session is ready to accept output data by calling SSLIOSession#isAppOutputReady(), pass control\n       to the protocol handler if it is, and finally call SSLIOSession#outboundTransport() method in\n       order to do the necessary SSL handshaking and encrypt application data.\n\n\n3.12. Embedded non-blocking HTTP server\n     As of version 4.4 HttpCore ships with an embedded non-blocking HTTP server based on non-blocking\n     I/O components described above.\n\n\n      HttpAsyncRequestHandler<?> requestHandler = <...>\n      HttpProcessor httpProcessor = <...>\n      SocketConfig socketConfig = SocketConfig.custom()\n              .setSoTimeout(15000)\n              .setTcpNoDelay(true)\n              .build();\n      final HttpServer server = ServerBootstrap.bootstrap()\n              .setListenerPort(8080)\n              .setHttpProcessor(httpProcessor)\n              .setSocketConfig(socketConfig)\n              .setExceptionLogger(new StdErrorExceptionLogger())\n              .registerHandler(\"*\", requestHandler)\n              .create();\n      server.start();\n      server.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);\n\n      Runtime.getRuntime().addShutdownHook(new Thread() {\n          @Override\n          public void run() {\n              server.shutdown(5, TimeUnit.SECONDS);\n          }\n      });\n\n\n\n\n                                                                                                       41\n\fChapter 4. Advanced topics\n4.1. HTTP message parsing and formatting framework\n       HTTP message processing framework is designed to be expressive and flexible while remaining\n       memory efficient and fast. HttpCore HTTP message processing code achieves near zero intermediate\n       garbage and near zero-copy buffering for its parsing and formatting operations. The same HTTP\n       message parsing and formatting API and implementations are used by both the blocking and non-\n       blocking transport implementations, which helps ensure a consistent behavior of HTTP services\n       regardless of the I/O model.\n\n4.1.1. HTTP line parsing and formatting\n\n       HttpCore utilizes a number of low level components for all its line parsing and formatting methods.\n\n       CharArrayBuffer represents a sequence of characters, usually a single line in an HTTP message stream\n       such as a request line, a status line or a header. Internally CharArrayBuffer is backed by an array of\n       chars, which can be expanded to accommodate more input if needed. CharArrayBuffer also provides\n       a number of utility methods for manipulating content of the buffer, storing more data and retrieving\n       subsets of data.\n\n\n        CharArrayBuffer buf = new CharArrayBuffer(64);\n        buf.append(\"header: data \");\n        int i = buf.indexOf(':');\n        String s = buf.substringTrimmed(i + 1, buf.length());\n        System.out.println(s);\n        System.out.println(s.length());\n\n\n       stdout >\n\n\n        data\n        4\n\n\n       ParserCursor represents a context of a parsing operation: the bounds limiting the scope of the parsing\n       operation and the current position the parsing operation is expected to start at.\n\n\n        CharArrayBuffer buf = new CharArrayBuffer(64);\n        buf.append(\"header: data \");\n        int i = buf.indexOf(':');\n        ParserCursor cursor = new ParserCursor(0, buf.length());\n        cursor.updatePos(i + 1);\n        System.out.println(cursor);\n\n\n       stdout >\n\n\n        [0>7>14]\n\n\n       LineParser  is the interface for parsing lines in the head section of an HTTP message. There are\n       individual methods for parsing a request line, a status line, or a header line. The lines to parse are\n       passed in-memory, the parser does not depend on any specific I/O mechanism.\n\n\n                                                                                                          42\n\f                                     Advanced topics\n\n\n CharArrayBuffer buf = new CharArrayBuffer(64);\n buf.append(\"HTTP/1.1 200\");\n ParserCursor cursor = new ParserCursor(0, buf.length());\n\n LineParser parser = BasicLineParser.INSTANCE;\n ProtocolVersion ver = parser.parseProtocolVersion(buf, cursor);\n System.out.println(ver);\n System.out.println(buf.substringTrimmed(\n         cursor.getPos(),\n         cursor.getUpperBound()));\n\n\nstdout >\n\n\n HTTP/1.1\n 200\n\n\n\n CharArrayBuffer buf = new CharArrayBuffer(64);\n buf.append(\"HTTP/1.1 200 OK\");\n ParserCursor cursor = new ParserCursor(0, buf.length());\n LineParser parser = new BasicLineParser();\n StatusLine sl = parser.parseStatusLine(buf, cursor);\n System.out.println(sl.getReasonPhrase());\n\n\nstdout >\n\n\n OK\n\n\nLineFormatter     for formatting elements of the head section of an HTTP message. This is the\ncomplement to LineParser . There are individual methods for formatting a request line, a status line,\nor a header line.\n\nPlease note the formatting does not include the trailing line break sequence CR-LF.\n\n\n CharArrayBuffer buf = new CharArrayBuffer(64);\n LineFormatter formatter = new BasicLineFormatter();\n formatter.formatRequestLine(buf,\n     new BasicRequestLine(\"GET\", \"/\", HttpVersion.HTTP_1_1));\n System.out.println(buf.toString());\n formatter.formatHeader(buf,\n     new BasicHeader(\"Content-Type\", \"text/plain\"));\n System.out.println(buf.toString());\n\n\nstdout >\n\n\n GET / HTTP/1.1\n Content-Type: text/plain\n\n\nHeaderValueParser    is the interface for parsing header values into elements.\n\n\n CharArrayBuffer buf = new CharArrayBuffer(64);\n HeaderValueParser parser = new BasicHeaderValueParser();\n buf.append(\"name1=value1; param1=p1, \" +\n     \"name2 = \\\"value2\\\", name3 = value3\");\n ParserCursor cursor = new ParserCursor(0, buf.length());\n System.out.println(parser.parseHeaderElement(buf, cursor));\n\n\n\n\n                                                                                                  43\n\f                                            Advanced topics\n\n        System.out.println(parser.parseHeaderElement(buf, cursor));\n        System.out.println(parser.parseHeaderElement(buf, cursor));\n\n\n       stdout >\n\n\n        name1=value1; param1=p1\n        name2=value2\n        name3=value3\n\n\n       HeaderValueFormatter  is the interface for formatting elements of a header value. This is the\n       complement to HeaderValueParser .\n\n\n        CharArrayBuffer buf = new CharArrayBuffer(64);\n        HeaderValueFormatter formatter = new BasicHeaderValueFormatter();\n        HeaderElement[] hes = new HeaderElement[] {\n                new BasicHeaderElement(\"name1\", \"value1\",\n                        new NameValuePair[] {\n                            new BasicNameValuePair(\"param1\", \"p1\")} ),\n                new BasicHeaderElement(\"name2\", \"value2\"),\n                new BasicHeaderElement(\"name3\", \"value3\"),\n        };\n        formatter.formatElements(buf, hes, true);\n        System.out.println(buf.toString());\n\n\n       stdout >\n\n\n        name1=\"value1\"; param1=\"p1\", name2=\"value2\", name3=\"value3\"\n\n\n4.1.2. HTTP message streams and session I/O buffers\n       HttpCore provides a number of utility classes for the blocking and non-blocking I/O models that\n       facilitate the processing of HTTP message streams, simplify handling of CR-LF delimited lines in HTTP\n       messages and manage intermediate data buffering.\n\n       HTTP connection implementations usually rely on session input/output buffers for reading and writing\n       data from and to an HTTP message stream. Session input/output buffer implementations are I/O model\n       specific and are optimized either for blocking or non-blocking operations.\n\n       Blocking HTTP connections use socket bound session buffers to transfer data. Session buffer interfaces\n       are similar to java.io.InputStream / java.io.OutputStream classes, but they also provide methods\n       for reading and writing CR-LF delimited lines.\n\n\n        Socket socket1 = <...>\n        Socket socket2 = <...>\n        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n        SessionInputBufferImpl inbuffer = new SessionInputBufferImpl(metrics, 8 * 1024);\n        inbuffer.bind(socket1.getInputStream());\n        SessionOutputBufferImpl outbuffer = new SessionOutputBufferImpl(metrics, 8 * 1024);\n        outbuffer.bind(socket2.getOutputStream());\n        CharArrayBuffer linebuf = new CharArrayBuffer(1024);\n        inbuffer.readLine(linebuf);\n        outbuffer.writeLine(linebuf);\n\n\n       Non-blocking HTTP connections use session buffers optimized for reading and writing data from and\n       to non-blocking NIO channels. NIO session input/output sessions help deal with CR-LF delimited lines\n       in a non-blocking I/O mode.\n\n\n                                                                                                          44\n\f                                        Advanced topics\n\n\n        ReadableByteChannel channel1 = <...>\n        WritableByteChannel channel2 = <...>\n\n        SessionInputBuffer inbuffer = new SessionInputBufferImpl(8 * 1024);\n        SessionOutputBuffer outbuffer = new SessionOutputBufferImpl(8 * 1024);\n\n        CharArrayBuffer linebuf = new CharArrayBuffer(1024);\n        boolean endOfStream = false;\n        int bytesRead = inbuffer.fill(channel1);\n        if (bytesRead == -1) {\n            endOfStream = true;\n        }\n        if (inbuffer.readLine(linebuf, endOfStream)) {\n            outbuffer.writeLine(linebuf);\n        }\n        if (outbuffer.hasData()) {\n            outbuffer.flush(channel2);\n        }\n\n\n\n4.1.3. HTTP message parsers and formatters\n\n      HttpCore also provides coarse-grained facade type interfaces for parsing and formatting of HTTP\n      messages. Default implementations of those interfaces build upon the functionality provided\n      by SessionInputBuffer / SessionOutputBuffer and HttpLineParser / HttpLineFormatter\n      implementations.\n\n      Example of HTTP request parsing / writing for blocking HTTP connections:\n\n\n        SessionInputBuffer inbuffer = <...>\n        SessionOutputBuffer outbuffer = <...>\n\n        HttpMessageParser<HttpRequest> requestParser = new DefaultHttpRequestParser(\n            inbuffer);\n        HttpRequest request = requestParser.parse();\n        HttpMessageWriter<HttpRequest> requestWriter = new DefaultHttpRequestWriter(\n            outbuffer);\n        requestWriter.write(request);\n\n\n      Example of HTTP response parsing / writing for blocking HTTP connections:\n\n\n        SessionInputBuffer inbuffer = <...>\n        SessionOutputBuffer outbuffer = <...>\n\n        HttpMessageParser<HttpResponse> responseParser = new DefaultHttpResponseParser(\n                inbuffer);\n        HttpResponse response = responseParser.parse();\n        HttpMessageWriter<HttpResponse> responseWriter = new DefaultHttpResponseWriter(\n                outbuffer);\n        responseWriter.write(response);\n\n\n      Custom message parsers and writers can be plugged into the message processing pipeline through a\n      custom connection factory:\n\n\n        HttpMessageWriterFactory<HttpResponse> responseWriterFactory =\n                                        new HttpMessageWriterFactory<HttpResponse>() {\n            @Override\n            public HttpMessageWriter<HttpResponse> create(\n                    SessionOutputBuffer buffer) {\n\n\n\n\n                                                                                                   45\n\f                                   Advanced topics\n\n          HttpMessageWriter<HttpResponse> customWriter = <...>\n          return customWriter;\n     }\n };\n HttpMessageParserFactory<HttpRequest> requestParserFactory =\n                                 new HttpMessageParserFactory<HttpRequest>() {\n     @Override\n     public HttpMessageParser<HttpRequest> create(\n             SessionInputBuffer buffer,\n             MessageConstraints constraints) {\n         HttpMessageParser<HttpRequest> customParser = <...>\n         return customParser;\n     }\n };\n HttpConnectionFactory<DefaultBHttpServerConnection> cf =\n                                 new DefaultBHttpServerConnectionFactory(\n         ConnectionConfig.DEFAULT,\n         requestParserFactory,\n         responseWriterFactory);\n Socket socket = <...>\n DefaultBHttpServerConnection conn = cf.createConnection(socket);\n\n\nExample of HTTP request parsing / writing for non-blocking HTTP connections:\n\n\n SessionInputBuffer inbuffer = <...>\n SessionOutputBuffer outbuffer = <...>\n\n NHttpMessageParser<HttpRequest> requestParser = new DefaultHttpRequestParser(\n         inbuffer);\n HttpRequest request = requestParser.parse();\n NHttpMessageWriter<HttpRequest> requestWriter = new DefaultHttpRequestWriter(\n         outbuffer);\n requestWriter.write(request);\n\n\nExample of HTTP response parsing / writing for non-blocking HTTP connections:\n\n\n SessionInputBuffer inbuffer = <...>\n SessionOutputBuffer outbuffer = <...>\n\n NHttpMessageParser<HttpResponse> responseParser = new DefaultHttpResponseParser(\n         inbuffer);\n HttpResponse response = responseParser.parse();\n NHttpMessageWriter responseWriter = new DefaultHttpResponseWriter(\n         outbuffer);\n responseWriter.write(response);\n\n\nCustom non-blocking message parsers and writers can be plugged into the message processing pipeline\nthrough a custom connection factory:\n\n\n NHttpMessageWriterFactory<HttpResponse> responseWriterFactory =\n                         new NHttpMessageWriterFactory<HttpResponse>() {\n     @Override\n     public NHttpMessageWriter<HttpResponse> create(SessionOutputBuffer buffer) {\n         NHttpMessageWriter<HttpResponse> customWriter = <...>\n         return customWriter;\n     }\n };\n NHttpMessageParserFactory<HttpRequest> requestParserFactory =\n                         new NHttpMessageParserFactory<HttpRequest>() {\n     @Override\n     public NHttpMessageParser<HttpRequest> create(\n             SessionInputBuffer buffer, MessageConstraints constraints) {\n\n\n\n\n                                                                                                46\n\f                                           Advanced topics\n\n                NHttpMessageParser<HttpRequest> customParser = <...>\n                return customParser;\n           }\n       };\n       NHttpConnectionFactory<DefaultNHttpServerConnection> cf =\n                               new DefaultNHttpServerConnectionFactory(\n               null,\n               requestParserFactory,\n               responseWriterFactory,\n               ConnectionConfig.DEFAULT);\n       IOSession iosession = <...>\n       DefaultNHttpServerConnection conn = cf.createConnection(iosession);\n\n\n4.1.4. HTTP header parsing on demand\n      The default implementations of HttpMessageParser and NHttpMessageParser interfaces do not parse\n      HTTP headers immediately. Parsing of header value is deferred until its properties are accessed. Those\n      headers that are never used by the application will not be parsed at all. The CharArrayBuffer backing\n      the header can be obtained through an optional FormattedHeader interface.\n\n\n       HttpResponse response = <...>\n       Header h1 = response.getFirstHeader(\"Content-Type\");\n       if (h1 instanceof FormattedHeader) {\n           CharArrayBuffer buf = ((FormattedHeader) h1).getBuffer();\n           System.out.println(buf);\n       }\n\n\n\n\n                                                                                                         47\n\f","version":2,"metadata":{"phasesDone":["content","token","zone"]},"asets":[{"type":"pending","hasSpan":true,"attrs":[],"annots":[]},{"type":"constraint","hasSpan":true,"attrs":[{"name":"extra","type":"string","aggregation":null},{"name":"comment","type":"string","aggregation":null}],"annots":[[98453,98494,"dual-value-comparison"],[24920,24945,"value-comparison"],[51944,51990,"concrete-value"],[50918,50971,"value-comparison"],[24803,24846,"value-comparison"],[51171,51230,"dual-value-comparison"],[11153,11208,"dual-value-comparison"],[20057,20093,"dual-value-comparison"],[26412,26462,"dual-value-comparison"],[19951,19979,"dual-value-comparison"],[23214,23239,"concrete-value","poorly-written"],[46578,46664,"categorical-value","poorly-written"],[64046,64088],[77743,77785],[50979,51007,"value-comparison"],[19981,19995,"concrete-value"],[20018,20052,"concrete-value"],[24997,25052,null,"poorly-written"]]},{"type":"ignore","hasSpan":true,"attrs":[],"annots":[[0,17],[26,6333],[6477,9583],[9723,9735],[10023,10040],[10309,10326],[10593,10616],[10802,10865],[11494,11517],[11519,11548],[11782,12225],[12228,12258],[12551,12951],[13064,13195],[13198,13249],[14354,14945],[13504,14232],[15060,16215],[16472,16490],[17656,17684],[17873,17901],[18187,18249],[20272,20739],[20742,20787],[20935,21430],[21646,21670],[21780,21991],[21993,22017],[22560,22727],[22730,22754],[22934,23058],[23553,24483],[23061,23082],[24486,24512],[25131,25252],[25255,25274],[25623,25737],[25740,25766],[26095,26122],[26534,26657],[26777,26878],[26882,26911],[28523,28560],[28688,28711],[29089,29113],[29492,29519],[29780,29808],[30190,30275],[30445,30466],[30638,30668],[30873,30899],[31050,31075],[31231,31255],[31408,31447],[31650,32341],[32422,32490],[32757,32818],[32821,32848],[33806,33828],[34537,35268],[35382,35414],[36120,36150],[36967,37012],[37368,37836],[38545,38566],[38676,38740],[38750,39384],[39487,40475],[40675,40716],[41743,41787],[42035,42100],[42790,42825],[43375,43403],[43825,43850],[44010,44066],[44662,44911],[45024,45188],[45191,45221],[45714,46264],[46267,46300],[46677,47227],[47426,47472],[48248,48312],[48323,48655],[48659,48687],[49340,50197],[50460,50498],[51354,51417],[51562,51583],[52353,52743],[53066,53359],[53440,54069],[54575,54636],[54644,54752],[55260,56156],[56160,56180],[56455,57144],[57250,57309],[57312,57337],[57468,58299],[58403,58444],[58400,58402],[58813,58855],[59245,59261],[60143,60262],[60266,60288],[60739,60883],[61071,61141],[61512,61539],[61931,62049],[62129,62148],[62508,62685],[62688,62723],[62959,63182],[63315,63344],[63592,63662],[63674,63780],[63862,63993],[64091,64117],[65048,65258],[65262,65289],[65701,65730],[65877,66267],[66548,66617],[66769,67283],[67286,67316],[67436,67629],[67888,68391],[68591,68674],[69067,69134],[69143,69387],[69604,69935],[70335,71236],[71240,71270],[71398,71515],[71822,71892],[71903,72202],[72206,72251],[72894,73012],[73016,73051],[74030,74738],[74854,74924],[75171,75199],[76154,76509],[76513,76547],[76894,76951],[77355,77540],[77543,77592],[77877,77905],[78020,78089],[78100,78494],[79119,79545],[79653,80303],[80490,80513],[80980,81049]]},{"type":"no-constraint","hasSpan":true,"attrs":[],"annots":[]},{"type":"SEGMENT","hasSpan":true,"attrs":[{"name":"annotator","type":"string","aggregation":null},{"name":"set","type":"string","aggregation":null},{"name":"status","type":"string","aggregation":null}],"annots":[[0,146590,"unknown human","content","non-gold"]]},{"type":"lex","hasSpan":true,"attrs":[],"annots":[[0,8],[9,17],[26,30],[31,43],[44,52],[53,185],[186,188],[194,195],[195,196],[197,205],[206,211],[212,319],[320,322],[328,329],[329,330],[331,339],[340,345],[346,454],[455,457],[463,464],[464,465],[466,470],[471,479],[480,482],[483,486],[487,583],[584,586],[587,588],[588,589],[590,602],[603,722],[723,724],[730,733],[733,734],[735,739],[740,748],[749,854],[855,856],[869,874],[874,875],[876,885],[886,991],[992,993],[1006,1011],[1011,1012],[1013,1018],[1019,1029],[1030,1124],[1125,1126],[1139,1144],[1144,1145],[1146,1150],[1151,1157],[1158,1258],[1259,1260],[1273,1278],[1278,1279],[1280,1288],[1289,1297],[1298,1392],[1393,1394],[1400,1403],[1403,1404],[1405,1409],[1410,1418],[1419,1429],[1430,1520],[1521,1522],[1535,1540],[1540,1541],[1542,1550],[1551,1559],[1560,1572],[1573,1647],[1648,1649],[1662,1667],[1667,1668],[1669,1676],[1677,1681],[1682,1690],[1691,1701],[1702,1770],[1771,1772],[1778,1781],[1781,1782],[1783,1787],[1788,1797],[1798,1805],[1806,1899],[1900,1901],[1914,1919],[1919,1920],[1921,1928],[1929,1936],[1937,2032],[2033,2034],[2035,2036],[2036,2037],[2038,2046],[2047,2048],[2048,2049],[2049,2050],[2051,2056],[2057,2165],[2166,2168],[2174,2177],[2177,2178],[2179,2187],[2188,2192],[2193,2204],[2205,2290],[2291,2293],[2306,2311],[2311,2312],[2313,2320],[2321,2325],[2326,2334],[2335,2339],[2340,2351],[2352,2405],[2406,2408],[2421,2426],[2426,2427],[2428,2435],[2436,2444],[2445,2449],[2450,2458],[2459,2460],[2460,2461],[2461,2462],[2463,2528],[2529,2531],[2544,2549],[2549,2550],[2551,2560],[2561,2568],[2569,2577],[2578,2588],[2589,2647],[2648,2650],[2663,2668],[2668,2669],[2670,2681],[2682,2686],[2687,2698],[2699,2769],[2770,2772],[2778,2781],[2781,2782],[2783,2787],[2788,2797],[2798,2806],[2807,2896],[2897,2899],[2912,2917],[2917,2918],[2919,2927],[2928,2937],[2938,3027],[3028,3030],[3036,3039],[3039,3040],[3041,3049],[3050,3054],[3055,3063],[3064,3072],[3073,3150],[3151,3153],[3166,3171],[3171,3172],[3173,3177],[3178,3185],[3186,3282],[3283,3285],[3298,3303],[3303,3304],[3305,3309],[3310,3317],[3318,3326],[3327,3409],[3410,3412],[3425,3430],[3430,3431],[3432,3442],[3443,3454],[3455,3456],[3457,3463],[3464,3534],[3535,3537],[3543,3546],[3546,3547],[3548,3558],[3559,3564],[3565,3666],[3667,3669],[3675,3678],[3678,3679],[3680,3683],[3683,3684],[3684,3687],[3688,3695],[3696,3797],[3798,3800],[3806,3809],[3809,3810],[3811,3819],[3820,3824],[3825,3831],[3832,3923],[3924,3926],[3927,3928],[3928,3929],[3930,3942],[3943,3944],[3944,3945],[3945,3946],[3947,3952],[3953,3955],[3956,3959],[3960,4049],[4050,4052],[4058,4061],[4061,4062],[4063,4074],[4075,4079],[4080,4085],[4086,4087],[4087,4088],[4088,4089],[4090,4100],[4101,4170],[4171,4173],[4179,4182],[4182,4183],[4184,4185],[4185,4186],[4186,4187],[4188,4195],[4196,4307],[4308,4310],[4323,4328],[4328,4329],[4330,4331],[4331,4332],[4332,4333],[4334,4345],[4346,4440],[4441,4443],[4456,4461],[4461,4462],[4463,4464],[4464,4465],[4465,4466],[4467,4474],[4475,4483],[4484,4569],[4570,4572],[4585,4590],[4590,4591],[4592,4593],[4593,4594],[4594,4595],[4596,4604],[4605,4704],[4705,4707],[4720,4725],[4725,4726],[4727,4728],[4728,4729],[4729,4730],[4731,4738],[4739,4744],[4745,4755],[4756,4828],[4829,4831],[4844,4849],[4849,4850],[4851,4852],[4852,4853],[4853,4854],[4855,4862],[4863,4868],[4869,4873],[4874,4956],[4957,4959],[4972,4977],[4977,4978],[4979,4980],[4980,4981],[4981,4982],[4983,4990],[4991,4998],[4999,5087],[5088,5090],[5103,5108],[5108,5109],[5110,5111],[5111,5112],[5112,5113],[5114,5121],[5122,5130],[5131,5216],[5217,5219],[5232,5237],[5237,5238],[5239,5248],[5249,5250],[5250,5251],[5251,5252],[5253,5261],[5262,5346],[5347,5349],[5362,5367],[5367,5368],[5369,5379],[5380,5381],[5381,5382],[5382,5383],[5384,5392],[5393,5474],[5475,5477],[5483,5486],[5486,5487],[5488,5489],[5489,5490],[5490,5491],[5492,5499],[5500,5513],[5514,5604],[5605,5607],[5620,5625],[5625,5626],[5627,5634],[5635,5637],[5638,5639],[5639,5640],[5640,5641],[5642,5650],[5651,5654],[5655,5665],[5666,5726],[5727,5729],[5735,5738],[5738,5739],[5740,5741],[5741,5742],[5742,5743],[5744,5751],[5752,5761],[5762,5770],[5771,5853],[5854,5856],[5869,5874],[5874,5875],[5876,5877],[5877,5878],[5878,5879],[5880,5887],[5888,5893],[5894,5897],[5898,5984],[5985,5987],[5993,5996],[5996,5997],[5998,6010],[6011,6015],[6016,6027],[6028,6106],[6107,6109],[6122,6127],[6127,6128],[6129,6138],[6139,6146],[6147,6149],[6150,6162],[6163,6167],[6168,6179],[6180,6217],[6218,6220],[6233,6238],[6238,6239],[6240,6247],[6248,6252],[6253,6265],[6266,6270],[6271,6282],[6283,6330],[6331,6333],[6477,6479],[6529,6537],[6538,6546],[6559,6564],[6564,6565],[6566,6570],[6571,6572],[6572,6573],[6573,6574],[6575,6582],[6583,6673],[6683,6685],[6697,6702],[6702,6703],[6704,6716],[6717,6724],[6725,6733],[6734,6806],[6821,6823],[6835,6840],[6840,6841],[6842,6851],[6852,6864],[6865,6872],[6873,6881],[6882,6892],[6893,6931],[6959,6961],[6973,6978],[6978,6979],[6980,6986],[6987,6994],[6995,6996],[6996,6997],[6997,6998],[6999,7088],[7097,7099],[7105,7108],[7108,7109],[7110,7114],[7115,7116],[7116,7117],[7117,7118],[7119,7124],[7125,7136],[7137,7222],[7235,7237],[7243,7246],[7246,7247],[7248,7260],[7261,7265],[7266,7273],[7274,7283],[7284,7353],[7373,7375],[7387,7392],[7392,7393],[7394,7402],[7403,7415],[7416,7424],[7425,7497],[7511,7513],[7519,7522],[7522,7523],[7524,7536],[7537,7541],[7542,7550],[7551,7559],[7560,7630],[7649,7651],[7663,7668],[7668,7669],[7670,7682],[7683,7687],[7688,7695],[7696,7770],[7787,7789],[7801,7806],[7806,7807],[7808,7820],[7821,7825],[7826,7833],[7834,7842],[7843,7903],[7925,7927],[7933,7936],[7936,7937],[7938,7950],[7951,7961],[7962,7967],[7968,8049],[8063,8065],[8071,8075],[8075,8076],[8077,8086],[8087,8094],[8095,8104],[8105,8190],[8201,8203],[8209,8213],[8213,8214],[8215,8227],[8228,8231],[8231,8232],[8232,8235],[8236,8326],[8339,8341],[8353,8359],[8359,8360],[8361,8364],[8365,8366],[8366,8367],[8367,8368],[8369,8376],[8377,8468],[8477,8479],[8491,8497],[8497,8498],[8499,8502],[8502,8503],[8503,8506],[8507,8512],[8513,8514],[8514,8515],[8515,8516],[8517,8522],[8523,8533],[8534,8594],[8615,8617],[8623,8627],[8627,8628],[8629,8637],[8638,8650],[8651,8655],[8656,8662],[8663,8732],[8753,8755],[8756,8757],[8757,8758],[8759,8767],[8768,8774],[8775,8888],[8891,8893],[8899,8902],[8902,8903],[8904,8908],[8909,8916],[8917,8924],[8925,8928],[8929,8939],[8940,8949],[8950,9003],[9029,9031],[9043,9048],[9048,9049],[9050,9054],[9055,9059],[9060,9067],[9068,9071],[9072,9082],[9083,9149],[9167,9169],[9181,9186],[9186,9187],[9188,9192],[9193,9200],[9201,9208],[9209,9212],[9213,9220],[9221,9222],[9222,9223],[9223,9224],[9225,9232],[9233,9279],[9305,9307],[9319,9324],[9324,9325],[9326,9330],[9331,9338],[9339,9346],[9347,9350],[9351,9361],[9362,9422],[9443,9445],[9457,9462],[9462,9463],[9464,9468],[9469,9475],[9476,9483],[9484,9486],[9487,9493],[9494,9561],[9581,9583],[9723,9726],[9727,9735],[9741,9749],[9750,9752],[9753,9754],[9755,9758],[9759,9761],[9762,9772],[9773,9785],[9786,9789],[9790,9794],[9795,9806],[9807,9814],[9815,9817],[9818,9821],[9822,9826],[9827,9835],[9841,9845],[9846,9849],[9850,9861],[9862,9872],[9873,9875],[9876,9883],[9884,9897],[9898,9909],[9910,9913],[9914,9925],[9926,9930],[9931,9939],[9940,9944],[9950,9951],[9952,9959],[9960,9969],[9969,9970],[9977,9985],[9986,9989],[9990,9993],[9994,10003],[10004,10009],[10010,10013],[10014,10019],[10019,10020],[10023,10024],[10024,10025],[10026,10034],[10035,10040],[10046,10047],[10048,10049],[10050,10060],[10061,10064],[10065,10068],[10069,10077],[10078,10084],[10085,10086],[10087,10092],[10093,10094],[10095,10101],[10102,10106],[10107,10111],[10112,10120],[10127,10128],[10129,10130],[10131,10141],[10142,10145],[10146,10149],[10150,10158],[10159,10163],[10164,10175],[10176,10179],[10180,10192],[10193,10197],[10198,10206],[10213,10214],[10215,10216],[10217,10220],[10221,10223],[10224,10227],[10228,10233],[10234,10244],[10245,10250],[10251,10253],[10254,10262],[10263,10264],[10264,10271],[10271,10272],[10273,10276],[10277,10289],[10290,10291],[10291,10294],[10294,10295],[10296,10297],[10297,10298],[10298,10299],[10300,10306],[10309,10310],[10310,10311],[10312,10320],[10321,10326],[10332,10333],[10334,10348],[10349,10351],[10352,10355],[10356,10360],[10361,10372],[10373,10377],[10378,10387],[10388,10395],[10402,10403],[10404,10411],[10412,10419],[10420,10424],[10425,10436],[10437,10440],[10441,10444],[10445,10452],[10453,10454],[10455,10469],[10470,10472],[10473,10476],[10483,10484],[10485,10490],[10491,10492],[10492,10503],[10503,10504],[10505,10511],[10512,10521],[10528,10529],[10530,10544],[10545,10552],[10553,10554],[10554,10556],[10557,10565],[10566,10578],[10579,10585],[10586,10589],[10589,10590],[10593,10594],[10594,10595],[10596,10600],[10601,10609],[10610,10612],[10613,10616],[10622,10623],[10624,10625],[10626,10637],[10638,10641],[10642,10652],[10659,10660],[10661,10662],[10663,10674],[10675,10678],[10679,10686],[10687,10691],[10802,10804],[10805,10813],[10814,10815],[10815,10816],[10817,10829],[10830,10833],[10833,10834],[10835,10839],[10840,10848],[10849,10854],[10854,10855],[10856,10865],[10875,10876],[10877,10881],[10882,10889],[10890,10898],[10899,10901],[10902,10903],[10904,10910],[10911,10914],[10915,10917],[10918,10926],[10927,10931],[10931,10932],[10933,10936],[10937,10944],[10945,10951],[10952,10954],[10955,10957],[10958,10962],[10963,10970],[10979,10987],[10988,10990],[10991,10992],[10993,11000],[11001,11005],[11006,11009],[11010,11011],[11012,11022],[11023,11025],[11026,11032],[11033,11039],[11039,11040],[11041,11044],[11045,11052],[11053,11059],[11060,11062],[11063,11065],[11066,11070],[11071,11079],[11088,11096],[11097,11099],[11100,11101],[11102,11108],[11109,11113],[11114,11117],[11118,11119],[11120,11130],[11131,11133],[11134,11140],[11141,11147],[11147,11148],[11149,11152],[11153,11157],[11158,11166],[11167,11171],[11172,11179],[11180,11183],[11184,11192],[11201,11208],[11208,11209],[11210,11214],[11215,11219],[11220,11228],[11229,11232],[11233,11243],[11244,11251],[11252,11253],[11254,11261],[11262,11266],[11266,11267],[11277,11285],[11286,11293],[11294,11297],[11298,11302],[11303,11310],[11311,11317],[11318,11323],[11324,11326],[11327,11333],[11334,11338],[11339,11349],[11350,11357],[11357,11358],[11359,11362],[11363,11371],[11380,11389],[11390,11397],[11398,11401],[11402,11415],[11416,11417],[11417,11427],[11427,11428],[11429,11432],[11433,11448],[11449,11450],[11450,11457],[11457,11458],[11459,11461],[11462,11466],[11467,11474],[11483,11491],[11491,11492],[11494,11499],[11499,11500],[11501,11506],[11507,11517],[11519,11526],[11526,11527],[11528,11532],[11533,11540],[11541,11548],[11558,11562],[11563,11570],[11571,11573],[11574,11575],[11576,11583],[11584,11588],[11589,11593],[11594,11597],[11598,11604],[11605,11607],[11608,11611],[11612,11618],[11618,11619],[11620,11623],[11624,11629],[11630,11634],[11635,11637],[11638,11642],[11643,11650],[11651,11659],[11668,11671],[11672,11678],[11679,11681],[11682,11687],[11688,11690],[11691,11694],[11695,11703],[11703,11704],[11705,11708],[11709,11719],[11720,11722],[11723,11726],[11727,11735],[11735,11736],[11737,11740],[11741,11744],[11745,11753],[11754,11761],[11762,11764],[11765,11768],[11768,11769],[11782,11793],[11794,11801],[11802,11803],[11804,11807],[11808,11824],[11824,11826],[11826,11829],[11829,11831],[11832,11836],[11851,11862],[11862,11863],[11863,11871],[11871,11873],[11885,11891],[11891,11892],[11892,11895],[11895,11896],[11896,11903],[11903,11904],[11904,11911],[11911,11912],[11912,11926],[11926,11929],[11929,11938],[11938,11942],[11953,11959],[11959,11960],[11960,11963],[11963,11964],[11964,11971],[11971,11972],[11972,11979],[11979,11980],[11980,11994],[11994,11997],[11997,12003],[12003,12007],[12018,12024],[12024,12025],[12025,12028],[12028,12029],[12029,12036],[12036,12037],[12037,12044],[12044,12045],[12045,12063],[12063,12067],[12078,12084],[12084,12085],[12085,12088],[12088,12089],[12089,12096],[12096,12097],[12097,12104],[12104,12105],[12105,12119],[12119,12122],[12122,12130],[12130,12134],[12145,12151],[12152,12153],[12166,12169],[12180,12181],[12192,12196],[12196,12197],[12197,12200],[12211,12214],[12215,12216],[12217,12221],[12221,12222],[12222,12225],[12228,12235],[12235,12236],[12237,12241],[12242,12250],[12251,12258],[12268,12272],[12273,12281],[12282,12284],[12285,12286],[12287,12294],[12295,12299],[12300,12302],[12303,12306],[12307,12313],[12314,12318],[12319,12321],[12322,12325],[12326,12332],[12333,12338],[12339,12345],[12346,12354],[12355,12358],[12359,12370],[12379,12380],[12381,12388],[12389,12396],[12396,12397],[12398,12401],[12402,12407],[12408,12412],[12413,12415],[12416,12420],[12421,12428],[12429,12437],[12438,12440],[12441,12444],[12445,12453],[12454,12461],[12462,12470],[12471,12473],[12474,12475],[12476,12483],[12492,12498],[12499,12503],[12504,12507],[12508,12511],[12512,12522],[12523,12530],[12531,12537],[12537,12538],[12551,12563],[12564,12572],[12573,12574],[12575,12578],[12579,12596],[12596,12597],[12597,12608],[12608,12609],[12609,12617],[12617,12618],[12633,12643],[12643,12644],[12644,12649],[12649,12650],[12651,12652],[12652,12654],[12654,12657],[12669,12675],[12675,12676],[12676,12679],[12679,12680],[12680,12687],[12687,12688],[12688,12696],[12696,12697],[12697,12715],[12715,12719],[12730,12736],[12736,12737],[12737,12740],[12740,12741],[12741,12748],[12748,12749],[12749,12757],[12757,12758],[12758,12771],[12771,12774],[12774,12787],[12787,12791],[12802,12808],[12808,12809],[12809,12812],[12812,12813],[12813,12820],[12820,12821],[12821,12829],[12829,12830],[12830,12843],[12843,12846],[12846,12861],[12861,12865],[12876,12882],[12882,12883],[12883,12886],[12886,12887],[12887,12894],[12894,12895],[12895,12903],[12903,12904],[12904,12917],[12917,12920],[12920,12928],[12928,12932],[12943,12949],[12950,12951],[13064,13065],[13113,13125],[13137,13141],[13141,13142],[13142,13145],[13155,13158],[13168,13170],[13180,13184],[13184,13185],[13185,13188],[13189,13192],[13193,13195],[13198,13205],[13205,13206],[13207,13211],[13212,13219],[13220,13226],[13227,13237],[13238,13241],[13242,13249],[13259,13261],[13262,13266],[13267,13274],[13275,13278],[13279,13286],[13287,13288],[13289,13295],[13296,13298],[13299,13306],[13307,13317],[13318,13328],[13329,13331],[13332,13335],[13336,13343],[13344,13348],[13349,13351],[13360,13363],[13364,13371],[13372,13378],[13378,13379],[13380,13387],[13388,13392],[13392,13393],[13394,13397],[13398,13400],[13401,13403],[13403,13404],[13405,13413],[13414,13422],[13423,13430],[13431,13433],[13434,13442],[13442,13443],[13444,13447],[13447,13448],[13449,13455],[13455,13456],[13457,13460],[13469,13478],[13479,13483],[13484,13491],[13491,13492],[13504,13516],[13517,13525],[13526,13527],[13528,13531],[13532,13549],[13549,13550],[13550,13561],[13561,13562],[13562,13570],[13570,13571],[13585,13595],[13595,13596],[13596,13601],[13601,13602],[13603,13604],[13604,13606],[13606,13609],[13619,13627],[13627,13628],[13628,13637],[13637,13639],[13639,13649],[13649,13651],[13665,13666],[13666,13670],[13670,13671],[13672,13677],[13677,13679],[13680,13696],[13696,13699],[13709,13717],[13717,13718],[13718,13727],[13727,13729],[13729,13739],[13739,13741],[13755,13756],[13756,13760],[13760,13761],[13762,13768],[13768,13770],[13770,13771],[13771,13773],[13774,13778],[13778,13779],[13780,13788],[13788,13789],[13789,13799],[13799,13803],[13813,13819],[13820,13822],[13823,13824],[13825,13833],[13833,13834],[13834,13848],[13848,13850],[13850,13860],[13860,13863],[13873,13879],[13879,13880],[13880,13883],[13883,13884],[13884,13891],[13891,13892],[13892,13894],[13894,13896],[13906,13912],[13913,13915],[13916,13917],[13918,13926],[13926,13927],[13927,13940],[13940,13942],[13942,13952],[13952,13955],[13965,13971],[13971,13972],[13972,13975],[13975,13976],[13976,13983],[13983,13984],[13984,13986],[13986,13988],[13998,14006],[14007,14009],[14010,14011],[14012,14020],[14020,14021],[14021,14031],[14031,14033],[14033,14043],[14043,14046],[14056,14062],[14062,14063],[14063,14066],[14066,14067],[14067,14074],[14074,14075],[14075,14077],[14077,14078],[14078,14084],[14084,14086],[14097,14103],[14104,14105],[14117,14127],[14127,14128],[14129,14133],[14133,14134],[14135,14140],[14140,14142],[14143,14159],[14169,14179],[14179,14180],[14181,14185],[14185,14186],[14187,14192],[14192,14196],[14197,14201],[14201,14202],[14203,14210],[14210,14211],[14211,14220],[14220,14221],[14231,14232],[14243,14248],[14249,14251],[14252,14254],[14255,14264],[14265,14268],[14269,14271],[14272,14278],[14279,14282],[14283,14290],[14291,14293],[14294,14295],[14296,14301],[14302,14306],[14307,14312],[14313,14316],[14317,14331],[14332,14341],[14341,14342],[14354,14366],[14367,14375],[14376,14377],[14378,14381],[14382,14399],[14399,14400],[14400,14411],[14411,14412],[14412,14420],[14420,14421],[14435,14445],[14445,14446],[14446,14451],[14451,14452],[14453,14454],[14454,14456],[14456,14459],[14469,14477],[14477,14478],[14478,14487],[14487,14489],[14489,14499],[14499,14501],[14515,14516],[14516,14520],[14520,14521],[14522,14527],[14527,14529],[14530,14546],[14546,14549],[14559,14567],[14567,14568],[14568,14577],[14577,14579],[14579,14589],[14589,14591],[14605,14606],[14606,14610],[14610,14611],[14612,14618],[14618,14620],[14620,14621],[14621,14623],[14624,14628],[14628,14629],[14630,14638],[14638,14639],[14639,14649],[14649,14653],[14664,14678],[14679,14681],[14682,14683],[14684,14692],[14692,14693],[14693,14707],[14707,14709],[14709,14719],[14719,14722],[14733,14738],[14739,14740],[14740,14742],[14742,14743],[14743,14750],[14750,14753],[14754,14755],[14769,14775],[14775,14776],[14776,14779],[14779,14780],[14780,14787],[14787,14788],[14788,14790],[14790,14791],[14791,14795],[14795,14799],[14809,14810],[14821,14827],[14828,14829],[14841,14851],[14851,14852],[14853,14857],[14857,14858],[14859,14864],[14864,14866],[14867,14883],[14893,14903],[14903,14904],[14905,14909],[14909,14910],[14911,14916],[14916,14920],[14921,14925],[14925,14926],[14927,14934],[14934,14935],[14935,14944],[14944,14945],[14956,14958],[14959,14963],[14964,14972],[14973,14984],[14985,14992],[14993,14995],[14996,15001],[15002,15006],[15007,15015],[15016,15020],[15021,15031],[15032,15038],[15039,15047],[15047,15048],[15060,15072],[15073,15081],[15082,15083],[15084,15087],[15088,15105],[15105,15106],[15106,15117],[15117,15118],[15118,15126],[15126,15127],[15141,15151],[15151,15152],[15152,15157],[15157,15158],[15159,15160],[15160,15162],[15162,15165],[15175,15183],[15183,15184],[15184,15193],[15193,15195],[15195,15205],[15205,15207],[15221,15222],[15222,15226],[15226,15227],[15228,15233],[15233,15235],[15236,15252],[15252,15255],[15370,15371],[15421,15433],[15446,15454],[15454,15455],[15455,15464],[15464,15466],[15466,15476],[15476,15478],[15494,15495],[15495,15499],[15499,15500],[15501,15507],[15507,15509],[15509,15510],[15510,15512],[15513,15517],[15517,15518],[15519,15527],[15527,15528],[15528,15538],[15538,15542],[15555,15576],[15577,15579],[15580,15581],[15582,15585],[15586,15612],[15612,15613],[15633,15641],[15641,15642],[15642,15656],[15656,15658],[15658,15668],[15668,15672],[15685,15690],[15691,15692],[15692,15694],[15694,15695],[15695,15702],[15702,15705],[15706,15707],[15723,15736],[15737,15741],[15742,15743],[15744,15746],[15746,15747],[15747,15758],[15758,15761],[15777,15783],[15783,15784],[15784,15787],[15787,15788],[15788,15795],[15795,15796],[15796,15800],[15800,15801],[15801,15808],[15808,15810],[15811,15812],[15813,15814],[15815,15816],[15817,15818],[15819,15820],[15821,15825],[15825,15826],[15826,15834],[15834,15838],[15854,15869],[15870,15876],[15877,15878],[15879,15883],[15883,15884],[15884,15897],[15897,15900],[15916,15919],[15920,15921],[15921,15924],[15925,15926],[15927,15928],[15929,15930],[15930,15931],[15932,15933],[15934,15935],[15936,15942],[15942,15943],[15943,15949],[15949,15950],[15951,15952],[15952,15955],[15956,15957],[15977,15983],[15983,15984],[15984,15987],[15987,15988],[15988,15995],[15995,15997],[15998,15999],[16000,16001],[16002,16011],[16011,16013],[16029,16030],[16042,16043],[16055,16061],[16062,16063],[16077,16079],[16080,16081],[16082,16083],[16096,16101],[16101,16102],[16115,16131],[16143,16145],[16146,16147],[16148,16149],[16162,16167],[16167,16168],[16180,16182],[16183,16184],[16185,16186],[16199,16215],[16227,16231],[16232,16239],[16240,16243],[16244,16253],[16254,16258],[16259,16269],[16270,16276],[16277,16285],[16286,16290],[16291,16293],[16294,16300],[16300,16301],[16302,16306],[16307,16314],[16315,16323],[16333,16337],[16338,16340],[16341,16345],[16346,16356],[16357,16360],[16361,16367],[16368,16378],[16379,16381],[16382,16384],[16385,16390],[16391,16393],[16394,16404],[16405,16408],[16409,16415],[16416,16422],[16423,16427],[16428,16432],[16442,16445],[16446,16452],[16453,16458],[16459,16469],[16469,16470],[16472,16477],[16477,16478],[16479,16483],[16484,16490],[16500,16504],[16505,16513],[16514,16517],[16518,16523],[16524,16525],[16526,16533],[16534,16540],[16541,16551],[16552,16556],[16557,16560],[16561,16568],[16569,16571],[16572,16580],[16580,16581],[16582,16590],[16591,16594],[16595,16597],[16598,16603],[16613,16615],[16616,16620],[16621,16629],[16630,16633],[16634,16636],[16637,16641],[16642,16651],[16651,16652],[16653,16655],[16656,16660],[16661,16664],[16665,16673],[16673,16674],[16675,16683],[16684,16688],[16689,16692],[16693,16701],[16702,16705],[16706,16714],[16715,16717],[16727,16729],[16730,16746],[16747,16755],[16755,16756],[16757,16760],[16761,16765],[16766,16779],[16780,16787],[16788,16791],[16792,16808],[16809,16816],[16816,16817],[16818,16822],[16823,16826],[16836,16839],[16839,16840],[16841,16850],[16851,16854],[16855,16862],[16863,16871],[16872,16874],[16875,16882],[16883,16884],[16885,16892],[16893,16899],[16899,16900],[16901,16906],[16907,16910],[16911,16921],[16922,16924],[16925,16929],[16930,16934],[16935,16939],[16949,16951],[16952,16961],[16962,16964],[16965,16969],[16970,16976],[16977,16980],[16981,16984],[16985,16987],[16988,16995],[16995,16996],[16997,17000],[17001,17004],[17005,17013],[17013,17014],[17015,17018],[17019,17024],[17025,17032],[17033,17042],[17042,17043],[17054,17062],[17063,17076],[17077,17082],[17083,17088],[17089,17091],[17092,17100],[17100,17101],[17102,17111],[17112,17114],[17115,17120],[17121,17126],[17127,17134],[17135,17145],[17145,17146],[17157,17158],[17159,17167],[17167,17168],[17173,17176],[17177,17184],[17185,17187],[17188,17196],[17197,17201],[17202,17203],[17204,17210],[17210,17211],[17212,17214],[17215,17224],[17225,17227],[17228,17231],[17232,17235],[17235,17236],[17237,17239],[17240,17250],[17250,17251],[17252,17256],[17268,17276],[17277,17285],[17286,17294],[17295,17300],[17301,17309],[17310,17314],[17315,17316],[17317,17327],[17327,17328],[17329,17337],[17338,17346],[17347,17350],[17351,17360],[17361,17364],[17376,17386],[17386,17387],[17398,17399],[17400,17414],[17414,17415],[17420,17423],[17424,17431],[17432,17434],[17435,17437],[17438,17444],[17445,17447],[17448,17456],[17457,17459],[17460,17465],[17466,17470],[17471,17474],[17475,17486],[17487,17491],[17492,17493],[17505,17515],[17516,17518],[17519,17524],[17525,17531],[17531,17532],[17533,17547],[17548,17556],[17557,17560],[17561,17570],[17571,17581],[17581,17582],[17593,17594],[17595,17603],[17603,17604],[17610,17613],[17614,17621],[17622,17624],[17625,17633],[17634,17638],[17639,17646],[17647,17653],[17653,17654],[17656,17663],[17663,17664],[17665,17675],[17676,17684],[17695,17697],[17698,17704],[17705,17708],[17709,17711],[17712,17722],[17722,17723],[17724,17731],[17732,17735],[17736,17743],[17744,17747],[17748,17750],[17751,17755],[17756,17760],[17761,17765],[17766,17770],[17770,17771],[17772,17776],[17777,17779],[17780,17784],[17785,17793],[17794,17798],[17808,17822],[17823,17831],[17832,17833],[17833,17837],[17838,17853],[17854,17856],[17857,17869],[17869,17871],[17873,17880],[17880,17881],[17882,17887],[17888,17892],[17893,17901],[17912,17917],[17918,17920],[17921,17927],[17928,17931],[17932,17941],[17942,17946],[17947,17953],[17954,17957],[17958,17967],[17968,17975],[17975,17976],[17977,17979],[17980,17983],[17984,17991],[17992,17995],[17996,18005],[18006,18015],[18025,18026],[18026,18028],[18029,18036],[18037,18040],[18041,18047],[18047,18048],[18049,18051],[18051,18053],[18054,18063],[18064,18071],[18071,18073],[18187,18188],[18237,18249],[18260,18263],[18264,18270],[18271,18273],[18274,18281],[18282,18286],[18287,18296],[18297,18298],[18299,18306],[18307,18311],[18312,18320],[18321,18328],[18329,18331],[18332,18336],[18337,18340],[18341,18348],[18349,18352],[18353,18363],[18373,18376],[18377,18380],[18381,18389],[18390,18394],[18395,18397],[18398,18402],[18403,18405],[18406,18410],[18411,18414],[18415,18421],[18422,18426],[18427,18429],[18430,18433],[18434,18440],[18440,18441],[18452,18454],[18455,18459],[18460,18463],[18464,18471],[18472,18476],[18477,18480],[18481,18487],[18487,18488],[18489,18492],[18493,18496],[18497,18503],[18504,18512],[18513,18516],[18517,18522],[18523,18529],[18530,18533],[18534,18537],[18547,18568],[18568,18570],[18571,18577],[18577,18578],[18579,18584],[18585,18592],[18593,18595],[18596,18600],[18600,18601],[18601,18603],[18603,18604],[18604,18615],[18615,18616],[18617,18619],[18620,18623],[18624,18627],[18628,18634],[18644,18646],[18647,18653],[18654,18660],[18661,18663],[18664,18667],[18668,18686],[18686,18687],[18687,18699],[18699,18700],[18701,18707],[18707,18708],[18709,18714],[18715,18719],[18720,18726],[18727,18731],[18732,18735],[18745,18752],[18753,18756],[18757,18761],[18762,18769],[18770,18772],[18773,18776],[18777,18782],[18783,18789],[18789,18790],[18791,18797],[18798,18802],[18803,18807],[18808,18812],[18813,18826],[18827,18828],[18828,18842],[18842,18843],[18853,18861],[18862,18865],[18866,18868],[18869,18875],[18876,18878],[18879,18888],[18889,18894],[18895,18902],[18903,18905],[18906,18907],[18908,18912],[18912,18913],[18913,18915],[18915,18916],[18916,18927],[18928,18939],[18939,18940],[18941,18943],[18944,18946],[18947,18952],[18962,18965],[18966,18970],[18971,18979],[18980,18982],[18983,18992],[18993,19011],[19011,19012],[19012,19024],[19024,19025],[19026,19032],[19033,19037],[19038,19041],[19042,19044],[19045,19050],[19060,19089],[19090,19094],[19095,19116],[19116,19118],[19119,19125],[19125,19126],[19137,19140],[19141,19152],[19153,19158],[19159,19166],[19167,19174],[19175,19181],[19182,19189],[19190,19192],[19193,19201],[19202,19212],[19213,19216],[19217,19224],[19225,19227],[19228,19239],[19249,19253],[19254,19256],[19257,19263],[19263,19264],[19265,19272],[19273,19275],[19276,19283],[19284,19287],[19288,19292],[19292,19293],[19293,19295],[19295,19296],[19296,19307],[19308,19316],[19316,19317],[19318,19321],[19322,19325],[19326,19334],[19335,19338],[19339,19347],[19357,19364],[19365,19369],[19370,19372],[19373,19374],[19375,19381],[19382,19384],[19385,19389],[19390,19395],[19396,19398],[19399,19404],[19405,19408],[19409,19416],[19417,19421],[19422,19426],[19427,19432],[19432,19433],[19444,19448],[19455,19458],[19461,19467],[19470,19473],[19474,19478],[19479,19487],[19488,19492],[19493,19495],[19496,19504],[19505,19512],[19512,19513],[19514,19517],[19518,19525],[19535,19560],[19560,19562],[19563,19566],[19567,19594],[19594,19596],[19597,19604],[19605,19608],[19609,19611],[19612,19616],[19617,19620],[19630,19637],[19638,19641],[19642,19648],[19649,19657],[19658,19662],[19663,19665],[19666,19678],[19679,19682],[19683,19697],[19698,19705],[19706,19707],[19707,19709],[19710,19714],[19715,19718],[19728,19737],[19737,19739],[19740,19745],[19746,19749],[19750,19762],[19763,19769],[19770,19773],[19774,19781],[19782,19783],[19784,19793],[19794,19802],[19803,19806],[19807,19811],[19812,19822],[19832,19836],[19837,19841],[19841,19842],[19842,19847],[19848,19850],[19851,19855],[19855,19856],[19856,19860],[19860,19861],[19862,19865],[19866,19895],[19895,19897],[19898,19904],[19905,19907],[19908,19912],[19913,19915],[19916,19920],[19921,19925],[19935,19946],[19946,19947],[19948,19950],[19951,19954],[19955,19962],[19963,19967],[19967,19968],[19968,19969],[19970,19979],[19979,19980],[19981,19982],[19983,19989],[19990,19992],[19993,19995],[19996,20000],[20001,20003],[20004,20012],[20012,20013],[20014,20017],[20018,20022],[20023,20026],[20027,20030],[20031,20038],[20048,20052],[20052,20053],[20054,20056],[20057,20060],[20061,20073],[20074,20080],[20081,20083],[20084,20093],[20093,20094],[20095,20096],[20097,20103],[20104,20110],[20111,20115],[20116,20118],[20119,20127],[20127,20128],[20139,20143],[20144,20152],[20153,20155],[20156,20162],[20163,20166],[20167,20168],[20169,20177],[20178,20185],[20185,20186],[20187,20191],[20192,20196],[20197,20201],[20202,20205],[20206,20208],[20209,20211],[20212,20220],[20221,20223],[20224,20227],[20228,20235],[20236,20238],[20248,20251],[20252,20258],[20258,20259],[20272,20284],[20285,20293],[20294,20295],[20296,20299],[20300,20312],[20312,20314],[20314,20323],[20324,20331],[20331,20333],[20348,20354],[20354,20355],[20355,20360],[20360,20362],[20374,20380],[20380,20381],[20381,20384],[20384,20385],[20385,20392],[20392,20393],[20393,20401],[20401,20402],[20402,20416],[20416,20420],[20431,20437],[20437,20438],[20438,20441],[20441,20442],[20442,20449],[20449,20450],[20450,20458],[20458,20459],[20459,20475],[20475,20479],[20490,20496],[20496,20497],[20497,20500],[20500,20501],[20501,20508],[20508,20509],[20509,20520],[20520,20521],[20521,20529],[20529,20530],[20530,20538],[20538,20541],[20552,20558],[20558,20559],[20559,20562],[20562,20563],[20563,20570],[20570,20571],[20571,20582],[20582,20583],[20583,20594],[20594,20595],[20595,20603],[20603,20605],[20605,20611],[20611,20613],[20625,20631],[20632,20633],[20646,20658],[20658,20659],[20660,20664],[20664,20665],[20665,20670],[20670,20671],[20672,20683],[20683,20685],[20696,20698],[20709,20718],[20719,20726],[20737,20739],[20742,20749],[20749,20750],[20751,20759],[20760,20767],[20768,20770],[20771,20777],[20778,20787],[20798,20800],[20801,20806],[20807,20809],[20810,20816],[20817,20823],[20824,20831],[20832,20834],[20835,20841],[20842,20851],[20852,20855],[20856,20860],[20861,20866],[20867,20870],[20871,20878],[20879,20885],[20886,20896],[20906,20910],[20911,20914],[20915,20921],[20921,20922],[20935,20947],[20948,20956],[20956,20957],[20968,20978],[20979,20985],[20986,20987],[20988,20996],[20996,20997],[20997,21006],[21006,21009],[21020,21022],[21023,21024],[21024,21030],[21031,21033],[21034,21038],[21038,21039],[21040,21041],[21056,21067],[21068,21076],[21077,21078],[21079,21085],[21085,21086],[21086,21096],[21096,21099],[21114,21117],[21118,21119],[21138,21140],[21141,21143],[21144,21153],[21154,21160],[21175,21176],[21177,21184],[21185,21186],[21205,21213],[21213,21214],[21214,21219],[21219,21222],[21237,21238],[21353,21354],[21404,21416],[21429,21430],[21442,21446],[21447,21454],[21455,21459],[21460,21469],[21470,21478],[21478,21479],[21480,21483],[21484,21487],[21488,21491],[21492,21495],[21496,21515],[21515,21516],[21516,21526],[21526,21527],[21528,21534],[21544,21546],[21547,21553],[21554,21558],[21559,21562],[21563,21569],[21570,21577],[21578,21581],[21582,21586],[21587,21592],[21593,21601],[21602,21605],[21606,21609],[21610,21620],[21621,21627],[21628,21631],[21632,21636],[21637,21643],[21643,21644],[21646,21651],[21651,21652],[21653,21661],[21662,21670],[21680,21685],[21686,21689],[21690,21691],[21692,21695],[21696,21700],[21701,21703],[21704,21710],[21711,21719],[21719,21720],[21721,21729],[21730,21738],[21739,21742],[21743,21752],[21753,21768],[21768,21769],[21780,21781],[21782,21797],[21808,21809],[21810,21825],[21836,21837],[21838,21850],[21861,21862],[21863,21880],[21891,21892],[21893,21903],[21914,21915],[21916,21930],[21941,21942],[21943,21960],[21971,21972],[21973,21991],[21993,22000],[22000,22001],[22002,22017],[22028,22035],[22036,22038],[22039,22042],[22043,22047],[22048,22055],[22055,22056],[22057,22061],[22062,22067],[22068,22074],[22075,22085],[22086,22088],[22089,22099],[22100,22106],[22106,22107],[22108,22110],[22111,22118],[22118,22119],[22120,22123],[22124,22128],[22129,22134],[22144,22147],[22148,22156],[22157,22165],[22166,22170],[22171,22175],[22176,22184],[22184,22185],[22196,22200],[22201,22207],[22208,22211],[22212,22214],[22215,22220],[22221,22232],[22232,22233],[22234,22239],[22240,22252],[22252,22253],[22254,22256],[22257,22267],[22268,22270],[22271,22278],[22278,22279],[22280,22283],[22284,22287],[22288,22289],[22290,22298],[22308,22315],[22316,22322],[22322,22323],[22334,22337],[22338,22343],[22344,22346],[22347,22350],[22351,22354],[22355,22362],[22363,22369],[22369,22370],[22371,22374],[22375,22385],[22386,22389],[22390,22396],[22396,22397],[22398,22402],[22403,22406],[22407,22409],[22410,22414],[22415,22419],[22429,22432],[22433,22459],[22459,22460],[22460,22471],[22471,22472],[22473,22476],[22477,22509],[22509,22510],[22510,22514],[22514,22515],[22525,22532],[22533,22545],[22545,22546],[22560,22575],[22576,22584],[22585,22586],[22587,22590],[22591,22606],[22606,22609],[22621,22629],[22629,22630],[22630,22640],[22640,22641],[22641,22656],[22656,22658],[22670,22678],[22678,22679],[22679,22695],[22695,22696],[22696,22699],[22699,22701],[22702,22704],[22705,22709],[22710,22713],[22714,22720],[22721,22723],[22724,22727],[22730,22737],[22737,22738],[22739,22754],[22765,22780],[22781,22783],[22784,22785],[22786,22800],[22800,22801],[22802,22812],[22813,22819],[22820,22824],[22825,22832],[22833,22836],[22837,22844],[22845,22849],[22850,22851],[22852,22857],[22858,22862],[22863,22868],[22868,22869],[22879,22885],[22886,22889],[22890,22894],[22895,22900],[22901,22903],[22904,22907],[22908,22919],[22919,22920],[22934,22949],[22950,22958],[22959,22960],[22961,22964],[22965,22980],[22980,22981],[22981,22984],[22985,22991],[22992,22993],[22993,22998],[22998,23000],[23020,23031],[23031,23032],[23032,23056],[23056,23058],[23061,23068],[23068,23069],[23070,23082],[23093,23105],[23109,23111],[23112,23113],[23114,23128],[23128,23129],[23130,23140],[23141,23147],[23148,23152],[23153,23160],[23161,23164],[23165,23172],[23173,23177],[23178,23179],[23180,23184],[23184,23185],[23185,23189],[23189,23190],[23190,23196],[23206,23212],[23212,23213],[23214,23216],[23217,23220],[23221,23226],[23227,23239],[23239,23240],[23241,23244],[23245,23251],[23252,23262],[23263,23267],[23268,23269],[23270,23275],[23276,23280],[23280,23281],[23281,23285],[23285,23286],[23286,23292],[23293,23299],[23299,23300],[23301,23304],[23314,23320],[23321,23325],[23326,23331],[23332,23333],[23334,23343],[23344,23352],[23353,23356],[23357,23360],[23361,23365],[23366,23368],[23369,23372],[23373,23379],[23379,23380],[23381,23384],[23385,23390],[23391,23397],[23398,23401],[23402,23406],[23407,23411],[23412,23414],[23424,23426],[23427,23436],[23436,23437],[23553,23554],[23605,23617],[23631,23644],[23645,23647],[23648,23649],[23650,23653],[23654,23667],[23667,23670],[23682,23692],[23692,23693],[23694,23701],[23702,23705],[23706,23707],[23708,23714],[23714,23715],[23715,23721],[23721,23724],[23736,23739],[23740,23741],[23741,23744],[23744,23745],[23745,23757],[23757,23758],[23759,23766],[23767,23775],[23776,23777],[23778,23781],[23781,23782],[23782,23790],[23790,23793],[23794,23795],[23811,23813],[23813,23814],[23814,23820],[23820,23821],[23821,23829],[23829,23830],[23830,23836],[23836,23839],[23863,23864],[23864,23870],[23870,23873],[23874,23877],[23877,23883],[23883,23884],[23884,23892],[23892,23893],[23893,23901],[23901,23904],[23928,23929],[23929,23935],[23935,23937],[23937,23941],[23941,23944],[23956,23957],[23970,23972],[23973,23982],[23983,23990],[23991,23992],[23993,24002],[24003,24011],[24012,24013],[24013,24021],[24022,24024],[24025,24029],[24029,24035],[24035,24036],[24048,24058],[24059,24068],[24069,24070],[24071,24074],[24075,24087],[24087,24088],[24088,24090],[24090,24091],[24091,24099],[24099,24103],[24116,24118],[24119,24132],[24133,24142],[24143,24147],[24148,24150],[24151,24159],[24160,24161],[24161,24165],[24166,24170],[24171,24179],[24180,24182],[24183,24184],[24184,24188],[24188,24189],[24189,24194],[24194,24196],[24208,24218],[24219,24228],[24229,24230],[24231,24234],[24235,24247],[24247,24248],[24248,24250],[24250,24251],[24251,24259],[24259,24262],[24263,24269],[24269,24270],[24270,24275],[24275,24277],[24290,24292],[24293,24306],[24307,24316],[24317,24321],[24322,24324],[24325,24333],[24334,24337],[24338,24339],[24340,24344],[24345,24349],[24361,24371],[24372,24381],[24382,24383],[24384,24387],[24388,24400],[24400,24401],[24401,24403],[24403,24404],[24404,24412],[24412,24415],[24435,24446],[24446,24447],[24447,24453],[24453,24455],[24455,24459],[24459,24460],[24460,24465],[24465,24467],[24468,24474],[24474,24475],[24475,24480],[24480,24483],[24486,24493],[24493,24494],[24495,24512],[24523,24540],[24541,24543],[24544,24545],[24546,24554],[24554,24555],[24556,24570],[24571,24577],[24578,24582],[24583,24590],[24591,24594],[24595,24602],[24603,24607],[24608,24610],[24611,24616],[24617,24623],[24623,24624],[24634,24643],[24644,24646],[24647,24649],[24650,24659],[24660,24663],[24664,24669],[24670,24676],[24677,24680],[24681,24684],[24685,24692],[24693,24699],[24699,24700],[24701,24704],[24705,24708],[24709,24716],[24717,24723],[24724,24726],[24727,24732],[24733,24736],[24746,24752],[24753,24755],[24756,24760],[24761,24765],[24766,24770],[24771,24774],[24775,24779],[24779,24780],[24780,24782],[24782,24783],[24783,24794],[24794,24795],[24796,24798],[24799,24802],[24803,24809],[24810,24817],[24818,24821],[24822,24829],[24830,24836],[24837,24846],[24856,24858],[24859,24862],[24863,24868],[24869,24875],[24875,24876],[24877,24881],[24882,24885],[24886,24890],[24891,24895],[24896,24898],[24899,24903],[24903,24904],[24905,24918],[24918,24919],[24920,24921],[24922,24930],[24931,24938],[24939,24945],[24946,24950],[24951,24955],[24956,24959],[24960,24964],[24974,24978],[24979,24982],[24983,24988],[24989,24995],[24995,24996],[24997,25002],[25003,25005],[25006,25009],[25010,25014],[25015,25017],[25018,25027],[25028,25031],[25032,25037],[25038,25045],[25046,25052],[25052,25053],[25054,25056],[25057,25060],[25061,25064],[25065,25071],[25072,25074],[25084,25089],[25090,25093],[25094,25100],[25101,25103],[25104,25108],[25109,25111],[25112,25116],[25116,25117],[25131,25142],[25143,25151],[25152,25153],[25154,25172],[25172,25175],[25187,25204],[25205,25213],[25214,25215],[25216,25219],[25220,25237],[25237,25238],[25238,25246],[25246,25247],[25248,25250],[25250,25252],[25255,25262],[25262,25263],[25264,25274],[25285,25295],[25296,25298],[25299,25300],[25301,25315],[25315,25316],[25317,25327],[25328,25334],[25335,25339],[25340,25347],[25348,25351],[25352,25359],[25360,25364],[25365,25366],[25367,25371],[25371,25372],[25373,25376],[25377,25381],[25382,25388],[25389,25391],[25401,25407],[25408,25413],[25414,25419],[25420,25422],[25423,25432],[25433,25438],[25438,25439],[25440,25445],[25446,25449],[25450,25454],[25455,25457],[25458,25464],[25465,25468],[25469,25476],[25477,25481],[25482,25484],[25485,25488],[25489,25493],[25493,25494],[25495,25498],[25499,25507],[25507,25508],[25518,25525],[25526,25527],[25528,25531],[25532,25536],[25537,25542],[25543,25550],[25551,25554],[25555,25562],[25563,25567],[25568,25579],[25579,25580],[25580,25583],[25583,25584],[25585,25588],[25589,25592],[25593,25604],[25604,25605],[25605,25608],[25608,25609],[25623,25633],[25634,25640],[25641,25642],[25643,25646],[25647,25657],[25657,25658],[25658,25668],[25668,25669],[25689,25700],[25700,25701],[25701,25707],[25707,25709],[25709,25720],[25720,25721],[25721,25733],[25733,25737],[25740,25747],[25747,25748],[25749,25766],[25777,25781],[25782,25784],[25785,25788],[25789,25793],[25794,25799],[25800,25803],[25804,25812],[25813,25820],[25821,25829],[25829,25830],[25831,25834],[25835,25843],[25844,25850],[25851,25856],[25857,25858],[25859,25868],[25869,25871],[25872,25873],[25874,25881],[25891,25897],[25898,25901],[25902,25911],[25912,25915],[25916,25921],[25922,25924],[25925,25927],[25927,25928],[25929,25944],[25945,25947],[25948,25956],[25957,25965],[25966,25969],[25970,25976],[25977,25981],[25982,25986],[25987,25992],[25993,25996],[26006,26010],[26011,26013],[26014,26022],[26023,26027],[26028,26033],[26034,26041],[26042,26046],[26047,26053],[26054,26057],[26058,26060],[26061,26070],[26071,26073],[26074,26077],[26078,26085],[26086,26092],[26092,26093],[26095,26102],[26102,26103],[26104,26122],[26133,26151],[26157,26159],[26160,26161],[26162,26170],[26171,26173],[26174,26191],[26191,26192],[26193,26202],[26203,26205],[26206,26208],[26209,26218],[26219,26226],[26227,26233],[26233,26234],[26244,26246],[26247,26252],[26253,26256],[26257,26264],[26265,26269],[26270,26273],[26274,26282],[26283,26289],[26289,26290],[26291,26294],[26295,26302],[26303,26305],[26306,26308],[26309,26315],[26315,26316],[26327,26331],[26332,26337],[26338,26340],[26341,26349],[26350,26352],[26353,26357],[26358,26359],[26360,26370],[26371,26377],[26377,26378],[26379,26383],[26384,26385],[26386,26400],[26401,26407],[26407,26408],[26409,26411],[26412,26415],[26416,26424],[26425,26431],[26441,26443],[26444,26451],[26452,26462],[26462,26463],[26464,26466],[26467,26473],[26474,26480],[26481,26486],[26487,26494],[26495,26497],[26498,26501],[26502,26512],[26513,26519],[26519,26520],[26534,26555],[26555,26556],[26556,26566],[26566,26567],[26567,26582],[26582,26584],[26596,26614],[26615,26631],[26632,26633],[26634,26637],[26638,26656],[26656,26657],[26777,26778],[26828,26840],[26855,26876],[26876,26878],[26882,26885],[26885,26886],[26887,26891],[26892,26900],[26901,26911],[26921,26925],[26926,26934],[26935,26946],[26947,26949],[26950,26951],[26952,26959],[26960,26964],[26965,26975],[26976,26977],[26978,26986],[26987,26993],[26994,26996],[26997,27000],[27001,27005],[27006,27014],[27014,27015],[27016,27023],[27033,27041],[27042,27054],[27055,27058],[27059,27067],[27068,27070],[27071,27074],[27075,27079],[27080,27083],[27084,27092],[27093,27099],[27100,27102],[27103,27104],[27105,27110],[27111,27113],[27114,27121],[27122,27129],[27130,27132],[27133,27136],[27146,27154],[27155,27162],[27163,27165],[27166,27174],[27175,27178],[27179,27187],[27188,27195],[27196,27200],[27201,27204],[27205,27213],[27214,27220],[27221,27223],[27224,27225],[27226,27231],[27232,27234],[27235,27242],[27252,27259],[27259,27260],[27261,27269],[27270,27282],[27283,27286],[27287,27291],[27292,27302],[27303,27310],[27311,27319],[27320,27328],[27329,27333],[27334,27342],[27342,27343],[27344,27355],[27365,27372],[27373,27384],[27385,27386],[27387,27400],[27401,27406],[27407,27408],[27409,27413],[27414,27421],[27421,27422],[27423,27430],[27431,27435],[27436,27438],[27439,27451],[27452,27454],[27455,27460],[27461,27464],[27474,27475],[27475,27484],[27484,27485],[27486,27493],[27494,27499],[27500,27501],[27502,27509],[27510,27516],[27517,27522],[27523,27525],[27526,27530],[27531,27533],[27534,27542],[27543,27546],[27547,27555],[27556,27562],[27562,27563],[27564,27571],[27572,27580],[27590,27602],[27603,27606],[27607,27609],[27610,27618],[27619,27621],[27622,27626],[27627,27630],[27631,27638],[27639,27643],[27643,27644],[27655,27659],[27660,27668],[27669,27678],[27679,27681],[27682,27683],[27684,27694],[27695,27697],[27698,27706],[27707,27719],[27720,27724],[27725,27735],[27736,27739],[27740,27741],[27741,27746],[27747,27749],[27759,27773],[27773,27774],[27775,27782],[27782,27783],[27784,27789],[27790,27794],[27795,27805],[27806,27814],[27815,27826],[27827,27829],[27830,27838],[27839,27841],[27842,27846],[27847,27849],[27850,27853],[27854,27864],[27874,27880],[27881,27883],[27884,27887],[27888,27892],[27893,27901],[27902,27904],[27905,27907],[27908,27919],[27920,27923],[27923,27924],[27935,27942],[27943,27946],[27947,27952],[27953,27955],[27956,27961],[27962,27974],[27975,27978],[27979,27987],[27988,27994],[27995,27998],[27999,28005],[28006,28008],[28009,28013],[28014,28016],[28017,28021],[28022,28024],[28025,28028],[28029,28035],[28036,28038],[28048,28049],[28050,28060],[28061,28066],[28067,28069],[28070,28073],[28074,28083],[28084,28091],[28091,28092],[28093,28095],[28096,28104],[28105,28117],[28118,28122],[28123,28140],[28141,28144],[28145,28154],[28164,28168],[28169,28171],[28172,28180],[28181,28183],[28184,28185],[28186,28196],[28197,28202],[28202,28203],[28204,28208],[28209,28215],[28216,28218],[28219,28224],[28225,28227],[28228,28231],[28232,28240],[28241,28250],[28251,28253],[28254,28257],[28258,28262],[28272,28280],[28281,28283],[28284,28289],[28290,28298],[28299,28308],[28309,28314],[28314,28315],[28326,28334],[28335,28347],[28348,28352],[28353,28355],[28356,28367],[28368,28370],[28371,28382],[28382,28383],[28384,28393],[28394,28396],[28397,28405],[28405,28406],[28407,28415],[28416,28428],[28438,28444],[28445,28448],[28449,28452],[28453,28461],[28462,28471],[28472,28478],[28479,28485],[28486,28488],[28489,28494],[28495,28504],[28505,28507],[28508,28520],[28520,28521],[28523,28528],[28528,28529],[28530,28538],[28539,28547],[28548,28560],[28570,28578],[28579,28584],[28585,28589],[28590,28591],[28592,28598],[28599,28601],[28602,28606],[28607,28616],[28617,28625],[28626,28638],[28639,28642],[28643,28649],[28650,28653],[28654,28660],[28661,28665],[28675,28685],[28685,28686],[28688,28695],[28695,28696],[28697,28711],[28722,28736],[28737,28739],[28740,28743],[28744,28748],[28749,28758],[28759,28770],[28771,28774],[28775,28783],[28784,28792],[28792,28793],[28794,28796],[28797,28799],[28800,28811],[28812,28815],[28816,28826],[28836,28843],[28844,28850],[28851,28853],[28854,28860],[28861,28864],[28865,28879],[28880,28882],[28883,28899],[28900,28907],[28908,28913],[28914,28916],[28917,28920],[28921,28931],[28941,28943],[28944,28947],[28948,28956],[28957,28963],[28964,28967],[28968,28971],[28972,28980],[28981,28988],[28988,28989],[28990,28994],[28995,29006],[29007,29009],[29010,29018],[29019,29022],[29023,29030],[29031,29042],[29043,29045],[29055,29061],[29062,29066],[29067,29075],[29076,29086],[29086,29087],[29089,29096],[29096,29097],[29098,29113],[29124,29139],[29143,29145],[29146,29149],[29150,29154],[29155,29164],[29165,29176],[29177,29180],[29181,29189],[29190,29199],[29199,29200],[29201,29203],[29204,29206],[29207,29218],[29219,29222],[29232,29242],[29243,29250],[29251,29257],[29258,29260],[29261,29267],[29268,29282],[29283,29285],[29286,29302],[29303,29310],[29311,29316],[29317,29319],[29320,29323],[29333,29343],[29344,29346],[29347,29350],[29351,29359],[29360,29366],[29367,29370],[29371,29374],[29375,29383],[29384,29391],[29391,29392],[29393,29397],[29398,29409],[29410,29412],[29413,29421],[29422,29425],[29426,29433],[29443,29454],[29455,29457],[29458,29464],[29465,29469],[29470,29478],[29479,29489],[29489,29490],[29492,29499],[29499,29500],[29501,29519],[29530,29548],[29549,29551],[29552,29563],[29564,29567],[29568,29574],[29575,29578],[29579,29589],[29590,29596],[29597,29599],[29600,29603],[29604,29612],[29613,29621],[29621,29622],[29623,29628],[29638,29640],[29641,29650],[29651,29654],[29655,29663],[29664,29675],[29676,29678],[29679,29683],[29683,29684],[29684,29687],[29688,29699],[29699,29700],[29701,29705],[29706,29717],[29718,29720],[29721,29732],[29733,29736],[29746,29752],[29753,29757],[29758,29766],[29767,29777],[29777,29778],[29780,29787],[29787,29788],[29789,29808],[29819,29838],[29844,29846],[29847,29858],[29859,29862],[29863,29869],[29870,29873],[29874,29884],[29885,29891],[29892,29894],[29895,29898],[29899,29907],[29908,29917],[29917,29918],[29928,29933],[29934,29936],[29937,29946],[29947,29950],[29951,29959],[29960,29971],[29972,29974],[29975,29979],[29979,29980],[29980,29983],[29984,29995],[29995,29996],[29997,30001],[30002,30013],[30014,30016],[30017,30028],[30038,30041],[30042,30048],[30049,30053],[30054,30062],[30063,30073],[30073,30074],[30190,30191],[30241,30253],[30255,30262],[30262,30263],[30264,30275],[30286,30297],[30301,30303],[30304,30315],[30316,30319],[30320,30326],[30327,30330],[30331,30335],[30336,30342],[30343,30345],[30346,30349],[30350,30358],[30359,30367],[30367,30368],[30369,30373],[30374,30385],[30386,30388],[30398,30406],[30407,30410],[30411,30417],[30418,30422],[30423,30431],[30432,30442],[30442,30443],[30445,30452],[30452,30453],[30454,30466],[30477,30489],[30490,30492],[30493,30504],[30505,30508],[30509,30515],[30516,30519],[30520,30524],[30525,30531],[30532,30534],[30535,30538],[30539,30547],[30548,30557],[30557,30558],[30559,30563],[30564,30575],[30576,30578],[30588,30599],[30600,30603],[30604,30610],[30611,30615],[30616,30624],[30625,30635],[30635,30636],[30638,30645],[30645,30646],[30647,30668],[30679,30700],[30705,30707],[30708,30719],[30720,30723],[30724,30732],[30733,30736],[30737,30738],[30738,30753],[30753,30754],[30755,30764],[30765,30767],[30768,30774],[30775,30778],[30788,30794],[30795,30801],[30801,30802],[30803,30807],[30808,30819],[30820,30822],[30823,30834],[30835,30838],[30839,30845],[30846,30850],[30851,30859],[30860,30870],[30870,30871],[30873,30880],[30880,30881],[30882,30899],[30910,30927],[30931,30933],[30934,30945],[30946,30949],[30950,30956],[30957,30960],[30961,30965],[30966,30972],[30972,30973],[30974,30978],[30979,30990],[30991,30993],[30994,31002],[31003,31006],[31007,31013],[31023,31027],[31028,31036],[31037,31047],[31047,31048],[31050,31057],[31057,31058],[31059,31075],[31086,31102],[31103,31105],[31106,31117],[31118,31121],[31122,31128],[31129,31132],[31133,31143],[31144,31150],[31150,31151],[31152,31156],[31157,31168],[31169,31171],[31172,31183],[31193,31196],[31197,31203],[31204,31208],[31209,31217],[31218,31228],[31228,31229],[31231,31239],[31239,31240],[31241,31255],[31266,31280],[31284,31286],[31287,31298],[31299,31302],[31303,31309],[31310,31313],[31314,31320],[31321,31327],[31327,31328],[31329,31333],[31334,31345],[31346,31348],[31349,31360],[31361,31364],[31374,31380],[31381,31385],[31386,31394],[31395,31405],[31405,31406],[31408,31413],[31413,31414],[31415,31422],[31423,31427],[31428,31436],[31437,31447],[31457,31464],[31465,31469],[31470,31478],[31479,31489],[31490,31493],[31494,31498],[31499,31501],[31502,31513],[31514,31522],[31523,31531],[31532,31537],[31538,31540],[31541,31550],[31560,31571],[31572,31580],[31581,31591],[31592,31597],[31598,31601],[31602,31604],[31605,31617],[31618,31626],[31627,31635],[31635,31636],[31650,31663],[31664,31672],[31673,31674],[31675,31695],[31695,31696],[31696,31702],[31702,31704],[31724,31726],[31727,31735],[31736,31744],[31745,31757],[31777,31778],[31778,31781],[31781,31782],[31782,31785],[31786,31800],[31800,31803],[31823,31824],[31824,31827],[31827,31828],[31828,31831],[31832,31849],[31849,31852],[31872,31874],[31875,31886],[31887,31895],[31896,31908],[31928,31929],[31929,31932],[31932,31933],[31933,31936],[31937,31955],[31955,31958],[31978,31979],[31979,31982],[31982,31983],[31983,31986],[31987,32003],[32003,32005],[32005,32017],[32017,32018],[32018,32021],[32021,32024],[32044,32046],[32047,32055],[32056,32064],[32065,32077],[32097,32098],[32098,32101],[32101,32102],[32102,32105],[32106,32127],[32127,32128],[32128,32132],[32132,32134],[32154,32155],[32155,32160],[32160,32163],[32176,32191],[32192,32199],[32200,32201],[32202,32217],[32217,32218],[32218,32224],[32224,32227],[32239,32250],[32251,32258],[32259,32260],[32261,32264],[32265,32281],[32281,32283],[32283,32286],[32286,32288],[32289,32294],[32306,32314],[32314,32315],[32315,32322],[32322,32323],[32323,32330],[32330,32331],[32332,32339],[32339,32341],[32353,32357],[32358,32361],[32362,32369],[32370,32372],[32373,32376],[32377,32383],[32384,32388],[32389,32392],[32393,32396],[32397,32398],[32399,32407],[32407,32408],[32422,32434],[32435,32436],[32437,32442],[32454,32462],[32462,32463],[32463,32470],[32470,32471],[32471,32479],[32479,32480],[32481,32488],[32488,32490],[32502,32508],[32509,32513],[32514,32517],[32518,32536],[32537,32542],[32543,32547],[32548,32551],[32552,32563],[32564,32570],[32571,32573],[32574,32577],[32578,32586],[32587,32597],[32598,32601],[32611,32620],[32621,32624],[32625,32628],[32629,32631],[32632,32643],[32643,32644],[32757,32758],[32806,32818],[32821,32824],[32824,32825],[32826,32830],[32831,32840],[32841,32848],[32856,32866],[32867,32871],[32872,32875],[32876,32880],[32881,32889],[32890,32892],[32893,32894],[32895,32904],[32904,32905],[32906,32922],[32923,32931],[32932,32940],[32940,32941],[32942,32949],[32949,32950],[32951,32955],[32963,32968],[32969,32981],[32982,32987],[32988,32992],[32993,32995],[32996,32998],[32999,33003],[33004,33006],[33007,33014],[33015,33020],[33021,33032],[33033,33040],[33041,33048],[33049,33058],[33059,33066],[33074,33090],[33091,33100],[33100,33101],[33102,33104],[33105,33110],[33111,33113],[33114,33120],[33121,33133],[33134,33136],[33137,33145],[33146,33147],[33148,33158],[33159,33164],[33165,33173],[33181,33187],[33188,33192],[33193,33201],[33202,33204],[33205,33207],[33208,33216],[33217,33223],[33224,33225],[33226,33236],[33237,33246],[33247,33254],[33254,33255],[33256,33264],[33265,33267],[33268,33270],[33271,33275],[33283,33290],[33290,33291],[33292,33300],[33301,33310],[33311,33318],[33319,33327],[33328,33331],[33332,33343],[33344,33346],[33347,33348],[33349,33356],[33357,33364],[33365,33367],[33368,33371],[33372,33376],[33377,33384],[33385,33387],[33395,33401],[33402,33409],[33410,33421],[33422,33430],[33430,33431],[33432,33436],[33437,33444],[33445,33454],[33455,33464],[33465,33467],[33468,33469],[33470,33474],[33474,33475],[33475,33479],[33479,33480],[33480,33490],[33490,33491],[33499,33506],[33506,33507],[33508,33510],[33511,33513],[33514,33520],[33521,33522],[33523,33533],[33534,33536],[33537,33546],[33547,33554],[33555,33560],[33561,33567],[33567,33568],[33577,33583],[33584,33588],[33589,33600],[33601,33604],[33605,33612],[33613,33622],[33623,33630],[33631,33634],[33635,33644],[33645,33648],[33649,33651],[33652,33658],[33659,33661],[33662,33667],[33668,33675],[33683,33691],[33692,33699],[33699,33700],[33701,33705],[33706,33710],[33711,33713],[33714,33719],[33720,33722],[33723,33729],[33730,33734],[33735,33746],[33747,33756],[33757,33760],[33761,33763],[33764,33772],[33773,33775],[33776,33779],[33787,33793],[33794,33796],[33797,33798],[33799,33803],[33803,33804],[33806,33811],[33811,33812],[33813,33820],[33821,33828],[33836,33844],[33845,33857],[33858,33861],[33862,33873],[33874,33876],[33877,33884],[33885,33896],[33897,33898],[33899,33903],[33904,33906],[33907,33908],[33909,33919],[33920,33925],[33926,33927],[33928,33935],[33936,33938],[33946,33950],[33951,33960],[33961,33968],[33968,33969],[33970,33974],[33975,33982],[33983,33985],[33986,33987],[33988,33997],[33998,34002],[34003,34006],[34007,34009],[34010,34014],[34015,34017],[34018,34021],[34022,34024],[34025,34034],[34035,34039],[34040,34042],[34050,34052],[34053,34062],[34063,34068],[34068,34069],[34070,34080],[34081,34085],[34086,34093],[34094,34109],[34110,34113],[34114,34121],[34122,34128],[34129,34131],[34132,34133],[34134,34141],[34141,34142],[34143,34146],[34154,34161],[34162,34169],[34170,34172],[34173,34176],[34177,34181],[34182,34189],[34190,34192],[34193,34195],[34196,34206],[34207,34218],[34219,34226],[34227,34232],[34233,34240],[34241,34250],[34258,34265],[34266,34276],[34276,34277],[34278,34282],[34283,34290],[34291,34294],[34295,34297],[34298,34302],[34303,34305],[34306,34311],[34312,34313],[34314,34324],[34325,34330],[34331,34334],[34335,34338],[34339,34346],[34347,34349],[34350,34357],[34365,34376],[34377,34385],[34385,34386],[34387,34395],[34396,34405],[34406,34413],[34414,34422],[34423,34426],[34427,34438],[34439,34441],[34442,34443],[34444,34451],[34452,34459],[34460,34462],[34463,34466],[34474,34478],[34479,34486],[34487,34489],[34490,34496],[34497,34504],[34505,34516],[34517,34525],[34525,34526],[34537,34550],[34551,34559],[34560,34561],[34562,34582],[34582,34583],[34583,34589],[34589,34591],[34608,34609],[34609,34612],[34612,34613],[34613,34616],[34617,34639],[34639,34641],[34642,34643],[34664,34670],[34671,34675],[34676,34683],[34683,34684],[34713,34724],[34725,34732],[34732,34733],[34762,34773],[34774,34781],[34781,34782],[34783,34789],[34790,34803],[34803,34804],[34805,34816],[34817,34818],[34843,34849],[34850,34852],[34853,34854],[34855,34856],[34856,34862],[34862,34863],[34864,34871],[34871,34872],[34872,34884],[34884,34886],[34886,34896],[34896,34899],[34924,34926],[34927,34928],[34928,34930],[34931,34933],[34934,34938],[34938,34939],[34940,34941],[34970,34977],[34977,34978],[34978,34987],[34987,34989],[34989,34999],[34999,35001],[35002,35004],[35004,35006],[35031,35032],[35053,35054],[35071,35073],[35090,35091],[35091,35096],[35096,35099],[35109,35124],[35125,35132],[35133,35134],[35135,35150],[35150,35151],[35151,35157],[35157,35160],[35169,35180],[35181,35188],[35189,35190],[35191,35194],[35195,35211],[35211,35213],[35213,35216],[35216,35218],[35219,35224],[35233,35241],[35241,35242],[35242,35249],[35249,35250],[35250,35257],[35257,35258],[35259,35266],[35266,35268],[35382,35383],[35384,35392],[35393,35394],[35394,35395],[35396,35404],[35405,35406],[35406,35407],[35407,35408],[35409,35414],[35421,35429],[35430,35431],[35431,35433],[35434,35441],[35441,35442],[35443,35444],[35444,35445],[35445,35446],[35447,35449],[35450,35454],[35455,35465],[35466,35467],[35468,35474],[35475,35484],[35485,35488],[35489,35499],[35500,35501],[35501,35502],[35502,35503],[35504,35509],[35510,35514],[35515,35521],[35528,35531],[35532,35536],[35537,35548],[35549,35561],[35562,35567],[35568,35571],[35572,35578],[35579,35581],[35582,35592],[35593,35604],[35605,35607],[35608,35618],[35619,35627],[35627,35628],[35635,35641],[35642,35646],[35647,35650],[35651,35658],[35659,35661],[35662,35671],[35672,35679],[35680,35689],[35690,35693],[35694,35697],[35698,35706],[35707,35708],[35708,35709],[35709,35710],[35711,35716],[35717,35723],[35724,35729],[35730,35733],[35740,35744],[35745,35756],[35757,35759],[35760,35765],[35766,35768],[35769,35772],[35773,35777],[35778,35788],[35789,35791],[35792,35796],[35797,35799],[35800,35803],[35804,35810],[35811,35813],[35814,35824],[35825,35836],[35843,35845],[35846,35851],[35852,35855],[35856,35864],[35865,35868],[35869,35880],[35881,35884],[35885,35891],[35892,35896],[35897,35909],[35910,35914],[35914,35915],[35916,35923],[35924,35927],[35928,35940],[35947,35952],[35953,35964],[35965,35969],[35970,35974],[35975,35979],[35980,35982],[35983,35986],[35987,35991],[35992,35995],[35996,36004],[36005,36007],[36008,36015],[36016,36025],[36026,36029],[36030,36036],[36037,36048],[36055,36058],[36059,36060],[36061,36073],[36074,36075],[36075,36076],[36076,36077],[36078,36083],[36084,36087],[36088,36095],[36096,36097],[36098,36104],[36105,36116],[36116,36117],[36120,36123],[36123,36124],[36125,36133],[36134,36138],[36139,36150],[36157,36161],[36162,36173],[36174,36177],[36178,36189],[36190,36193],[36194,36198],[36199,36206],[36207,36220],[36221,36224],[36225,36240],[36240,36241],[36242,36245],[36246,36252],[36259,36265],[36266,36270],[36271,36273],[36274,36277],[36278,36282],[36283,36293],[36294,36301],[36302,36310],[36310,36311],[36312,36317],[36318,36321],[36322,36328],[36329,36334],[36335,36343],[36344,36354],[36361,36369],[36370,36373],[36374,36383],[36384,36387],[36388,36398],[36399,36401],[36402,36406],[36407,36415],[36415,36416],[36417,36424],[36424,36425],[36426,36428],[36429,36433],[36434,36439],[36440,36446],[36447,36458],[36465,36469],[36470,36474],[36475,36486],[36487,36490],[36491,36493],[36494,36503],[36503,36504],[36505,36508],[36509,36517],[36517,36518],[36519,36521],[36522,36528],[36529,36539],[36540,36544],[36545,36547],[36548,36551],[36552,36562],[36569,36575],[36575,36576],[36577,36580],[36581,36587],[36588,36595],[36596,36598],[36599,36602],[36603,36608],[36609,36612],[36613,36619],[36620,36629],[36629,36630],[36638,36640],[36641,36643],[36644,36653],[36654,36656],[36657,36661],[36662,36664],[36665,36669],[36670,36674],[36675,36679],[36680,36691],[36692,36695],[36696,36699],[36700,36711],[36711,36712],[36713,36715],[36716,36724],[36725,36734],[36741,36749],[36750,36753],[36754,36766],[36767,36771],[36772,36776],[36777,36787],[36788,36795],[36796,36798],[36799,36802],[36803,36809],[36809,36810],[36811,36814],[36815,36819],[36820,36826],[36827,36829],[36836,36850],[36851,36860],[36861,36864],[36865,36868],[36869,36883],[36884,36889],[36890,36892],[36893,36897],[36898,36900],[36901,36907],[36908,36912],[36913,36920],[36921,36927],[36928,36930],[36937,36960],[36960,36962],[36963,36964],[36967,36972],[36972,36973],[36974,36981],[36982,36986],[36987,36995],[36996,37000],[37001,37012],[37019,37027],[37028,37032],[37033,37036],[37037,37044],[37045,37049],[37050,37057],[37058,37061],[37062,37069],[37070,37081],[37082,37089],[37090,37093],[37094,37101],[37102,37104],[37105,37117],[37124,37125],[37126,37129],[37130,37140],[37141,37142],[37143,37153],[37154,37156],[37157,37160],[37161,37167],[37168,37172],[37173,37174],[37175,37178],[37179,37181],[37182,37186],[37187,37194],[37195,37199],[37200,37202],[37203,37211],[37212,37215],[37216,37218],[37219,37223],[37230,37244],[37245,37247],[37247,37248],[37248,37251],[37252,37261],[37262,37269],[37269,37270],[37271,37278],[37278,37279],[37280,37288],[37289,37293],[37294,37305],[37306,37309],[37310,37312],[37313,37318],[37319,37321],[37322,37325],[37332,37341],[37342,37349],[37350,37356],[37356,37357],[37368,37374],[37375,37381],[37382,37383],[37384,37389],[37399,37427],[37428,37432],[37433,37434],[37435,37438],[37439,37467],[37467,37468],[37468,37469],[37470,37471],[37472,37476],[37476,37478],[37487,37491],[37491,37492],[37492,37496],[37496,37497],[37497,37503],[37503,37505],[37514,37520],[37520,37521],[37521,37524],[37524,37525],[37525,37532],[37532,37533],[37533,37537],[37537,37538],[37538,37544],[37544,37548],[37557,37578],[37579,37586],[37587,37588],[37589,37593],[37593,37594],[37594,37604],[37604,37607],[37616,37622],[37622,37623],[37623,37626],[37626,37627],[37627,37634],[37634,37635],[37635,37642],[37642,37643],[37643,37658],[37658,37662],[37671,37677],[37677,37678],[37678,37681],[37681,37682],[37682,37689],[37689,37690],[37690,37697],[37697,37698],[37698,37714],[37714,37718],[37727,37733],[37733,37734],[37734,37737],[37737,37738],[37738,37745],[37745,37746],[37746,37753],[37753,37754],[37754,37775],[37775,37779],[37788,37794],[37794,37795],[37795,37798],[37798,37799],[37799,37806],[37806,37807],[37807,37814],[37814,37815],[37815,37832],[37832,37836],[37845,37849],[37850,37860],[37861,37871],[37871,37872],[37873,37877],[37878,37884],[37885,37888],[37889,37895],[37895,37896],[37897,37901],[37902,37905],[37906,37913],[37914,37922],[37923,37925],[37926,37929],[37930,37936],[37936,37937],[37938,37941],[37948,37955],[37956,37960],[37961,37963],[37964,37975],[37976,37981],[37981,37982],[37983,37992],[37993,37995],[37996,38006],[38007,38009],[38010,38013],[38014,38021],[38022,38026],[38026,38027],[38028,38029],[38030,38037],[38038,38042],[38043,38046],[38053,38059],[38060,38062],[38062,38063],[38064,38070],[38071,38075],[38076,38078],[38079,38081],[38082,38086],[38087,38096],[38097,38099],[38100,38106],[38107,38112],[38113,38116],[38117,38127],[38128,38135],[38136,38142],[38143,38145],[38146,38151],[38152,38154],[38161,38167],[38168,38172],[38173,38176],[38177,38187],[38188,38190],[38191,38194],[38195,38202],[38203,38205],[38206,38214],[38214,38215],[38216,38220],[38221,38229],[38230,38234],[38235,38241],[38242,38245],[38246,38251],[38252,38259],[38266,38274],[38275,38279],[38280,38283],[38284,38289],[38290,38296],[38297,38299],[38300,38303],[38304,38314],[38315,38325],[38326,38330],[38331,38337],[38338,38342],[38343,38348],[38349,38356],[38357,38360],[38361,38368],[38375,38377],[38378,38381],[38382,38389],[38390,38394],[38395,38398],[38399,38403],[38404,38414],[38415,38417],[38418,38420],[38421,38432],[38433,38442],[38442,38443],[38451,38466],[38467,38474],[38475,38477],[38478,38485],[38486,38495],[38496,38498],[38499,38502],[38503,38509],[38510,38514],[38515,38518],[38519,38523],[38524,38528],[38529,38533],[38533,38534],[38545,38551],[38552,38558],[38559,38560],[38561,38566],[38676,38678],[38722,38730],[38731,38732],[38732,38733],[38733,38734],[38735,38740],[38750,38778],[38779,38783],[38784,38785],[38786,38789],[38790,38818],[38818,38819],[38819,38820],[38821,38822],[38823,38827],[38827,38829],[38838,38842],[38842,38843],[38843,38847],[38847,38848],[38848,38854],[38854,38856],[38865,38876],[38877,38884],[38885,38886],[38887,38890],[38891,38907],[38907,38909],[38909,38912],[38912,38914],[38915,38920],[38929,38933],[38933,38934],[38934,38951],[38951,38952],[38952,38959],[38959,38961],[38970,38982],[38983,38991],[38992,38993],[38994,38998],[38998,38999],[38999,39020],[39020,39023],[39032,39036],[39036,39037],[39037,39058],[39058,39059],[39059,39067],[39067,39069],[39078,39088],[39089,39095],[39096,39097],[39098,39106],[39106,39107],[39107,39116],[39116,39119],[39128,39130],[39131,39132],[39132,39138],[39139,39141],[39142,39146],[39146,39147],[39148,39149],[39162,39164],[39165,39167],[39168,39177],[39178,39184],[39185,39189],[39190,39193],[39194,39200],[39201,39204],[39204,39205],[39206,39210],[39211,39215],[39215,39216],[39217,39223],[39224,39227],[39240,39242],[39243,39250],[39251,39254],[39255,39259],[39260,39268],[39268,39269],[39270,39272],[39273,39277],[39278,39281],[39282,39292],[39293,39303],[39316,39318],[39319,39322],[39323,39325],[39326,39333],[39346,39357],[39357,39358],[39358,39365],[39365,39366],[39366,39372],[39372,39374],[39383,39384],[39394,39409],[39410,39417],[39418,39420],[39421,39428],[39429,39437],[39438,39440],[39441,39444],[39445,39451],[39452,39456],[39457,39460],[39461,39465],[39466,39470],[39471,39475],[39475,39476],[39487,39493],[39494,39500],[39501,39502],[39503,39508],[39518,39546],[39547,39551],[39552,39553],[39554,39557],[39558,39586],[39586,39587],[39587,39588],[39589,39590],[39591,39595],[39595,39597],[39606,39610],[39610,39611],[39611,39615],[39615,39616],[39616,39622],[39622,39624],[39633,39644],[39645,39652],[39653,39654],[39655,39659],[39659,39660],[39660,39680],[39680,39683],[39692,39694],[39695,39696],[39696,39703],[39704,39714],[39715,39741],[39741,39742],[39743,39744],[39757,39761],[39761,39762],[39762,39782],[39782,39784],[39784,39810],[39810,39811],[39812,39819],[39819,39821],[39834,39844],[39845,39851],[39852,39853],[39854,39856],[39856,39882],[39882,39883],[39884,39891],[39891,39892],[39913,39914],[39914,39923],[39923,39926],[39939,39941],[39942,39943],[39943,39949],[39950,39952],[39953,39957],[39957,39958],[39959,39960],[39977,39979],[39980,39982],[39983,39992],[39993,39999],[40000,40004],[40005,40008],[40009,40015],[40016,40019],[40019,40020],[40021,40025],[40026,40030],[40030,40031],[40032,40038],[40039,40042],[40059,40061],[40062,40069],[40070,40073],[40074,40078],[40079,40087],[40087,40088],[40089,40091],[40092,40096],[40097,40100],[40101,40111],[40112,40122],[40139,40141],[40142,40147],[40148,40150],[40151,40158],[40175,40186],[40186,40187],[40187,40194],[40194,40195],[40195,40201],[40201,40203],[40216,40217],[40226,40227],[40236,40248],[40249,40257],[40258,40259],[40260,40263],[40264,40281],[40281,40282],[40282,40293],[40293,40294],[40294,40302],[40302,40303],[40320,40323],[40323,40324],[40325,40326],[40326,40328],[40328,40330],[40331,40332],[40341,40349],[40349,40350],[40350,40359],[40359,40360],[40360,40363],[40364,40376],[40376,40378],[40378,40381],[40382,40384],[40384,40386],[40387,40389],[40398,40402],[40402,40403],[40403,40421],[40421,40422],[40422,40430],[40430,40432],[40441,40445],[40445,40446],[40446,40464],[40464,40465],[40465,40473],[40473,40475],[40485,40491],[40492,40496],[40497,40501],[40502,40505],[40506,40512],[40513,40519],[40520,40524],[40525,40527],[40528,40536],[40537,40545],[40546,40551],[40552,40557],[40558,40561],[40562,40567],[40568,40575],[40576,40579],[40580,40586],[40594,40602],[40603,40606],[40607,40610],[40611,40622],[40623,40629],[40630,40635],[40636,40640],[40641,40648],[40649,40664],[40665,40672],[40672,40673],[40675,40680],[40680,40681],[40682,40689],[40690,40698],[40699,40703],[40704,40712],[40713,40714],[40714,40715],[40715,40716],[40724,40728],[40729,40740],[40741,40747],[40748,40751],[40752,40759],[40760,40762],[40763,40766],[40767,40774],[40775,40783],[40784,40789],[40790,40793],[40814,40824],[40832,40841],[40841,40842],[40843,40847],[40848,40859],[40860,40868],[40869,40871],[40872,40878],[40879,40885],[40886,40890],[40891,40903],[40904,40907],[40908,40915],[40916,40922],[40930,40932],[40933,40936],[40937,40945],[40946,40953],[40953,40954],[40955,40961],[40962,40966],[40967,40971],[40980,41021],[41021,41023],[41031,41034],[41035,41077],[41077,41079],[41080,41082],[41083,41086],[41087,41095],[41096,41098],[41099,41105],[41106,41109],[41110,41118],[41126,41130],[41130,41131],[41132,41136],[41137,41143],[41144,41150],[41151,41153],[41154,41165],[41166,41173],[41174,41179],[41180,41185],[41186,41188],[41189,41192],[41193,41203],[41204,41206],[41207,41210],[41211,41219],[41227,41234],[41234,41235],[41236,41239],[41240,41247],[41248,41251],[41252,41254],[41255,41264],[41265,41267],[41268,41275],[41276,41280],[41281,41284],[41285,41292],[41293,41298],[41299,41305],[41306,41308],[41309,41312],[41320,41328],[41329,41335],[41336,41341],[41342,41363],[41363,41366],[41367,41370],[41371,41379],[41380,41384],[41385,41389],[41390,41392],[41393,41400],[41401,41414],[41422,41425],[41426,41436],[41437,41450],[41451,41453],[41454,41457],[41458,41462],[41463,41471],[41471,41472],[41473,41481],[41481,41482],[41483,41487],[41488,41499],[41500,41504],[41505,41507],[41515,41533],[41533,41534],[41534,41546],[41546,41547],[41548,41554],[41555,41557],[41558,41566],[41567,41570],[41571,41578],[41579,41581],[41582,41584],[41585,41593],[41594,41601],[41601,41602],[41603,41605],[41606,41608],[41616,41624],[41625,41632],[41633,41641],[41642,41644],[41645,41651],[41651,41652],[41653,41656],[41657,41664],[41665,41669],[41670,41672],[41673,41680],[41681,41694],[41695,41700],[41701,41703],[41704,41707],[41708,41718],[41726,41728],[41729,41732],[41733,41740],[41740,41741],[41743,41748],[41748,41749],[41750,41759],[41760,41767],[41768,41776],[41777,41787],[41795,41802],[41803,41818],[41819,41821],[41822,41826],[41827,41838],[41839,41846],[41847,41852],[41853,41860],[41861,41869],[41870,41880],[41881,41888],[41889,41891],[41899,41902],[41903,41907],[41907,41908],[41908,41911],[41912,41925],[41925,41926],[42035,42037],[42082,42090],[42091,42092],[42092,42093],[42093,42094],[42095,42100],[42109,42110],[42111,42125],[42126,42135],[42135,42136],[42139,42142],[42143,42146],[42147,42149],[42150,42153],[42154,42161],[42162,42168],[42169,42171],[42172,42182],[42183,42185],[42186,42189],[42190,42195],[42196,42198],[42199,42202],[42212,42226],[42227,42233],[42233,42234],[42235,42242],[42243,42249],[42250,42256],[42256,42257],[42258,42272],[42272,42273],[42283,42284],[42285,42293],[42294,42300],[42300,42301],[42302,42305],[42306,42309],[42310,42312],[42313,42316],[42317,42324],[42325,42331],[42332,42334],[42335,42345],[42346,42348],[42349,42356],[42357,42360],[42361,42371],[42372,42382],[42392,42393],[42393,42396],[42397,42399],[42400,42406],[42407,42416],[42416,42418],[42419,42422],[42423,42430],[42431,42438],[42439,42442],[42443,42451],[42452,42460],[42461,42464],[42465,42469],[42470,42472],[42473,42477],[42478,42480],[42481,42484],[42485,42491],[42501,42505],[42505,42506],[42507,42514],[42515,42521],[42522,42528],[42528,42529],[42530,42539],[42539,42540],[42549,42550],[42551,42556],[42557,42563],[42563,42564],[42571,42574],[42575,42582],[42583,42585],[42586,42590],[42591,42593],[42594,42599],[42600,42606],[42606,42607],[42608,42615],[42616,42622],[42623,42629],[42629,42630],[42631,42640],[42640,42641],[42650,42653],[42654,42665],[42666,42673],[42674,42680],[42681,42686],[42687,42691],[42692,42694],[42695,42702],[42703,42716],[42717,42726],[42727,42729],[42730,42740],[42741,42743],[42744,42747],[42748,42754],[42762,42770],[42771,42775],[42776,42779],[42780,42787],[42787,42788],[42790,42795],[42795,42796],[42797,42808],[42809,42813],[42814,42825],[42834,42838],[42839,42850],[42851,42854],[42855,42857],[42858,42868],[42869,42875],[42876,42886],[42887,42889],[42890,42897],[42898,42918],[42918,42920],[42921,42923],[42931,42939],[42940,42942],[42943,42950],[42951,42974],[42974,42977],[42978,42981],[42982,42988],[42989,42994],[42995,42997],[42998,43003],[43004,43007],[43008,43016],[43017,43021],[43022,43027],[43028,43030],[43038,43049],[43050,43053],[43054,43064],[43065,43068],[43069,43072],[43073,43078],[43079,43091],[43091,43092],[43093,43096],[43097,43117],[43117,43119],[43120,43126],[43127,43129],[43130,43133],[43141,43152],[43152,43153],[43154,43157],[43158,43164],[43165,43175],[43176,43179],[43180,43190],[43191,43198],[43199,43207],[43208,43216],[43217,43224],[43225,43228],[43229,43236],[43237,43244],[43252,43254],[43255,43258],[43259,43265],[43266,43268],[43269,43273],[43274,43276],[43277,43285],[43286,43293],[43294,43302],[43303,43306],[43307,43311],[43311,43312],[43313,43316],[43317,43340],[43340,43342],[43343,43349],[43357,43359],[43360,43371],[43371,43372],[43375,43378],[43378,43379],[43380,43384],[43385,43394],[43395,43403],[43411,43414],[43415,43423],[43424,43434],[43435,43446],[43447,43452],[43453,43456],[43457,43462],[43463,43465],[43466,43476],[43476,43477],[43478,43489],[43490,43492],[43493,43497],[43498,43500],[43501,43503],[43504,43505],[43505,43506],[43514,43515],[43516,43523],[43524,43528],[43529,43531],[43532,43538],[43539,43546],[43547,43549],[43550,43552],[43553,43559],[43560,43565],[43566,43569],[43570,43583],[43584,43588],[43589,43596],[43597,43599],[43600,43604],[43605,43612],[43620,43624],[43625,43627],[43628,43629],[43630,43639],[43640,43642],[43643,43646],[43647,43651],[43652,43660],[43660,43661],[43662,43669],[43670,43671],[43671,43672],[43672,43673],[43674,43680],[43681,43684],[43685,43695],[43696,43705],[43706,43709],[43710,43721],[43721,43722],[43730,43737],[43738,43742],[43743,43751],[43752,43758],[43759,43762],[43763,43773],[43774,43779],[43780,43783],[43784,43790],[43791,43793],[43794,43807],[43808,43817],[43818,43822],[43822,43823],[43825,43830],[43830,43831],[43832,43840],[43841,43850],[43859,43876],[43880,43887],[43888,43889],[43890,43895],[43896,43900],[43901,43909],[43910,43919],[43920,43924],[43925,43932],[43933,43940],[43941,43943],[43944,43946],[43947,43956],[43964,43975],[43976,43978],[43979,43982],[43983,43987],[43988,43995],[43996,44006],[44006,44007],[44010,44013],[44013,44014],[44015,44023],[44024,44028],[44029,44037],[44038,44046],[44047,44052],[44052,44053],[44054,44058],[44059,44066],[44075,44086],[44087,44089],[44090,44091],[44092,44098],[44099,44103],[44104,44108],[44109,44117],[44118,44125],[44126,44131],[44132,44134],[44135,44138],[44139,44147],[44148,44149],[44149,44150],[44150,44151],[44152,44157],[44158,44162],[44163,44173],[44181,44184],[44185,44194],[44195,44207],[44208,44210],[44211,44214],[44215,44219],[44220,44228],[44229,44232],[44233,44236],[44237,44243],[44244,44248],[44249,44256],[44257,44267],[44268,44270],[44271,44280],[44288,44290],[44291,44294],[44295,44299],[44299,44300],[44309,44320],[44323,44329],[44330,44332],[44333,44346],[44347,44355],[44356,44358],[44359,44367],[44368,44377],[44378,44386],[44387,44394],[44395,44398],[44399,44402],[44410,44418],[44419,44427],[44428,44431],[44432,44437],[44438,44444],[44444,44445],[44446,44459],[44460,44467],[44468,44483],[44484,44486],[44487,44490],[44491,44499],[44500,44503],[44511,44519],[44520,44528],[44528,44529],[44530,44537],[44538,44542],[44543,44550],[44551,44559],[44560,44563],[44564,44572],[44573,44575],[44576,44580],[44581,44585],[44586,44588],[44589,44600],[44601,44609],[44617,44624],[44625,44635],[44636,44639],[44640,44650],[44650,44651],[44662,44675],[44676,44684],[44685,44686],[44687,44707],[44707,44708],[44708,44714],[44714,44716],[44733,44734],[44734,44737],[44737,44738],[44738,44741],[44742,44754],[44754,44757],[44774,44775],[44775,44778],[44778,44779],[44779,44782],[44783,44797],[44797,44799],[44799,44812],[44812,44813],[44813,44816],[44816,44819],[44836,44837],[44837,44840],[44840,44841],[44841,44844],[44845,44860],[44860,44863],[44880,44881],[44881,44884],[44884,44885],[44885,44888],[44889,44908],[44908,44911],[45024,45026],[45072,45080],[45081,45082],[45082,45083],[45083,45084],[45085,45090],[45110,45111],[45111,45116],[45116,45119],[45130,45141],[45142,45153],[45154,45155],[45156,45159],[45160,45171],[45171,45172],[45172,45180],[45180,45181],[45182,45186],[45186,45188],[45191,45198],[45198,45199],[45200,45204],[45205,45212],[45213,45221],[45232,45235],[45236,45254],[45255,45264],[45265,45275],[45276,45277],[45278,45285],[45286,45289],[45290,45300],[45301,45303],[45304,45305],[45306,45314],[45315,45320],[45321,45323],[45324,45328],[45338,45346],[45346,45347],[45348,45359],[45360,45362],[45363,45371],[45372,45374],[45375,45379],[45380,45384],[45385,45387],[45388,45396],[45397,45405],[45406,45413],[45413,45414],[45415,45422],[45423,45433],[45434,45441],[45451,45459],[45460,45463],[45464,45472],[45473,45475],[45476,45480],[45481,45485],[45486,45488],[45489,45500],[45501,45509],[45510,45514],[45515,45525],[45525,45526],[45527,45530],[45531,45535],[45536,45543],[45544,45546],[45547,45548],[45558,45565],[45566,45573],[45574,45576],[45577,45579],[45580,45588],[45589,45590],[45591,45599],[45600,45606],[45607,45611],[45612,45613],[45614,45621],[45622,45628],[45629,45631],[45632,45634],[45635,45639],[45640,45644],[45645,45647],[45648,45651],[45652,45658],[45659,45661],[45671,45679],[45680,45682],[45683,45686],[45687,45692],[45693,45700],[45700,45701],[45714,45732],[45733,45749],[45750,45751],[45752,45755],[45756,45774],[45774,45776],[45777,45778],[45797,45803],[45804,45808],[45809,45815],[45815,45816],[45842,45853],[45854,45861],[45861,45862],[45888,45900],[45901,45909],[45909,45910],[45936,45947],[45948,45955],[45955,45956],[45957,45963],[45964,45977],[45977,45978],[45979,45990],[45991,45992],[46014,46022],[46022,46023],[46023,46036],[46036,46037],[46037,46047],[46047,46048],[46048,46053],[46053,46055],[46077,46085],[46085,46086],[46086,46095],[46095,46096],[46126,46129],[46130,46142],[46142,46144],[46144,46148],[46149,46158],[46159,46166],[46166,46168],[46206,46217],[46217,46218],[46218,46228],[46228,46231],[46249,46250],[46262,46264],[46267,46274],[46274,46275],[46276,46283],[46284,46291],[46292,46300],[46311,46315],[46316,46323],[46324,46332],[46333,46336],[46337,46344],[46345,46352],[46353,46355],[46356,46357],[46358,46384],[46385,46389],[46390,46397],[46398,46399],[46409,46416],[46417,46420],[46421,46423],[46424,46425],[46426,46433],[46434,46441],[46441,46442],[46443,46451],[46452,46460],[46461,46462],[46463,46467],[46468,46474],[46475,46489],[46490,46492],[46493,46496],[46497,46504],[46514,46521],[46522,46530],[46531,46536],[46537,46539],[46540,46541],[46542,46549],[46550,46557],[46558,46566],[46567,46576],[46576,46577],[46578,46604],[46614,46622],[46623,46627],[46628,46633],[46634,46641],[46641,46642],[46643,46645],[46646,46651],[46651,46652],[46653,46656],[46657,46659],[46659,46663],[46663,46664],[46677,46690],[46691,46699],[46700,46701],[46702,46707],[46719,46737],[46738,46755],[46756,46757],[46758,46763],[46774,46792],[46793,46810],[46811,46812],[46813,46818],[46829,46847],[46848,46865],[46866,46867],[46868,46873],[46885,46912],[46913,46926],[46927,46928],[46929,46932],[46933,46960],[46960,46963],[46974,46987],[46987,46988],[46988,46996],[46996,46999],[46999,47006],[47006,47010],[47011,47028],[47028,47030],[47041,47054],[47054,47055],[47055,47063],[47063,47067],[47067,47069],[47069,47071],[47072,47089],[47089,47091],[47102,47115],[47115,47116],[47116,47124],[47124,47129],[47130,47147],[47147,47149],[47160,47171],[47172,47183],[47184,47185],[47186,47189],[47190,47201],[47201,47202],[47202,47210],[47210,47211],[47212,47225],[47225,47227],[47239,47244],[47250,47253],[47257,47267],[47268,47270],[47275,47282],[47287,47291],[47296,47309],[47312,47327],[47339,47341],[47351,47377],[47378,47379],[47380,47383],[47384,47392],[47392,47393],[47394,47399],[47400,47402],[47403,47410],[47411,47422],[47422,47423],[47426,47433],[47433,47434],[47435,47440],[47441,47445],[47446,47453],[47454,47456],[47457,47463],[47464,47472],[47483,47487],[47488,47493],[47494,47505],[47506,47509],[47510,47520],[47520,47521],[47522,47525],[47526,47537],[47538,47541],[47542,47544],[47545,47549],[47550,47552],[47553,47560],[47561,47564],[47565,47571],[47572,47580],[47590,47593],[47594,47600],[47601,47605],[47606,47617],[47617,47618],[47619,47622],[47623,47648],[47648,47650],[47651,47657],[47658,47663],[47664,47666],[47667,47675],[47676,47683],[47683,47684],[47694,47703],[47704,47705],[47706,47714],[47715,47718],[47719,47724],[47725,47727],[47728,47732],[47733,47735],[47736,47739],[47740,47746],[47746,47747],[47748,47752],[47753,47759],[47760,47763],[47764,47766],[47767,47775],[47776,47778],[47779,47780],[47781,47785],[47786,47788],[47798,47804],[47805,47813],[47814,47822],[47823,47825],[47826,47827],[47828,47838],[47839,47849],[47849,47850],[47851,47854],[47855,47880],[47880,47882],[47883,47889],[47890,47892],[47902,47906],[47907,47909],[47910,47917],[47918,47922],[47923,47931],[47932,47939],[47939,47940],[47941,47945],[47946,47952],[47953,47963],[47964,47966],[47967,47975],[47976,47978],[47979,47986],[47987,47998],[48008,48022],[48022,48023],[48024,48026],[48027,48031],[48032,48034],[48035,48038],[48039,48042],[48043,48051],[48052,48064],[48065,48068],[48069,48077],[48078,48086],[48087,48091],[48092,48094],[48095,48098],[48099,48110],[48120,48123],[48124,48135],[48135,48136],[48248,48250],[48294,48302],[48303,48304],[48304,48305],[48305,48306],[48307,48312],[48323,48334],[48335,48346],[48347,48348],[48349,48354],[48363,48383],[48384,48388],[48389,48390],[48391,48396],[48405,48416],[48417,48424],[48425,48426],[48427,48432],[48442,48449],[48450,48456],[48457,48458],[48459,48463],[48463,48464],[48473,48476],[48477,48478],[48491,48496],[48497,48498],[48498,48504],[48505,48507],[48508,48512],[48512,48513],[48513,48519],[48519,48522],[48523,48524],[48541,48552],[48552,48553],[48553,48566],[48566,48567],[48567,48571],[48571,48572],[48573,48580],[48580,48582],[48595,48596],[48605,48606],[48607,48614],[48615,48616],[48629,48633],[48633,48634],[48634,48642],[48642,48645],[48654,48655],[48659,48664],[48664,48665],[48666,48670],[48671,48678],[48679,48687],[48696,48715],[48718,48720],[48721,48722],[48723,48729],[48730,48734],[48735,48739],[48740,48748],[48749,48756],[48757,48762],[48763,48765],[48766,48769],[48770,48778],[48779,48780],[48780,48781],[48781,48782],[48783,48788],[48789,48793],[48801,48811],[48812,48815],[48816,48825],[48826,48838],[48839,48841],[48842,48845],[48846,48850],[48851,48859],[48860,48863],[48864,48867],[48868,48874],[48875,48879],[48880,48887],[48888,48898],[48898,48899],[48907,48909],[48910,48919],[48920,48922],[48923,48926],[48927,48931],[48931,48932],[48933,48936],[48937,48956],[48957,48963],[48964,48966],[48967,48970],[48971,48984],[48985,48993],[48994,48996],[49004,49012],[49013,49022],[49023,49031],[49032,49039],[49040,49043],[49044,49047],[49048,49056],[49057,49065],[49066,49069],[49070,49075],[49076,49082],[49082,49083],[49084,49097],[49105,49112],[49113,49128],[49129,49131],[49132,49135],[49136,49144],[49145,49148],[49149,49157],[49158,49166],[49166,49167],[49168,49179],[49180,49188],[49189,49199],[49200,49203],[49211,49213],[49214,49225],[49226,49233],[49234,49253],[49254,49258],[49259,49262],[49263,49270],[49271,49274],[49275,49279],[49280,49288],[49289,49292],[49293,49294],[49295,49303],[49304,49307],[49315,49319],[49320,49328],[49328,49329],[49340,49360],[49361,49365],[49366,49367],[49368,49373],[49383,49396],[49397,49405],[49406,49407],[49408,49428],[49428,49429],[49429,49435],[49435,49437],[49454,49455],[49455,49458],[49458,49459],[49459,49462],[49463,49477],[49477,49480],[49497,49498],[49498,49501],[49501,49502],[49502,49505],[49506,49523],[49523,49526],[49543,49544],[49544,49547],[49547,49548],[49548,49551],[49552,49570],[49570,49573],[49590,49591],[49591,49594],[49594,49595],[49595,49598],[49599,49615],[49615,49617],[49617,49625],[49625,49626],[49626,49629],[49629,49632],[49649,49650],[49650,49653],[49653,49654],[49654,49657],[49658,49679],[49679,49680],[49680,49684],[49684,49686],[49703,49704],[49704,49709],[49709,49712],[49721,49740],[49741,49753],[49754,49755],[49756,49759],[49760,49779],[49779,49782],[49792,49803],[49804,49811],[49812,49813],[49814,49817],[49818,49834],[49834,49836],[49836,49839],[49839,49841],[49842,49847],[49856,49871],[49872,49879],[49880,49881],[49882,49897],[49897,49898],[49898,49904],[49904,49907],[49916,49928],[49928,49929],[49929,49939],[49939,49940],[49940,49947],[49947,49948],[49949,49957],[49957,49958],[49959,49966],[49966,49968],[49977,49989],[49990,49998],[49999,50000],[50001,50013],[50013,50014],[50014,50021],[50021,50022],[50022,50029],[50029,50030],[50031,50035],[50035,50036],[50037,50044],[50044,50046],[50055,50067],[50067,50068],[50068,50079],[50079,50080],[50080,50088],[50088,50089],[50090,50098],[50098,50099],[50100,50107],[50107,50109],[50119,50129],[50130,50136],[50137,50138],[50139,50147],[50147,50148],[50148,50157],[50157,50160],[50169,50180],[50180,50181],[50181,50188],[50188,50189],[50189,50195],[50195,50197],[50207,50214],[50215,50217],[50218,50237],[50238,50241],[50242,50246],[50247,50249],[50250,50257],[50258,50262],[50263,50271],[50272,50279],[50279,50280],[50281,50285],[50286,50292],[50293,50302],[50310,50312],[50313,50321],[50322,50324],[50325,50332],[50333,50344],[50345,50359],[50359,50360],[50361,50363],[50364,50368],[50369,50371],[50372,50375],[50376,50379],[50380,50388],[50389,50401],[50402,50406],[50407,50409],[50410,50413],[50421,50440],[50441,50444],[50445,50456],[50456,50457],[50460,50465],[50465,50466],[50467,50477],[50478,50489],[50490,50491],[50492,50498],[50507,50510],[50511,50534],[50535,50544],[50545,50547],[50548,50556],[50557,50559],[50560,50569],[50570,50577],[50578,50581],[50582,50592],[50593,50603],[50611,50614],[50615,50617],[50618,50625],[50626,50629],[50630,50640],[50641,50643],[50644,50651],[50652,50660],[50661,50666],[50667,50670],[50671,50683],[50684,50686],[50687,50690],[50691,50698],[50699,50706],[50707,50710],[50718,50722],[50723,50732],[50732,50733],[50734,50737],[50738,50745],[50746,50756],[50757,50763],[50764,50772],[50773,50781],[50782,50784],[50785,50789],[50790,50801],[50802,50807],[50808,50816],[50824,50832],[50832,50833],[50834,50841],[50841,50842],[50843,50845],[50846,50854],[50855,50858],[50859,50866],[50867,50869],[50870,50873],[50874,50878],[50879,50887],[50888,50892],[50893,50895],[50896,50904],[50905,50908],[50909,50916],[50916,50917],[50918,50922],[50922,50923],[50923,50926],[50934,50945],[50946,50949],[50950,50960],[50961,50963],[50964,50971],[50971,50972],[50973,50978],[50979,50983],[50983,50984],[50984,50987],[50988,50999],[51000,51003],[51004,51007],[51007,51008],[51009,51017],[51017,51018],[51019,51021],[51022,51030],[51038,51041],[51042,51047],[51048,51050],[51051,51054],[51055,51065],[51066,51072],[51072,51073],[51074,51077],[51078,51082],[51083,51086],[51087,51095],[51096,51103],[51104,51106],[51107,51114],[51115,51117],[51118,51124],[51125,51128],[51129,51139],[51147,51149],[51150,51153],[51154,51162],[51163,51167],[51168,51170],[51171,51178],[51179,51189],[51190,51192],[51193,51198],[51199,51205],[51206,51208],[51209,51212],[51213,51223],[51224,51230],[51230,51231],[51232,51239],[51239,51240],[51241,51244],[51354,51356],[51399,51407],[51408,51409],[51409,51410],[51410,51411],[51412,51417],[51424,51432],[51433,51438],[51439,51442],[51443,51451],[51452,51459],[51460,51463],[51464,51474],[51475,51477],[51478,51482],[51483,51485],[51486,51492],[51493,51498],[51499,51501],[51502,51505],[51506,51516],[51517,51519],[51520,51523],[51529,51537],[51538,51544],[51544,51545],[51546,51548],[51549,51558],[51558,51559],[51562,51565],[51565,51566],[51567,51577],[51578,51583],[51589,51598],[51599,51610],[51611,51615],[51616,51626],[51627,51632],[51633,51641],[51642,51651],[51652,51658],[51659,51661],[51662,51672],[51673,51684],[51684,51685],[51691,51699],[51700,51711],[51712,51715],[51716,51723],[51724,51726],[51727,51737],[51738,51744],[51745,51747],[51748,51757],[51758,51765],[51766,51769],[51770,51778],[51779,51784],[51785,51787],[51793,51803],[51804,51808],[51809,51820],[51820,51821],[51822,51832],[51833,51837],[51838,51853],[51854,51857],[51858,51869],[51870,51873],[51874,51877],[51878,51880],[51881,51885],[51891,51903],[51904,51906],[51907,51915],[51916,51925],[51925,51926],[51933,51935],[51936,51943],[51944,51947],[51948,51952],[51953,51959],[51960,51964],[51965,51967],[51968,51978],[51979,51990],[51991,51993],[51994,51999],[52000,52003],[52004,52007],[52008,52018],[52019,52030],[52036,52039],[52040,52041],[52042,52048],[52049,52054],[52054,52055],[52056,52059],[52060,52063],[52064,52074],[52075,52080],[52081,52083],[52084,52087],[52088,52090],[52091,52094],[52095,52107],[52108,52110],[52111,52114],[52115,52119],[52120,52133],[52133,52134],[52140,52147],[52147,52148],[52149,52151],[52152,52161],[52162,52167],[52168,52172],[52173,52176],[52177,52182],[52183,52185],[52186,52189],[52190,52201],[52201,52202],[52203,52206],[52207,52210],[52211,52217],[52218,52221],[52222,52226],[52227,52240],[52241,52243],[52249,52256],[52257,52259],[52260,52265],[52266,52269],[52270,52274],[52275,52285],[52286,52297],[52298,52307],[52308,52310],[52311,52312],[52313,52323],[52324,52335],[52336,52343],[52343,52344],[52353,52361],[52362,52368],[52369,52370],[52371,52374],[52375,52383],[52383,52385],[52385,52394],[52394,52397],[52404,52417],[52418,52426],[52427,52428],[52429,52432],[52433,52446],[52446,52449],[52456,52464],[52464,52465],[52465,52476],[52476,52477],[52477,52480],[52480,52482],[52489,52497],[52497,52498],[52498,52519],[52519,52520],[52520,52522],[52522,52524],[52531,52539],[52539,52540],[52540,52554],[52554,52555],[52555,52561],[52561,52562],[52563,52565],[52565,52567],[52574,52596],[52597,52603],[52604,52605],[52606,52614],[52614,52615],[52615,52620],[52620,52621],[52621,52627],[52627,52628],[52629,52633],[52633,52635],[52642,52656],[52657,52666],[52667,52668],[52669,52675],[52675,52676],[52676,52679],[52679,52682],[52689,52709],[52710,52714],[52715,52716],[52717,52726],[52726,52727],[52727,52740],[52740,52743],[52751,52757],[52758,52762],[52763,52767],[52768,52771],[52772,52782],[52783,52787],[52788,52791],[52792,52794],[52795,52798],[52799,52801],[52802,52809],[52810,52817],[52818,52820],[52821,52824],[52825,52826],[52827,52833],[52834,52844],[52845,52847],[52848,52853],[52859,52864],[52865,52869],[52869,52870],[52871,52873],[52874,52876],[52877,52880],[52881,52895],[52896,52898],[52899,52902],[52903,52913],[52914,52918],[52919,52923],[52924,52926],[52927,52933],[52934,52938],[52939,52942],[52943,52953],[52954,52956],[52957,52965],[52971,52975],[52976,52978],[52979,52982],[52983,52987],[52988,52992],[52993,52995],[52996,52998],[52999,53002],[53003,53009],[53010,53016],[53016,53017],[53018,53022],[53023,53025],[53026,53029],[53030,53040],[53041,53043],[53044,53047],[53048,53056],[53056,53057],[53066,53079],[53080,53088],[53089,53090],[53091,53096],[53103,53125],[53126,53132],[53133,53134],[53135,53143],[53143,53144],[53144,53149],[53149,53150],[53150,53156],[53156,53157],[53158,53162],[53162,53164],[53171,53185],[53186,53195],[53196,53197],[53198,53204],[53204,53205],[53205,53208],[53208,53211],[53218,53221],[53222,53223],[53234,53254],[53255,53259],[53260,53261],[53262,53271],[53271,53272],[53272,53285],[53285,53288],[53295,53296],[53297,53304],[53305,53306],[53317,53325],[53325,53326],[53326,53333],[53333,53334],[53334,53343],[53343,53344],[53345,53349],[53349,53351],[53358,53359],[53367,53370],[53371,53376],[53377,53379],[53380,53383],[53384,53394],[53395,53399],[53400,53403],[53404,53406],[53407,53419],[53420,53422],[53423,53430],[53430,53431],[53440,53448],[53449,53455],[53456,53457],[53458,53461],[53462,53470],[53470,53472],[53472,53481],[53481,53484],[53491,53504],[53505,53513],[53514,53515],[53516,53521],[53528,53537],[53538,53548],[53549,53550],[53551,53559],[53559,53560],[53560,53573],[53573,53576],[53583,53589],[53589,53590],[53590,53593],[53593,53594],[53594,53601],[53601,53603],[53603,53608],[53609,53618],[53618,53619],[53620,53621],[53622,53623],[53624,53634],[53634,53635],[53635,53647],[53647,53651],[53658,53664],[53664,53665],[53665,53668],[53668,53669],[53669,53676],[53676,53678],[53678,53683],[53684,53690],[53690,53691],[53692,53693],[53694,53695],[53696,53706],[53706,53707],[53707,53716],[53716,53720],[53727,53733],[53733,53734],[53734,53737],[53737,53738],[53738,53745],[53745,53747],[53747,53752],[53753,53760],[53760,53761],[53762,53763],[53764,53765],[53766,53776],[53776,53777],[53777,53787],[53787,53791],[53798,53807],[53808,53819],[53820,53821],[53822,53830],[53830,53831],[53831,53839],[53839,53840],[53840,53846],[53846,53848],[53855,53861],[53861,53862],[53862,53865],[53865,53866],[53866,53873],[53873,53875],[53875,53881],[53882,53891],[53891,53892],[53893,53894],[53895,53896],[53897,53908],[53908,53909],[53909,53921],[53921,53925],[53932,53938],[53938,53939],[53939,53942],[53942,53943],[53943,53950],[53950,53952],[53952,53958],[53959,53965],[53965,53966],[53967,53968],[53969,53970],[53971,53982],[53982,53983],[53983,53992],[53992,53996],[54003,54009],[54009,54010],[54010,54013],[54013,54014],[54014,54021],[54021,54023],[54023,54029],[54030,54037],[54037,54038],[54039,54040],[54041,54042],[54043,54054],[54054,54055],[54055,54065],[54065,54069],[54077,54083],[54084,54088],[54089,54093],[54094,54104],[54105,54110],[54111,54113],[54114,54117],[54118,54130],[54131,54136],[54137,54144],[54145,54156],[54156,54157],[54158,54162],[54163,54169],[54170,54177],[54183,54193],[54194,54200],[54201,54203],[54204,54210],[54211,54213],[54214,54217],[54218,54227],[54227,54228],[54229,54232],[54233,54237],[54238,54241],[54242,54252],[54253,54258],[54259,54270],[54271,54275],[54276,54280],[54286,54296],[54297,54302],[54303,54304],[54305,54311],[54312,54314],[54315,54325],[54325,54326],[54327,54329],[54330,54332],[54333,54342],[54343,54352],[54353,54355],[54356,54361],[54362,54370],[54371,54373],[54374,54381],[54382,54385],[54386,54390],[54396,54407],[54408,54412],[54413,54416],[54417,54421],[54422,54427],[54428,54430],[54431,54440],[54441,54447],[54448,54450],[54451,54461],[54461,54462],[54575,54577],[54618,54626],[54627,54628],[54628,54629],[54629,54630],[54631,54636],[54644,54657],[54658,54666],[54667,54668],[54669,54674],[54681,54689],[54689,54690],[54690,54702],[54702,54705],[54712,54720],[54720,54721],[54721,54730],[54730,54731],[54731,54732],[54732,54733],[54734,54742],[54742,54743],[54743,54750],[54750,54752],[54760,54769],[54770,54772],[54773,54775],[54776,54786],[54787,54789],[54790,54792],[54793,54794],[54795,54809],[54810,54812],[54813,54816],[54817,54825],[54826,54828],[54829,54833],[54834,54839],[54840,54842],[54843,54854],[54860,54866],[54867,54871],[54872,54875],[54876,54880],[54881,54884],[54885,54887],[54888,54894],[54895,54900],[54901,54910],[54911,54918],[54919,54921],[54922,54926],[54927,54929],[54930,54934],[54935,54938],[54939,54941],[54942,54948],[54949,54955],[54961,54963],[54964,54972],[54973,54977],[54977,54978],[54979,54991],[54992,55005],[55006,55014],[55015,55024],[55025,55032],[55033,55035],[55036,55045],[55046,55055],[55061,55065],[55066,55077],[55078,55081],[55082,55087],[55088,55097],[55098,55104],[55105,55109],[55110,55113],[55114,55118],[55118,55119],[55120,55124],[55125,55132],[55133,55136],[55137,55141],[55142,55150],[55151,55153],[55154,55159],[55165,55175],[55176,55181],[55182,55185],[55186,55197],[55198,55207],[55208,55219],[55220,55227],[55228,55229],[55230,55240],[55241,55250],[55250,55251],[55260,55266],[55267,55272],[55273,55288],[55289,55296],[55297,55310],[55311,55312],[55326,55335],[55348,55357],[55358,55362],[55363,55376],[55376,55377],[55377,55382],[55383,55409],[55409,55410],[55411,55432],[55433,55441],[55441,55442],[55443,55444],[55461,55466],[55466,55467],[55467,55480],[55480,55481],[55481,55489],[55489,55491],[55504,55505],[55519,55528],[55541,55550],[55551,55555],[55556,55566],[55566,55567],[55567,55572],[55573,55599],[55599,55600],[55601,55622],[55623,55631],[55631,55632],[55633,55634],[55651,55656],[55656,55657],[55657,55667],[55667,55668],[55668,55676],[55676,55678],[55691,55692],[55700,55701],[55711,55726],[55727,55735],[55736,55737],[55738,55741],[55742,55757],[55757,55760],[55767,55775],[55775,55776],[55776,55789],[55789,55790],[55790,55793],[55794,55820],[55820,55821],[55822,55843],[55843,55845],[55846,55847],[55861,55870],[55883,55889],[55890,55894],[55895,55902],[55902,55903],[55903,55908],[55909,55927],[55927,55928],[55929,55950],[55951,55956],[55956,55957],[55958,55959],[55976,55980],[55981,55993],[55994,55995],[55996,55999],[56000,56004],[56004,56005],[56005,56010],[56010,56011],[56011,56021],[56021,56025],[56042,56044],[56045,56046],[56046,56058],[56058,56059],[56059,56065],[56065,56066],[56066,56074],[56074,56076],[56077,56078],[56099,56104],[56104,56105],[56105,56110],[56110,56113],[56130,56131],[56144,56145],[56153,56156],[56160,56163],[56163,56164],[56165,56168],[56168,56169],[56169,56172],[56173,56180],[56186,56194],[56195,56206],[56207,56210],[56211,56213],[56214,56219],[56220,56222],[56223,56226],[56227,56236],[56237,56243],[56243,56244],[56245,56249],[56250,56255],[56256,56259],[56260,56267],[56268,56273],[56274,56283],[56289,56296],[56296,56297],[56298,56301],[56302,56311],[56312,56320],[56321,56324],[56325,56327],[56328,56333],[56334,56336],[56337,56338],[56339,56347],[56348,56358],[56359,56361],[56362,56367],[56368,56370],[56371,56375],[56376,56379],[56380,56388],[56394,56405],[56406,56410],[56411,56415],[56416,56426],[56427,56434],[56435,56437],[56438,56441],[56441,56442],[56442,56445],[56445,56446],[56455,56465],[56466,56476],[56477,56478],[56479,56490],[56490,56491],[56491,56510],[56510,56513],[56520,56533],[56534,56536],[56537,56538],[56539,56549],[56549,56550],[56550,56566],[56566,56569],[56576,56585],[56586,56592],[56593,56594],[56595,56596],[56596,56605],[56605,56606],[56607,56609],[56609,56610],[56610,56622],[56622,56624],[56624,56632],[56632,56634],[56635,56638],[56638,56640],[56647,56649],[56650,56657],[56658,56661],[56662,56665],[56666,56673],[56674,56677],[56684,56690],[56690,56691],[56691,56710],[56710,56711],[56711,56714],[56715,56723],[56724,56725],[56740,56741],[56741,56746],[56746,56748],[56763,56764],[56764,56769],[56769,56771],[56771,56773],[56788,56789],[56789,56794],[56794,56796],[56796,56797],[56798,56801],[56808,56810],[56811,56818],[56819,56825],[56826,56833],[56840,56846],[56846,56847],[56847,56869],[56869,56870],[56870,56873],[56874,56882],[56883,56884],[56899,56900],[56900,56928],[56928,56930],[56945,56946],[56946,56978],[56978,56980],[56995,56996],[56996,57028],[57028,57029],[57030,57033],[57040,57068],[57069,57073],[57074,57075],[57076,57079],[57080,57108],[57108,57109],[57109,57110],[57111,57112],[57113,57117],[57117,57119],[57126,57130],[57130,57131],[57131,57135],[57135,57136],[57136,57142],[57142,57144],[57250,57252],[57291,57299],[57300,57301],[57301,57302],[57302,57303],[57304,57309],[57312,57315],[57315,57316],[57317,57325],[57326,57330],[57331,57337],[57343,57345],[57346,57348],[57349,57356],[57357,57360],[57361,57369],[57370,57375],[57376,57380],[57381,57383],[57384,57392],[57393,57397],[57398,57404],[57405,57410],[57411,57413],[57414,57422],[57423,57424],[57424,57425],[57425,57426],[57427,57437],[57443,57452],[57453,57458],[57458,57459],[57468,57486],[57487,57501],[57502,57503],[57504,57509],[57516,57529],[57530,57543],[57544,57545],[57546,57551],[57558,57570],[57571,57583],[57584,57585],[57586,57598],[57598,57599],[57599,57605],[57605,57607],[57622,57623],[57623,57635],[57635,57636],[57636,57641],[57641,57642],[57657,57658],[57658,57671],[57671,57672],[57672,57676],[57676,57677],[57692,57693],[57693,57698],[57698,57701],[57708,57713],[57714,57724],[57725,57731],[57732,57733],[57734,57749],[57749,57750],[57750,57759],[57759,57761],[57776,57777],[57777,57792],[57792,57793],[57793,57797],[57797,57798],[57813,57814],[57814,57830],[57830,57831],[57831,57844],[57844,57845],[57860,57861],[57861,57876],[57876,57877],[57877,57889],[57889,57890],[57905,57906],[57906,57924],[57924,57925],[57925,57928],[57929,57952],[57952,57955],[57970,57971],[57971,57986],[57986,57991],[57992,58006],[58006,58007],[58022,58023],[58023,58029],[58029,58032],[58039,58045],[58045,58046],[58046,58051],[58051,58054],[58061,58067],[58067,58068],[58068,58084],[58084,58085],[58085,58089],[58089,58090],[58090,58099],[58099,58100],[58101,58109],[58109,58110],[58110,58114],[58114,58116],[58124,58131],[58131,58132],[58132,58142],[58142,58145],[58145,58160],[58160,58161],[58161,58164],[58165,58171],[58171,58173],[58174,58175],[58186,58195],[58206,58212],[58213,58217],[58218,58221],[58221,58223],[58224,58225],[58240,58246],[58246,58247],[58247,58255],[58255,58256],[58256,58257],[58257,58258],[58259,58267],[58267,58268],[58268,58275],[58275,58277],[58288,58289],[58296,58299],[58400,58402],[58403,58411],[58412,58413],[58413,58414],[58415,58427],[58428,58429],[58429,58430],[58430,58431],[58432,58437],[58438,58440],[58441,58444],[58452,58464],[58465,58466],[58466,58467],[58467,58468],[58469,58474],[58475,58478],[58479,58481],[58482,58486],[58487,58498],[58499,58502],[58503,58508],[58509,58518],[58519,58524],[58525,58528],[58529,58533],[58534,58544],[58545,58547],[58555,58559],[58560,58569],[58570,58574],[58575,58578],[58579,58586],[58587,58589],[58590,58596],[58597,58606],[58607,58609],[58610,58622],[58623,58634],[58635,58637],[58638,58639],[58640,58648],[58648,58649],[58650,58658],[58666,58675],[58676,58682],[58682,58683],[58684,58696],[58697,58698],[58698,58699],[58699,58700],[58701,58703],[58704,58712],[58713,58717],[58718,58725],[58726,58729],[58730,58737],[58738,58746],[58747,58748],[58749,58756],[58757,58761],[58762,58766],[58774,58781],[58782,58786],[58787,58792],[58793,58800],[58801,58809],[58809,58810],[58813,58816],[58816,58817],[58818,58829],[58830,58834],[58835,58840],[58841,58842],[58842,58843],[58843,58844],[58845,58855],[58863,58869],[58870,58877],[58878,58886],[58887,58889],[58890,58895],[58896,58906],[58906,58907],[58908,58911],[58912,58915],[58916,58923],[58924,58932],[58933,58941],[58941,58942],[58951,58952],[58953,58965],[58965,58966],[58967,58976],[58977,58980],[58981,58985],[58986,58992],[58993,59002],[59003,59012],[59013,59017],[59018,59020],[59021,59025],[59025,59026],[59035,59036],[59037,59046],[59047,59053],[59054,59064],[59064,59065],[59066,59070],[59071,59079],[59080,59083],[59084,59088],[59089,59091],[59092,59096],[59097,59099],[59100,59104],[59105,59110],[59111,59115],[59116,59118],[59119,59121],[59122,59125],[59126,59133],[59143,59150],[59151,59157],[59158,59160],[59161,59169],[59170,59174],[59175,59181],[59181,59182],[59191,59192],[59193,59199],[59200,59206],[59207,59209],[59210,59213],[59214,59217],[59218,59226],[59227,59232],[59233,59241],[59241,59242],[59245,59248],[59248,59249],[59250,59251],[59251,59252],[59252,59253],[59254,59261],[59269,59277],[59278,59281],[59282,59284],[59285,59290],[59291,59293],[59294,59297],[59298,59305],[59306,59313],[59314,59316],[59317,59326],[59327,59329],[59330,59334],[59335,59338],[59338,59339],[59340,59343],[59344,59351],[59352,59354],[59355,59356],[59356,59357],[59357,59358],[59359,59367],[59375,59377],[59378,59380],[59381,59386],[59387,59389],[59390,59391],[59391,59392],[59392,59393],[59394,59400],[59401,59404],[59405,59407],[59408,59416],[59417,59422],[59423,59436],[59437,59439],[59440,59450],[59451,59452],[59452,59453],[59453,59454],[59455,59463],[59463,59464],[59465,59468],[59469,59473],[59481,59485],[59486,59488],[59489,59490],[59490,59491],[59491,59492],[59493,59500],[59501,59508],[59509,59511],[59512,59514],[59515,59520],[59521,59525],[59526,59530],[59531,59534],[59535,59538],[59539,59545],[59546,59549],[59550,59560],[59561,59566],[59567,59574],[59582,59584],[59585,59588],[59589,59596],[59597,59605],[59606,59607],[59607,59608],[59608,59609],[59610,59615],[59615,59616],[59617,59620],[59621,59630],[59631,59640],[59641,59651],[59652,59654],[59655,59663],[59664,59670],[59671,59676],[59684,59694],[59695,59698],[59699,59706],[59707,59714],[59714,59715],[59716,59726],[59726,59727],[59728,59737],[59738,59753],[59754,59765],[59766,59779],[59780,59782],[59790,59793],[59794,59797],[59798,59802],[59802,59803],[59803,59806],[59806,59807],[59807,59815],[59815,59816],[59816,59824],[59824,59825],[59834,59835],[59835,59836],[59836,59837],[59838,59846],[59847,59854],[59855,59861],[59862,59863],[59864,59869],[59870,59876],[59877,59879],[59880,59888],[59889,59896],[59897,59898],[59898,59903],[59904,59906],[59907,59910],[59911,59913],[59914,59917],[59917,59918],[59919,59921],[59922,59930],[59931,59932],[59932,59933],[59933,59934],[59942,59947],[59948,59961],[59962,59964],[59965,59966],[59967,59971],[59972,59979],[59980,59986],[59987,59988],[59988,59993],[59994,59996],[59997,60001],[60002,60004],[60005,60012],[60013,60022],[60022,60023],[60024,60026],[60027,60028],[60028,60029],[60029,60030],[60031,60039],[60040,60042],[60050,60061],[60061,60062],[60063,60065],[60066,60068],[60069,60078],[60079,60090],[60091,60093],[60094,60098],[60099,60102],[60103,60111],[60112,60118],[60119,60122],[60123,60126],[60127,60131],[60131,60132],[60143,60158],[60159,60165],[60166,60167],[60168,60183],[60183,60184],[60184,60191],[60191,60192],[60201,60210],[60211,60220],[60221,60222],[60223,60226],[60227,60253],[60253,60254],[60254,60260],[60260,60262],[60266,60271],[60271,60272],[60273,60274],[60274,60275],[60275,60276],[60277,60288],[60297,60306],[60309,60324],[60325,60329],[60330,60333],[60334,60336],[60337,60340],[60341,60356],[60357,60366],[60367,60369],[60370,60376],[60377,60384],[60385,60387],[60388,60394],[60402,60409],[60410,60413],[60414,60415],[60416,60426],[60427,60434],[60434,60435],[60436,60439],[60440,60447],[60448,60450],[60451,60454],[60455,60470],[60471,60474],[60475,60483],[60484,60486],[60487,60488],[60489,60497],[60505,60511],[60512,60514],[60515,60518],[60519,60520],[60520,60521],[60521,60522],[60523,60530],[60530,60531],[60532,60541],[60541,60542],[60543,60545],[60546,60548],[60549,60558],[60559,60563],[60564,60574],[60575,60579],[60580,60585],[60586,60591],[60592,60594],[60595,60598],[60599,60604],[60605,60612],[60620,60624],[60625,60628],[60629,60634],[60635,60638],[60639,60647],[60648,60654],[60655,60658],[60659,60662],[60663,60667],[60667,60668],[60669,60671],[60672,60675],[60676,60677],[60677,60678],[60678,60679],[60680,60687],[60688,60692],[60693,60695],[60696,60702],[60703,60705],[60706,60711],[60712,60714],[60715,60720],[60721,60727],[60727,60728],[60739,60748],[60749,60758],[60759,60760],[60761,60764],[60765,60791],[60791,60794],[60804,60819],[60820,60833],[60834,60835],[60836,60841],[60850,60859],[60859,60860],[60860,60867],[60867,60868],[60868,60881],[60881,60883],[60893,60900],[60901,60902],[60902,60903],[60903,60904],[60905,60911],[60912,60914],[60915,60922],[60923,60925],[60926,60929],[60930,60945],[60946,60955],[60955,60956],[61071,61073],[61112,61124],[61125,61126],[61126,61127],[61127,61128],[61129,61134],[61135,61137],[61138,61141],[61150,61151],[61152,61161],[61161,61162],[61169,61178],[61179,61183],[61184,61185],[61186,61189],[61190,61197],[61198,61201],[61202,61206],[61207,61214],[61214,61215],[61224,61225],[61226,61236],[61236,61237],[61244,61253],[61254,61258],[61259,61262],[61263,61270],[61271,61274],[61275,61282],[61283,61288],[61288,61289],[61298,61299],[61300,61311],[61311,61312],[61319,61328],[61329,61333],[61334,61337],[61338,61345],[61346,61348],[61349,61354],[61355,61358],[61359,61365],[61365,61366],[61375,61376],[61377,61384],[61384,61385],[61391,61400],[61401,61405],[61406,61409],[61410,61417],[61418,61421],[61422,61427],[61428,61431],[61431,61432],[61441,61442],[61443,61455],[61455,61456],[61463,61472],[61473,61477],[61478,61481],[61482,61489],[61490,61493],[61494,61498],[61499,61509],[61509,61510],[61512,61517],[61517,61518],[61519,61520],[61520,61521],[61521,61522],[61523,61530],[61531,61539],[61547,61550],[61551,61559],[61560,61562],[61563,61564],[61564,61565],[61565,61566],[61567,61575],[61576,61578],[61579,61580],[61581,61588],[61589,61596],[61597,61600],[61601,61604],[61605,61612],[61613,61617],[61618,61619],[61620,61625],[61626,61628],[61629,61637],[61637,61638],[61639,61640],[61640,61641],[61641,61642],[61650,61658],[61659,61663],[61664,61671],[61672,61674],[61675,61685],[61686,61695],[61696,61699],[61700,61706],[61707,61708],[61708,61709],[61709,61710],[61711,61719],[61720,61723],[61724,61732],[61733,61740],[61741,61754],[61762,61768],[61769,61772],[61773,61782],[61783,61788],[61789,61795],[61795,61796],[61797,61799],[61800,61803],[61804,61806],[61807,61810],[61811,61812],[61812,61813],[61813,61814],[61815,61823],[61824,61829],[61830,61832],[61833,61842],[61843,61852],[61852,61853],[61854,61857],[61858,61859],[61859,61860],[61860,61861],[61862,61869],[61877,61881],[61882,61890],[61891,61895],[61896,61900],[61901,61910],[61911,61919],[61919,61920],[61931,61940],[61941,61950],[61951,61952],[61953,61958],[61967,61971],[61972,61983],[61984,61985],[61986,61991],[61991,61992],[61993,61995],[61996,62008],[62017,62026],[62026,62027],[62027,62035],[62035,62036],[62036,62047],[62047,62049],[62059,62062],[62063,62081],[62081,62082],[62082,62086],[62086,62087],[62088,62094],[62095,62097],[62098,62102],[62103,62105],[62106,62110],[62111,62115],[62116,62119],[62120,62126],[62126,62127],[62129,62134],[62134,62135],[62136,62137],[62137,62138],[62138,62139],[62140,62148],[62156,62159],[62160,62169],[62170,62179],[62180,62190],[62191,62192],[62193,62201],[62202,62204],[62205,62214],[62215,62222],[62223,62227],[62228,62237],[62238,62245],[62246,62249],[62257,62260],[62261,62267],[62267,62268],[62269,62278],[62279,62291],[62292,62305],[62306,62308],[62309,62312],[62313,62317],[62317,62318],[62318,62321],[62321,62322],[62322,62330],[62330,62331],[62331,62343],[62344,62347],[62355,62359],[62359,62360],[62360,62363],[62363,62364],[62364,62372],[62372,62373],[62373,62386],[62386,62387],[62388,62391],[62392,62399],[62400,62410],[62411,62415],[62416,62419],[62420,62429],[62430,62433],[62434,62436],[62437,62441],[62442,62444],[62445,62449],[62457,62461],[62462,62466],[62467,62470],[62471,62476],[62477,62481],[62482,62484],[62485,62488],[62489,62496],[62496,62497],[62508,62517],[62518,62527],[62528,62529],[62530,62535],[62544,62563],[62564,62566],[62567,62568],[62569,62570],[62570,62589],[62589,62590],[62591,62600],[62600,62601],[62601,62608],[62608,62611],[62620,62630],[62631,62634],[62635,62636],[62637,62647],[62647,62648],[62648,62656],[62656,62657],[62657,62661],[62661,62663],[62672,62674],[62674,62675],[62675,62679],[62679,62680],[62680,62683],[62683,62685],[62688,62693],[62693,62694],[62695,62696],[62696,62697],[62697,62698],[62699,62706],[62707,62712],[62713,62723],[62731,62732],[62732,62733],[62733,62734],[62735,62743],[62744,62747],[62748,62751],[62752,62757],[62758,62760],[62761,62763],[62764,62773],[62774,62780],[62780,62781],[62782,62791],[62792,62795],[62796,62802],[62803,62806],[62807,62810],[62811,62818],[62819,62821],[62822,62825],[62826,62832],[62840,62842],[62843,62848],[62849,62850],[62851,62858],[62858,62860],[62861,62866],[62866,62867],[62868,62871],[62872,62879],[62880,62885],[62886,62887],[62888,62898],[62899,62906],[62907,62911],[62912,62914],[62915,62921],[62922,62928],[62929,62932],[62933,62940],[62941,62947],[62947,62948],[62959,62968],[62969,62978],[62979,62980],[62981,62986],[62995,63001],[63002,63011],[63012,63013],[63014,63019],[63028,63037],[63037,63038],[63038,63050],[63050,63052],[63052,63057],[63057,63059],[63060,63069],[63069,63071],[63080,63083],[63092,63101],[63102,63111],[63112,63113],[63114,63119],[63128,63134],[63135,63147],[63148,63149],[63150,63159],[63159,63160],[63160,63172],[63172,63174],[63174,63179],[63179,63182],[63192,63198],[63199,63203],[63204,63208],[63209,63211],[63212,63219],[63220,63228],[63229,63233],[63234,63237],[63238,63240],[63241,63247],[63248,63255],[63255,63256],[63257,63263],[63264,63266],[63267,63272],[63273,63280],[63281,63285],[63286,63288],[63289,63293],[63301,63312],[63312,63313],[63315,63320],[63320,63321],[63322,63323],[63323,63324],[63324,63325],[63326,63333],[63334,63339],[63340,63344],[63352,63355],[63356,63359],[63360,63367],[63368,63370],[63371,63379],[63380,63382],[63383,63384],[63385,63395],[63396,63400],[63401,63403],[63404,63405],[63405,63406],[63406,63407],[63408,63414],[63415,63418],[63419,63420],[63421,63431],[63432,63433],[63433,63434],[63434,63435],[63436,63443],[63444,63446],[63447,63454],[63462,63465],[63466,63471],[63472,63476],[63476,63477],[63592,63594],[63633,63645],[63646,63647],[63647,63648],[63648,63649],[63650,63655],[63656,63658],[63659,63662],[63674,63683],[63684,63693],[63694,63695],[63696,63701],[63711,63720],[63720,63721],[63721,63733],[63733,63734],[63734,63746],[63746,63747],[63747,63754],[63755,63756],[63757,63769],[63769,63770],[63770,63778],[63778,63780],[63790,63793],[63794,63797],[63798,63802],[63803,63809],[63810,63817],[63818,63821],[63822,63830],[63831,63836],[63837,63849],[63849,63850],[63862,63871],[63872,63881],[63882,63883],[63884,63889],[63899,63908],[63908,63909],[63909,63917],[63917,63918],[63918,63930],[63930,63931],[63931,63938],[63938,63940],[63950,63959],[63959,63960],[63960,63970],[63970,63971],[63971,63983],[63983,63984],[63984,63991],[63991,63993],[64003,64008],[64009,64022],[64023,64027],[64028,64031],[64032,64036],[64037,64042],[64043,64045],[64046,64049],[64050,64063],[64064,64072],[64073,64077],[64078,64080],[64081,64084],[64085,64088],[64088,64089],[64091,64096],[64096,64097],[64098,64099],[64099,64100],[64100,64101],[64102,64109],[64110,64117],[64126,64131],[64132,64137],[64138,64139],[64139,64140],[64140,64141],[64142,64150],[64151,64155],[64156,64158],[64159,64167],[64168,64176],[64177,64178],[64178,64179],[64179,64180],[64181,64188],[64189,64191],[64192,64197],[64198,64200],[64201,64210],[64211,64216],[64217,64218],[64219,64225],[64226,64230],[64238,64243],[64244,64246],[64247,64256],[64257,64259],[64260,64262],[64263,64266],[64267,64275],[64276,64278],[64279,64286],[64287,64289],[64290,64292],[64293,64296],[64297,64307],[64308,64315],[64315,64316],[64317,64323],[64324,64334],[64335,64337],[64345,64353],[64354,64357],[64358,64360],[64361,64366],[64367,64369],[64370,64373],[64374,64385],[64386,64395],[64396,64400],[64401,64404],[64405,64409],[64410,64411],[64412,64420],[64421,64424],[64425,64429],[64429,64430],[64431,64433],[64434,64438],[64439,64441],[64442,64446],[64454,64459],[64460,64464],[64465,64467],[64468,64470],[64471,64474],[64475,64482],[64483,64490],[64491,64497],[64498,64500],[64501,64509],[64510,64514],[64515,64521],[64521,64522],[64523,64527],[64528,64533],[64533,64534],[64535,64540],[64541,64546],[64547,64551],[64559,64564],[64565,64569],[64570,64573],[64574,64580],[64581,64587],[64588,64590],[64591,64594],[64595,64597],[64598,64601],[64602,64610],[64611,64613],[64614,64622],[64623,64630],[64631,64638],[64638,64639],[64640,64643],[64644,64645],[64645,64646],[64646,64647],[64648,64655],[64656,64659],[64667,64672],[64673,64676],[64677,64683],[64684,64686],[64687,64692],[64693,64700],[64701,64708],[64708,64709],[64710,64713],[64714,64718],[64719,64723],[64724,64727],[64728,64736],[64737,64741],[64742,64750],[64751,64760],[64761,64763],[64764,64768],[64776,64780],[64781,64785],[64786,64792],[64793,64795],[64796,64799],[64800,64802],[64803,64806],[64807,64814],[64815,64822],[64822,64823],[64824,64828],[64829,64837],[64838,64841],[64842,64850],[64851,64853],[64854,64858],[64859,64862],[64863,64872],[64873,64877],[64885,64889],[64890,64892],[64893,64895],[64896,64900],[64901,64903],[64904,64911],[64912,64914],[64914,64915],[64916,64917],[64917,64918],[64918,64919],[64920,64928],[64929,64932],[64933,64935],[64936,64940],[64941,64946],[64947,64949],[64950,64953],[64954,64960],[64961,64963],[64964,64972],[64973,64980],[64981,64988],[64996,65001],[65002,65005],[65006,65025],[65026,65035],[65035,65036],[65048,65057],[65058,65067],[65068,65069],[65070,65075],[65085,65104],[65105,65119],[65120,65121],[65122,65127],[65137,65146],[65146,65147],[65147,65162],[65162,65163],[65163,65177],[65177,65179],[65189,65198],[65198,65199],[65199,65215],[65215,65218],[65228,65237],[65237,65238],[65238,65255],[65255,65258],[65262,65267],[65267,65268],[65269,65270],[65270,65271],[65271,65272],[65273,65280],[65281,65289],[65298,65301],[65302,65305],[65306,65311],[65312,65314],[65315,65316],[65316,65317],[65317,65318],[65319,65326],[65327,65337],[65338,65340],[65341,65348],[65349,65364],[65364,65366],[65367,65375],[65376,65379],[65380,65387],[65388,65390],[65391,65393],[65401,65407],[65408,65410],[65411,65413],[65414,65421],[65422,65428],[65429,65431],[65432,65434],[65435,65442],[65443,65461],[65461,65463],[65464,65466],[65467,65475],[65476,65481],[65482,65485],[65486,65496],[65504,65511],[65511,65512],[65513,65516],[65517,65528],[65529,65536],[65537,65540],[65541,65548],[65549,65551],[65552,65554],[65555,65562],[65563,65573],[65574,65577],[65578,65583],[65584,65589],[65590,65592],[65593,65594],[65594,65595],[65595,65596],[65597,65605],[65613,65617],[65618,65625],[65626,65630],[65631,65635],[65636,65638],[65639,65640],[65641,65648],[65649,65660],[65661,65670],[65671,65675],[65676,65678],[65679,65682],[65682,65683],[65683,65686],[65687,65698],[65698,65699],[65701,65706],[65706,65707],[65708,65717],[65718,65719],[65719,65720],[65720,65721],[65722,65730],[65739,65757],[65762,65772],[65773,65775],[65776,65777],[65777,65778],[65778,65779],[65780,65787],[65788,65795],[65796,65798],[65799,65808],[65809,65812],[65813,65821],[65822,65833],[65834,65836],[65837,65840],[65848,65850],[65851,65858],[65859,65864],[65864,65865],[65877,65895],[65896,65905],[65906,65907],[65908,65913],[65923,65939],[65940,65943],[65944,65945],[65946,65955],[65955,65956],[65956,65962],[65962,65963],[65963,65966],[65967,65984],[65984,65985],[65985,65989],[65989,65990],[65991,65993],[66003,66019],[66020,66023],[66024,66025],[66026,66035],[66035,66036],[66036,66042],[66042,66043],[66043,66046],[66047,66064],[66064,66065],[66065,66069],[66069,66072],[66082,66098],[66099,66102],[66103,66104],[66105,66114],[66114,66115],[66115,66121],[66121,66122],[66122,66125],[66126,66143],[66143,66144],[66144,66148],[66148,66151],[66161,66163],[66164,66168],[66169,66174],[66175,66178],[66179,66188],[66189,66192],[66193,66195],[66205,66208],[66208,66209],[66209,66216],[66216,66219],[66229,66232],[66232,66233],[66233,66240],[66240,66243],[66253,66256],[66256,66257],[66257,66264],[66264,66267],[66277,66281],[66282,66284],[66285,66293],[66294,66296],[66297,66302],[66303,66314],[66315,66317],[66318,66324],[66325,66334],[66335,66343],[66344,66355],[66356,66359],[66360,66370],[66371,66372],[66372,66373],[66373,66374],[66382,66390],[66391,66404],[66405,66407],[66408,66411],[66412,66427],[66428,66436],[66436,66437],[66548,66550],[66588,66600],[66601,66602],[66602,66603],[66603,66604],[66605,66610],[66611,66613],[66614,66617],[66626,66629],[66630,66633],[66634,66640],[66641,66642],[66643,66646],[66647,66649],[66650,66660],[66661,66670],[66671,66673],[66674,66681],[66681,66682],[66683,66688],[66689,66692],[66693,66699],[66700,66702],[66703,66705],[66706,66714],[66715,66717],[66718,66725],[66725,66726],[66734,66737],[66738,66743],[66744,66746],[66747,66749],[66750,66757],[66757,66758],[66769,66787],[66788,66797],[66798,66799],[66800,66805],[66815,66836],[66837,66840],[66841,66842],[66843,66852],[66852,66853],[66853,66865],[66865,66868],[66877,66880],[66881,66882],[66882,66898],[66899,66901],[66901,66902],[66903,66906],[66906,66907],[66908,66909],[66922,66924],[66925,66930],[66931,66937],[66937,66938],[66951,66957],[66957,66958],[66958,66961],[66961,66962],[66962,66969],[66969,66970],[66970,66972],[66972,66973],[66973,66983],[66983,66987],[67000,67002],[67003,67004],[67004,67006],[67006,67007],[67007,67015],[67015,67018],[67019,67020],[67037,67039],[67040,67042],[67043,67046],[67046,67047],[67048,67051],[67052,67054],[67055,67065],[67066,67069],[67070,67072],[67073,67075],[67076,67085],[67085,67086],[67103,67105],[67106,67107],[67107,67109],[67109,67110],[67110,67122],[67122,67124],[67125,67127],[67128,67132],[67132,67133],[67134,67135],[67156,67158],[67158,67159],[67159,67171],[67171,67174],[67174,67189],[67189,67192],[67209,67210],[67223,67224],[67225,67229],[67230,67231],[67248,67250],[67250,67251],[67251,67256],[67256,67259],[67272,67273],[67282,67283],[67286,67291],[67291,67292],[67293,67303],[67304,67305],[67305,67306],[67306,67307],[67308,67316],[67324,67343],[67344,67354],[67355,67357],[67358,67359],[67359,67360],[67360,67361],[67362,67369],[67370,67377],[67378,67380],[67381,67393],[67394,67405],[67406,67410],[67411,67417],[67418,67423],[67423,67424],[67436,67455],[67456,67465],[67466,67467],[67468,67473],[67483,67497],[67498,67512],[67513,67514],[67515,67524],[67524,67525],[67525,67532],[67532,67533],[67550,67553],[67554,67571],[67571,67573],[67573,67576],[67576,67577],[67577,67583],[67583,67584],[67584,67587],[67587,67589],[67590,67592],[67592,67594],[67611,67615],[67615,67616],[67617,67621],[67621,67622],[67623,67627],[67627,67629],[67639,67646],[67647,67648],[67649,67659],[67660,67662],[67663,67664],[67665,67671],[67672,67676],[67677,67684],[67685,67690],[67691,67693],[67694,67696],[67697,67698],[67699,67703],[67704,67713],[67714,67721],[67722,67725],[67726,67729],[67730,67734],[67735,67736],[67744,67749],[67750,67752],[67753,67761],[67761,67762],[67763,67766],[67767,67770],[67771,67778],[67779,67782],[67783,67790],[67791,67794],[67795,67802],[67803,67805],[67806,67813],[67814,67828],[67829,67831],[67832,67837],[67838,67840],[67841,67844],[67852,67875],[67875,67876],[67888,67890],[67891,67895],[67896,67900],[67901,67904],[67905,67912],[67913,67918],[67919,67922],[67923,67925],[67926,67936],[67945,67947],[67948,67951],[67952,67955],[67956,67960],[67961,67972],[67973,67978],[67979,67980],[67981,67984],[67993,68007],[68007,68008],[68008,68025],[68025,68026],[68026,68030],[68030,68032],[68041,68043],[68044,68048],[68049,68052],[68053,68056],[68057,68064],[68065,68067],[68068,68076],[68085,68099],[68099,68100],[68100,68107],[68107,68110],[68119,68121],[68122,68125],[68126,68133],[68134,68144],[68145,68148],[68149,68151],[68152,68154],[68155,68164],[68164,68165],[68174,68176],[68177,68178],[68178,68192],[68192,68193],[68193,68205],[68205,68207],[68208,68210],[68211,68215],[68215,68216],[68217,68218],[68231,68245],[68245,68246],[68246,68258],[68258,68261],[68261,68276],[68276,68279],[68288,68289],[68298,68300],[68301,68304],[68305,68309],[68310,68312],[68313,68316],[68317,68320],[68321,68322],[68322,68323],[68323,68324],[68325,68332],[68341,68350],[68351,68360],[68361,68362],[68363,68377],[68377,68378],[68378,68388],[68388,68391],[68401,68415],[68419,68434],[68435,68438],[68439,68447],[68448,68450],[68451,68453],[68454,68465],[68465,68466],[68467,68474],[68475,68482],[68483,68486],[68487,68489],[68490,68497],[68498,68500],[68508,68511],[68512,68516],[68517,68519],[68520,68527],[68528,68544],[68544,68546],[68547,68551],[68552,68559],[68560,68566],[68567,68569],[68570,68579],[68579,68580],[68591,68593],[68594,68596],[68596,68610],[68610,68611],[68611,68622],[68622,68625],[68626,68627],[68640,68654],[68654,68655],[68655,68661],[68661,68664],[68673,68674],[68684,68687],[68688,68691],[68692,68696],[68697,68704],[68705,68713],[68714,68724],[68725,68727],[68728,68731],[68732,68759],[68759,68761],[68762,68768],[68769,68771],[68772,68777],[68785,68786],[68787,68794],[68795,68802],[68803,68807],[68808,68811],[68812,68819],[68820,68822],[68823,68830],[68831,68845],[68845,68846],[68855,68856],[68857,68865],[68866,68871],[68872,68878],[68879,68886],[68887,68896],[68897,68900],[68901,68903],[68904,68908],[68909,68911],[68912,68916],[68917,68920],[68921,68927],[68928,68930],[68931,68932],[68933,68941],[68942,68947],[68948,68955],[68955,68956],[69067,69069],[69105,69117],[69118,69119],[69119,69120],[69120,69121],[69122,69127],[69128,69130],[69131,69134],[69143,69162],[69163,69172],[69173,69174],[69175,69180],[69189,69203],[69204,69218],[69219,69220],[69221,69230],[69230,69231],[69231,69238],[69238,69239],[69255,69258],[69259,69276],[69276,69278],[69278,69281],[69281,69282],[69282,69288],[69288,69289],[69289,69292],[69292,69294],[69295,69297],[69297,69299],[69315,69318],[69319,69336],[69336,69338],[69338,69350],[69350,69352],[69353,69357],[69357,69359],[69375,69379],[69379,69380],[69381,69385],[69385,69387],[69396,69399],[69400,69403],[69404,69411],[69412,69414],[69415,69425],[69426,69432],[69432,69433],[69434,69439],[69440,69444],[69445,69447],[69448,69453],[69454,69456],[69457,69460],[69461,69464],[69465,69472],[69472,69474],[69475,69482],[69483,69487],[69494,69508],[69508,69509],[69510,69514],[69515,69521],[69522,69525],[69526,69528],[69529,69533],[69534,69536],[69537,69541],[69542,69544],[69545,69552],[69553,69563],[69564,69569],[69570,69572],[69573,69576],[69577,69585],[69586,69593],[69593,69594],[69604,69618],[69619,69633],[69634,69635],[69636,69645],[69645,69646],[69646,69653],[69653,69654],[69670,69673],[69674,69691],[69691,69693],[69693,69696],[69696,69697],[69697,69703],[69703,69704],[69704,69707],[69707,69709],[69710,69712],[69712,69714],[69730,69734],[69734,69735],[69736,69739],[69740,69748],[69748,69750],[69750,69753],[69753,69754],[69754,69760],[69760,69761],[69761,69763],[69763,69766],[69767,69771],[69771,69773],[69782,69791],[69792,69801],[69802,69803],[69804,69818],[69818,69819],[69819,69829],[69829,69832],[69840,69848],[69849,69860],[69861,69862],[69863,69864],[69864,69872],[69872,69873],[69874,69883],[69883,69884],[69884,69896],[69896,69897],[69909,69918],[69918,69919],[69919,69933],[69933,69935],[69944,69946],[69947,69949],[69950,69955],[69956,69965],[69966,69968],[69969,69971],[69972,69976],[69977,69979],[69980,69985],[69986,69988],[69989,69992],[69993,70003],[70004,70006],[70007,70008],[70009,70016],[70017,70024],[70025,70039],[70046,70053],[70054,70060],[70061,70063],[70064,70068],[70069,70072],[70073,70075],[70075,70076],[70077,70085],[70086,70089],[70090,70097],[70098,70104],[70105,70107],[70108,70117],[70117,70118],[70119,70122],[70123,70126],[70127,70137],[70138,70145],[70152,70154],[70155,70169],[70170,70192],[70193,70202],[70203,70205],[70206,70209],[70210,70218],[70219,70221],[70222,70228],[70229,70236],[70237,70239],[70240,70247],[70254,70262],[70262,70263],[70264,70268],[70269,70271],[70272,70279],[70280,70290],[70290,70291],[70292,70304],[70304,70305],[70306,70313],[70314,70316],[70317,70324],[70324,70325],[70335,70354],[70355,70364],[70365,70366],[70367,70372],[70381,70395],[70396,70410],[70411,70412],[70413,70422],[70422,70423],[70423,70430],[70430,70431],[70447,70450],[70451,70468],[70468,70470],[70470,70473],[70473,70474],[70474,70480],[70480,70481],[70481,70484],[70484,70486],[70487,70489],[70489,70491],[70492,70496],[70496,70497],[70498,70502],[70502,70503],[70519,70522],[70523,70545],[70545,70547],[70548,70549],[70573,70579],[70580,70584],[70585,70594],[70594,70595],[70595,70609],[70610,70617],[70617,70618],[70619,70620],[70643,70644],[70668,70674],[70675,70679],[70680,70689],[70689,70690],[70690,70704],[70705,70712],[70712,70713],[70714,70715],[70742,70748],[70748,70749],[70749,70752],[70752,70753],[70753,70760],[70760,70762],[70762,70765],[70766,70776],[70777,70779],[70780,70781],[70782,70783],[70814,70821],[70821,70822],[70822,70838],[70838,70842],[70865,70866],[70890,70896],[70897,70901],[70902,70908],[70908,70909],[70909,70923],[70924,70931],[70931,70932],[70933,70934],[70961,70963],[70964,70965],[70965,70972],[70972,70973],[70973,70985],[70985,70987],[70988,70990],[70991,70995],[70995,70996],[70997,70998],[71029,71036],[71036,71037],[71037,71049],[71049,71052],[71052,71067],[71067,71070],[71097,71098],[71121,71122],[71146,71152],[71153,71157],[71158,71165],[71165,71166],[71166,71180],[71181,71188],[71188,71189],[71190,71191],[71214,71215],[71233,71236],[71240,71243],[71243,71244],[71245,71246],[71246,71247],[71247,71248],[71249,71256],[71257,71270],[71277,71278],[71278,71279],[71279,71280],[71281,71289],[71290,71292],[71293,71300],[71301,71304],[71305,71311],[71312,71321],[71322,71335],[71336,71341],[71342,71344],[71345,71349],[71350,71355],[71356,71362],[71363,71365],[71366,71374],[71381,71387],[71387,71388],[71398,71413],[71414,71420],[71421,71422],[71423,71438],[71438,71439],[71439,71446],[71446,71447],[71455,71464],[71465,71474],[71475,71476],[71477,71480],[71481,71506],[71506,71507],[71507,71513],[71513,71515],[71524,71531],[71532,71534],[71535,71539],[71540,71545],[71546,71552],[71553,71561],[71562,71565],[71566,71568],[71569,71578],[71578,71579],[71580,71583],[71584,71592],[71592,71593],[71594,71596],[71597,71602],[71603,71605],[71606,71611],[71612,71619],[71620,71626],[71633,71643],[71644,71647],[71648,71655],[71656,71662],[71662,71663],[71664,71667],[71668,71674],[71675,71681],[71682,71686],[71687,71689],[71690,71696],[71697,71702],[71703,71713],[71713,71714],[71822,71824],[71863,71875],[71876,71877],[71877,71878],[71878,71879],[71880,71885],[71886,71888],[71889,71892],[71903,71918],[71919,71925],[71926,71927],[71928,71943],[71943,71944],[71944,71950],[71950,71952],[71969,71970],[71970,71983],[71983,71984],[71984,71988],[71988,71989],[72006,72007],[72007,72019],[72019,72020],[72020,72024],[72024,72025],[72042,72043],[72043,72060],[72060,72061],[72061,72065],[72065,72066],[72083,72084],[72084,72101],[72101,72102],[72102,72106],[72106,72107],[72124,72125],[72125,72130],[72130,72133],[72142,72151],[72152,72161],[72162,72163],[72164,72167],[72168,72193],[72193,72194],[72194,72200],[72200,72202],[72206,72211],[72211,72212],[72213,72220],[72221,72223],[72224,72225],[72225,72226],[72226,72227],[72228,72236],[72237,72240],[72241,72251],[72260,72267],[72268,72273],[72274,72277],[72278,72293],[72294,72295],[72295,72304],[72305,72309],[72310,72313],[72313,72314],[72315,72322],[72323,72327],[72328,72332],[72333,72336],[72337,72350],[72351,72357],[72365,72367],[72368,72370],[72371,72372],[72373,72378],[72379,72393],[72394,72396],[72397,72400],[72401,72405],[72405,72406],[72406,72409],[72409,72410],[72410,72418],[72418,72419],[72419,72431],[72432,72437],[72437,72438],[72439,72442],[72443,72450],[72451,72455],[72463,72467],[72467,72468],[72468,72471],[72471,72472],[72472,72480],[72480,72481],[72481,72493],[72494,72496],[72497,72501],[72502,72506],[72507,72509],[72510,72514],[72515,72522],[72523,72525],[72526,72533],[72534,72536],[72537,72540],[72541,72542],[72542,72543],[72543,72544],[72545,72553],[72554,72557],[72558,72561],[72569,72574],[72575,72587],[72588,72590],[72591,72594],[72595,72596],[72596,72597],[72597,72598],[72599,72607],[72608,72610],[72611,72613],[72614,72617],[72618,72625],[72626,72628],[72629,72638],[72639,72640],[72641,72647],[72648,72657],[72657,72658],[72659,72667],[72668,72671],[72672,72675],[72683,72685],[72686,72696],[72697,72699],[72700,72707],[72708,72710],[72711,72712],[72713,72720],[72721,72725],[72726,72733],[72734,72735],[72735,72736],[72736,72737],[72738,72746],[72747,72750],[72751,72761],[72762,72765],[72766,72772],[72773,72776],[72777,72785],[72793,72795],[72796,72798],[72799,72802],[72803,72811],[72812,72818],[72819,72823],[72824,72828],[72829,72832],[72833,72834],[72834,72835],[72835,72836],[72837,72845],[72846,72848],[72849,72852],[72853,72860],[72861,72863],[72864,72865],[72866,72872],[72873,72882],[72882,72883],[72894,72909],[72910,72916],[72917,72918],[72919,72934],[72934,72935],[72935,72941],[72941,72943],[72960,72961],[72961,72980],[72980,72981],[72981,72985],[72985,72986],[73003,73004],[73004,73009],[73009,73012],[73016,73019],[73019,73020],[73021,73022],[73022,73023],[73023,73024],[73025,73032],[73033,73042],[73043,73051],[73059,73067],[73068,73076],[73077,73087],[73088,73090],[73091,73095],[73096,73098],[73099,73104],[73105,73106],[73106,73107],[73107,73108],[73109,73119],[73120,73126],[73127,73129],[73130,73133],[73134,73140],[73141,73143],[73144,73155],[73156,73160],[73168,73171],[73172,73179],[73179,73181],[73182,73189],[73190,73193],[73194,73196],[73197,73199],[73200,73208],[73209,73212],[73213,73216],[73217,73219],[73220,73222],[73223,73228],[73229,73233],[73234,73236],[73237,73245],[73246,73254],[73255,73263],[73263,73264],[73265,73270],[73278,73288],[73289,73292],[73293,73299],[73300,73302],[73303,73314],[73315,73317],[73318,73320],[73321,73331],[73332,73339],[73340,73343],[73344,73350],[73351,73354],[73355,73361],[73362,73365],[73366,73367],[73367,73368],[73368,73369],[73370,73377],[73378,73381],[73382,73385],[73393,73398],[73399,73405],[73406,73414],[73414,73415],[73416,73421],[73422,73425],[73426,73436],[73436,73437],[73438,73445],[73445,73446],[73447,73451],[73452,73455],[73456,73457],[73457,73458],[73458,73459],[73460,73467],[73468,73474],[73475,73485],[73486,73488],[73489,73497],[73505,73512],[73513,73517],[73518,73520],[73521,73523],[73524,73525],[73525,73526],[73526,73527],[73528,73537],[73538,73540],[73541,73544],[73545,73555],[73556,73559],[73560,73567],[73568,73570],[73571,73573],[73574,73583],[73584,73591],[73592,73601],[73601,73602],[73610,73615],[73616,73621],[73622,73624],[73625,73635],[73636,73639],[73640,73647],[73648,73653],[73654,73657],[73658,73662],[73663,73668],[73669,73672],[73673,73674],[73674,73675],[73675,73676],[73677,73684],[73685,73687],[73688,73692],[73693,73697],[73698,73711],[73711,73712],[73721,73726],[73727,73729],[73730,73731],[73732,73743],[73744,73746],[73747,73755],[73756,73760],[73761,73769],[73770,73773],[73774,73781],[73782,73783],[73783,73784],[73784,73785],[73786,73794],[73795,73799],[73800,73808],[73809,73813],[73821,73834],[73835,73837],[73838,73842],[73843,73845],[73846,73847],[73848,73855],[73856,73865],[73866,73868],[73869,73871],[73872,73873],[73873,73874],[73874,73875],[73876,73885],[73886,73888],[73889,73897],[73898,73905],[73905,73906],[73907,73911],[73912,73915],[73916,73918],[73926,73938],[73939,73941],[73942,73951],[73952,73953],[73954,73960],[73961,73975],[73976,73978],[73979,73982],[73983,74008],[74009,74018],[74018,74019],[74030,74056],[74057,74066],[74067,74068],[74069,74074],[74084,74093],[74093,74094],[74094,74113],[74113,74114],[74114,74117],[74118,74143],[74143,74145],[74146,74147],[74163,74169],[74170,74177],[74178,74184],[74184,74185],[74185,74196],[74197,74199],[74199,74200],[74201,74202],[74221,74223],[74224,74225],[74225,74227],[74228,74238],[74239,74252],[74252,74253],[74254,74255],[74278,74280],[74281,74285],[74286,74294],[74295,74305],[74306,74308],[74309,74311],[74312,74318],[74341,74347],[74348,74352],[74352,74353],[74372,74373],[74392,74398],[74399,74404],[74404,74405],[74420,74421],[74437,74443],[74444,74451],[74452,74458],[74458,74459],[74459,74475],[74476,74478],[74478,74479],[74480,74481],[74500,74502],[74503,74504],[74504,74506],[74507,74517],[74518,74547],[74547,74548],[74549,74550],[74573,74575],[74576,74587],[74588,74598],[74599,74609],[74610,74612],[74613,74615],[74616,74622],[74645,74651],[74652,74656],[74656,74657],[74676,74677],[74696,74702],[74703,74708],[74708,74709],[74724,74725],[74735,74738],[74854,74856],[74895,74907],[74908,74909],[74909,74910],[74910,74911],[74912,74917],[74918,74920],[74921,74924],[74933,74936],[74937,74942],[74943,74945],[74946,74948],[74949,74953],[74954,74961],[74962,74967],[74968,74978],[74979,74989],[74990,75006],[75006,75007],[75008,75010],[75011,75013],[75014,75019],[75020,75024],[75025,75031],[75032,75034],[75042,75045],[75046,75049],[75050,75051],[75051,75052],[75052,75053],[75054,75061],[75062,75066],[75067,75071],[75072,75078],[75079,75086],[75087,75090],[75091,75098],[75099,75101],[75102,75108],[75109,75113],[75114,75121],[75122,75124],[75125,75127],[75128,75130],[75131,75143],[75144,75146],[75154,75162],[75163,75168],[75168,75169],[75171,75176],[75176,75177],[75178,75179],[75179,75180],[75180,75181],[75182,75189],[75190,75195],[75196,75199],[75207,75209],[75210,75212],[75213,75214],[75214,75215],[75215,75216],[75217,75224],[75225,75227],[75228,75234],[75235,75237],[75238,75251],[75252,75259],[75260,75264],[75265,75267],[75268,75269],[75269,75270],[75270,75271],[75272,75274],[75275,75276],[75277,75284],[75285,75294],[75295,75297],[75298,75302],[75303,75308],[75309,75312],[75320,75328],[75329,75333],[75333,75334],[75335,75340],[75341,75344],[75344,75345],[75346,75348],[75349,75353],[75354,75359],[75360,75363],[75364,75370],[75371,75380],[75381,75384],[75385,75391],[75392,75395],[75396,75403],[75404,75407],[75408,75415],[75416,75424],[75424,75425],[75433,75437],[75438,75440],[75441,75445],[75446,75453],[75454,75456],[75457,75462],[75463,75466],[75467,75473],[75474,75475],[75475,75476],[75476,75477],[75478,75486],[75487,75497],[75498,75504],[75505,75509],[75510,75514],[75515,75519],[75520,75522],[75523,75528],[75529,75536],[75544,75550],[75551,75555],[75556,75559],[75560,75569],[75570,75577],[75577,75578],[75579,75585],[75585,75586],[75587,75589],[75590,75594],[75595,75603],[75604,75608],[75609,75613],[75614,75619],[75620,75621],[75621,75622],[75622,75623],[75624,75632],[75633,75637],[75638,75643],[75644,75650],[75658,75664],[75665,75670],[75671,75674],[75675,75680],[75681,75687],[75687,75688],[75689,75693],[75694,75696],[75697,75698],[75699,75705],[75706,75713],[75714,75721],[75721,75722],[75723,75728],[75729,75733],[75734,75740],[75741,75744],[75745,75749],[75750,75752],[75753,75756],[75757,75761],[75769,75773],[75774,75777],[75778,75782],[75783,75792],[75793,75803],[75804,75807],[75808,75810],[75811,75817],[75818,75820],[75821,75824],[75825,75831],[75832,75834],[75835,75838],[75839,75847],[75848,75855],[75855,75856],[75857,75860],[75861,75862],[75862,75863],[75863,75864],[75872,75879],[75880,75884],[75885,75891],[75892,75895],[75896,75906],[75907,75913],[75914,75920],[75921,75924],[75925,75933],[75934,75941],[75941,75942],[75943,75952],[75953,75956],[75957,75965],[75966,75969],[75970,75974],[75982,75990],[75991,75997],[75998,76001],[76002,76010],[76011,76013],[76014,76017],[76018,76023],[76024,76029],[76029,76030],[76031,76033],[76034,76036],[76037,76042],[76043,76046],[76046,76047],[76048,76051],[76052,76055],[76056,76063],[76064,76067],[76068,76073],[76074,76077],[76078,76081],[76089,76095],[76096,76103],[76104,76106],[76107,76109],[76110,76114],[76115,76117],[76118,76125],[76126,76129],[76130,76131],[76131,76132],[76132,76133],[76134,76141],[76141,76142],[76154,76180],[76181,76190],[76191,76192],[76193,76198],[76209,76211],[76212,76216],[76217,76219],[76220,76221],[76222,76225],[76226,76231],[76232,76238],[76248,76257],[76257,76258],[76258,76266],[76266,76267],[76267,76271],[76271,76273],[76283,76303],[76304,76310],[76311,76312],[76313,76322],[76322,76323],[76323,76334],[76334,76337],[76347,76350],[76351,76352],[76352,76366],[76367,76372],[76372,76373],[76374,76380],[76380,76381],[76382,76383],[76397,76403],[76403,76404],[76404,76407],[76407,76408],[76408,76415],[76415,76417],[76417,76421],[76421,76422],[76423,76424],[76425,76426],[76427,76432],[76432,76433],[76433,76445],[76445,76449],[76463,76468],[76468,76469],[76469,76477],[76477,76480],[76480,76495],[76495,76498],[76508,76509],[76513,76516],[76516,76517],[76518,76530],[76531,76535],[76536,76547],[76555,76566],[76567,76579],[76580,76584],[76585,76596],[76597,76600],[76601,76609],[76610,76616],[76617,76626],[76627,76631],[76632,76636],[76637,76645],[76653,76666],[76666,76667],[76668,76680],[76681,76685],[76686,76697],[76698,76701],[76702,76710],[76711,76714],[76715,76718],[76719,76730],[76730,76731],[76732,76737],[76738,76739],[76740,76746],[76754,76764],[76765,76767],[76768,76780],[76781,76785],[76786,76797],[76798,76804],[76805,76807],[76808,76818],[76819,76821],[76822,76825],[76826,76834],[76835,76841],[76842,76851],[76852,76854],[76862,76865],[76866,76867],[76867,76868],[76868,76869],[76870,76875],[76876,76884],[76885,76891],[76891,76892],[76894,76899],[76899,76900],[76901,76910],[76911,76918],[76919,76921],[76922,76934],[76935,76939],[76940,76951],[76959,76971],[76972,76976],[76977,76988],[76989,76992],[76993,76996],[76997,77002],[77003,77005],[77006,77007],[77008,77018],[77019,77025],[77026,77028],[77029,77038],[77039,77042],[77043,77052],[77060,77064],[77065,77069],[77070,77072],[77073,77081],[77082,77087],[77088,77091],[77092,77101],[77102,77109],[77109,77110],[77111,77115],[77116,77128],[77129,77133],[77134,77144],[77145,77148],[77149,77151],[77159,77170],[77171,77179],[77180,77190],[77191,77195],[77196,77198],[77198,77199],[77200,77205],[77206,77209],[77210,77212],[77213,77217],[77218,77220],[77221,77229],[77230,77231],[77232,77242],[77243,77248],[77248,77249],[77250,77253],[77261,77272],[77273,77281],[77282,77284],[77285,77296],[77297,77300],[77301,77304],[77305,77307],[77308,77319],[77320,77324],[77325,77333],[77334,77341],[77341,77342],[77355,77383],[77384,77388],[77389,77390],[77391,77396],[77406,77412],[77413,77426],[77427,77428],[77429,77434],[77445,77456],[77457,77464],[77465,77466],[77467,77471],[77471,77472],[77472,77482],[77482,77485],[77495,77502],[77502,77503],[77503,77515],[77515,77517],[77517,77522],[77522,77524],[77525,77538],[77538,77540],[77543,77548],[77548,77549],[77550,77557],[77558,77562],[77563,77575],[77576,77580],[77581,77592],[77600,77602],[77603,77606],[77607,77612],[77613,77615],[77616,77620],[77621,77624],[77625,77628],[77629,77635],[77636,77639],[77640,77647],[77648,77651],[77652,77660],[77661,77668],[77669,77678],[77679,77684],[77685,77696],[77697,77701],[77709,77712],[77713,77725],[77726,77730],[77731,77741],[77741,77742],[77743,77746],[77747,77749],[77750,77755],[77756,77763],[77763,77764],[77765,77767],[77768,77772],[77772,77773],[77774,77777],[77778,77780],[77781,77785],[77786,77788],[77789,77794],[77795,77797],[77798,77800],[77801,77809],[77817,77819],[77820,77828],[77829,77836],[77837,77846],[77847,77852],[77853,77864],[77864,77865],[77877,77892],[77893,77897],[77898,77899],[77900,77905],[78020,78022],[78060,78072],[78073,78074],[78074,78075],[78075,78076],[78077,78082],[78083,78085],[78086,78089],[78100,78111],[78112,78119],[78120,78121],[78122,78126],[78126,78127],[78127,78141],[78141,78144],[78153,78155],[78156,78157],[78157,78164],[78165,78167],[78168,78172],[78172,78173],[78174,78175],[78188,78194],[78194,78195],[78195,78198],[78198,78199],[78199,78206],[78206,78208],[78208,78220],[78221,78228],[78228,78229],[78230,78231],[78232,78233],[78254,78261],[78261,78262],[78262,78276],[78276,78280],[78289,78290],[78299,78311],[78312,78320],[78321,78322],[78323,78327],[78327,78328],[78328,78343],[78343,78346],[78355,78357],[78358,78359],[78359,78367],[78368,78370],[78371,78375],[78375,78376],[78377,78378],[78391,78397],[78397,78398],[78398,78401],[78401,78402],[78402,78409],[78409,78411],[78411,78423],[78424,78432],[78432,78433],[78434,78435],[78436,78437],[78458,78466],[78466,78467],[78467,78480],[78480,78484],[78493,78494],[78504,78511],[78511,78512],[78513,78519],[78520,78524],[78525,78529],[78530,78533],[78534,78541],[78542,78549],[78550,78553],[78554,78557],[78558,78565],[78566,78574],[78575,78578],[78579,78582],[78583,78594],[78595,78604],[78612,78615],[78616,78620],[78621,78628],[78629,78637],[78637,78638],[78639,78651],[78652,78656],[78657,78668],[78669,78672],[78673,78680],[78681,78683],[78684,78685],[78686,78690],[78691,78697],[78698,78702],[78702,78703],[78704,78707],[78715,78718],[78719,78726],[78727,78735],[78736,78739],[78740,78748],[78749,78757],[78758,78768],[78769,78782],[78783,78787],[78788,78791],[78792,78799],[78799,78800],[78801,78805],[78806,78811],[78819,78831],[78832,78836],[78837,78848],[78849,78854],[78855,78865],[78866,78873],[78873,78874],[78875,78878],[78879,78881],[78882,78886],[78887,78891],[78892,78899],[78900,78904],[78905,78909],[78910,78912],[78913,78916],[78917,78920],[78928,78930],[78931,78934],[78935,78943],[78944,78951],[78952,78954],[78955,78960],[78961,78970],[78971,78978],[78979,78986],[78987,78990],[78991,78994],[78995,79003],[79004,79012],[79012,79013],[79022,79037],[79038,79045],[79046,79048],[79049,79059],[79060,79061],[79062,79069],[79070,79072],[79073,79076],[79077,79083],[79084,79088],[79089,79092],[79093,79097],[79098,79102],[79103,79107],[79107,79108],[79119,79140],[79141,79145],[79146,79147],[79148,79153],[79162,79164],[79165,79171],[79172,79181],[79182,79189],[79198,79209],[79210,79217],[79218,79219],[79220,79224],[79224,79225],[79225,79235],[79235,79238],[79247,79249],[79250,79256],[79257,79267],[79268,79273],[79282,79288],[79289,79294],[79295,79296],[79297,79304],[79304,79305],[79305,79317],[79317,79319],[79319,79324],[79324,79327],[79336,79338],[79339,79347],[79348,79349],[79350,79357],[79358,79363],[79364,79366],[79367,79370],[79371,79376],[79377,79388],[79397,79408],[79409,79416],[79417,79418],[79419,79422],[79423,79439],[79439,79441],[79441,79444],[79444,79446],[79447,79452],[79462,79466],[79466,79467],[79467,79480],[79480,79481],[79481,79488],[79488,79490],[79499,79505],[79505,79506],[79506,79509],[79509,79510],[79510,79517],[79517,79518],[79518,79522],[79522,79523],[79523,79541],[79541,79545],[79555,79570],[79571,79578],[79579,79581],[79582,79592],[79593,79594],[79595,79603],[79604,79606],[79607,79610],[79611,79617],[79618,79622],[79623,79626],[79627,79631],[79632,79636],[79637,79641],[79641,79642],[79653,79674],[79675,79679],[79680,79681],[79682,79687],[79696,79698],[79699,79705],[79706,79715],[79716,79723],[79732,79743],[79744,79751],[79752,79753],[79754,79758],[79758,79759],[79759,79769],[79769,79772],[79781,79783],[79784,79790],[79791,79801],[79802,79807],[79816,79822],[79823,79828],[79829,79830],[79831,79838],[79838,79839],[79839,79851],[79851,79853],[79853,79858],[79858,79861],[79871,79873],[79874,79882],[79883,79884],[79885,79893],[79894,79899],[79900,79902],[79903,79906],[79907,79912],[79913,79924],[79933,79945],[79946,79954],[79955,79956],[79957,79960],[79961,79978],[79978,79979],[79979,79990],[79990,79991],[79991,79999],[79999,80000],[80013,80023],[80023,80024],[80024,80029],[80029,80030],[80031,80032],[80032,80034],[80034,80037],[80046,80061],[80062,80068],[80069,80070],[80071,80074],[80075,80090],[80090,80093],[80102,80108],[80108,80109],[80109,80123],[80123,80125],[80125,80129],[80129,80130],[80130,80135],[80135,80138],[80147,80153],[80153,80154],[80154,80164],[80164,80165],[80165,80169],[80169,80171],[80180,80188],[80188,80189],[80189,80198],[80198,80199],[80199,80205],[80205,80207],[80217,80221],[80221,80222],[80222,80236],[80236,80237],[80237,80245],[80245,80247],[80256,80262],[80262,80263],[80263,80266],[80266,80267],[80267,80274],[80274,80275],[80275,80279],[80279,80280],[80280,80299],[80299,80303],[80313,80319],[80320,80324],[80325,80329],[80330,80333],[80334,80340],[80341,80347],[80348,80352],[80353,80355],[80356,80364],[80365,80373],[80374,80379],[80380,80385],[80386,80389],[80390,80395],[80396,80403],[80404,80407],[80408,80414],[80422,80425],[80426,80437],[80438,80444],[80445,80450],[80451,80455],[80456,80463],[80464,80479],[80480,80487],[80487,80488],[80490,80495],[80495,80496],[80497,80501],[80502,80503],[80503,80504],[80504,80505],[80506,80513],[80521,80524],[80525,80537],[80538,80542],[80543,80554],[80555,80562],[80563,80572],[80573,80582],[80583,80592],[80592,80593],[80594,80599],[80600,80610],[80618,80619],[80620,80626],[80627,80629],[80630,80640],[80641,80654],[80655,80658],[80659,80670],[80671,80679],[80680,80682],[80683,80684],[80684,80685],[80685,80686],[80687,80691],[80692,80705],[80705,80706],[80707,80716],[80724,80733],[80734,80737],[80738,80746],[80747,80749],[80750,80752],[80753,80758],[80759,80770],[80770,80771],[80772,80781],[80782,80791],[80792,80795],[80796,80798],[80799,80803],[80804,80806],[80807,80814],[80815,80816],[80817,80824],[80832,80833],[80833,80834],[80834,80835],[80836,80841],[80842,80855],[80856,80860],[80861,80864],[80865,80871],[80871,80872],[80980,80982],[81020,81032],[81033,81034],[81034,81035],[81035,81036],[81037,81042],[81043,81045],[81046,81049],[81058,81061],[81062,81066],[81067,81071],[81072,81079],[81080,81091],[81092,81096],[81097,81108],[81109,81113],[81114,81126],[81127,81138],[81138,81139],[81140,81151],[81152,81155],[81163,81175],[81176,81179],[81180,81183],[81184,81195],[81195,81196],[81197,81199],[81200,81202],[81203,81212],[81213,81222],[81223,81227],[81228,81231],[81232,81237],[81238,81239],[81240,81246],[81247,81257],[81258,81260],[81261,81262],[81263,81267],[81275,81283],[81284,81294],[81295,81298],[81299,81307],[81308,81312],[81313,81316],[81317,81318],[81318,81319],[81319,81320],[81321,81326],[81327,81335],[81336,81342],[81342,81343],[81352,81355],[81356,81365],[81366,81373],[81374,81376],[81377,81388],[81388,81389],[81398,81399],[81400,81403],[81404,81413],[81414,81423],[81424,81426],[81427,81431],[81432,81439],[81440,81444],[81445,81455],[81455,81457],[81458,81459],[81459,81460],[81460,81461],[81462,81468],[81469,81471],[81472,81479],[81480,81486],[81487,81488],[81489,81496],[81496,81497],[81506,81507],[81508,81510],[81511,81516],[81517,81518],[81519,81525],[81526,81536],[81537,81541],[81542,81544],[81545,81553],[81554,81556],[81557,81561],[81562,81572],[81573,81583],[81583,81584],[81585,81590],[81591,81594],[81595,81598],[81599,81607],[81617,81628],[81629,81630],[81630,81635],[81635,81636],[81637,81639],[81640,81643],[81644,81654],[81655,81662],[81663,81666],[81667,81674],[81675,81678],[81679,81690],[81691,81692],[81692,81693],[81693,81694],[81695,81704],[81705,81707],[81708,81715],[81725,81747],[81747,81749],[81750,81752],[81753,81776],[81776,81778],[81779,81785],[81785,81786],[81796,81797],[81798,81805],[81806,81809],[81810,81818],[81819,81829],[81830,81834],[81835,81838],[81839,81844],[81845,81851],[81852,81854],[81855,81858],[81859,81867],[81868,81874],[81875,81880],[81881,81892],[81902,81908],[81909,81911],[81912,81922],[81923,81930],[81930,81931],[81940,81946],[81947,81951],[81952,81955],[81956,81966],[81967,81971],[81972,81976],[81977,81982],[81983,81985],[81986,81989],[81990,81995],[81996,82003],[82004,82010],[82011,82014],[82015,82020],[82021,82024],[82025,82028],[82029,82033],[82033,82034],[82035,82042],[82050,82055],[82056,82059],[82060,82068],[82069,82075],[82076,82083],[82084,82091],[82092,82094],[82095,82098],[82099,82106],[82106,82107],[82108,82110],[82111,82113],[82114,82120],[82121,82123],[82124,82131],[82132,82138],[82139,82142],[82143,82146],[82147,82152],[82160,82168],[82168,82169],[82170,82171],[82171,82172],[82172,82173],[82174,82184],[82185,82189],[82190,82193],[82194,82204],[82205,82212],[82213,82215],[82216,82219],[82220,82227],[82228,82231],[82232,82235],[82236,82237],[82238,82245],[82246,82248],[82249,82253],[82254,82257],[82265,82275],[82276,82278],[82279,82281],[82282,82294],[82294,82295],[82297,82302],[82302,82303],[82304,82316],[82317,82324],[82325,82333],[82342,82345],[82346,82353],[82354,82356],[82357,82364],[82365,82373],[82374,82377],[82378,82390],[82391,82402],[82403,82408],[82409,82419],[82420,82431],[82432,82440],[82448,82450],[82451,82455],[82456,82458],[82459,82467],[82468,82479],[82479,82480],[82481,82483],[82484,82496],[82497,82508],[82509,82513],[82514,82516],[82517,82528],[82529,82531],[82532,82535],[82536,82548],[82556,82562],[82563,82565],[82566,82569],[82570,82573],[82574,82579],[82579,82580],[82581,82584],[82585,82589],[82590,82601],[82602,82609],[82610,82613],[82614,82619],[82620,82622],[82623,82634],[82635,82637],[82638,82647],[82648,82650],[82651,82654],[82662,82665],[82666,82671],[82671,82672],[82673,82676],[82677,82687],[82688,82696],[82697,82701],[82701,82702],[82702,82704],[82704,82705],[82705,82716],[82717,82720],[82721,82725],[82725,82726],[82726,82728],[82728,82729],[82729,82741],[82742,82749],[82750,82752],[82760,82769],[82770,82777],[82778,82780],[82781,82788],[82789,82792],[82793,82801],[82802,82809],[82809,82810],[82811,82819],[82820,82823],[82824,82832],[82833,82847],[82848,82851],[82859,82873],[82874,82884],[82885,82887],[82888,82894],[82895,82898],[82899,82906],[82907,82909],[82910,82922],[82923,82930],[82931,82939],[82939,82940],[82941,82953],[82961,82965],[82966,82977],[82978,82982],[82983,82994],[82995,82998],[82999,83010],[83011,83025],[83026,83028],[83029,83030],[83031,83038],[83039,83044],[83045,83050],[83051,83053],[83061,83071],[83072,83074],[83075,83078],[83079,83085],[83086,83094],[83095,83099],[83100,83103],[83104,83111],[83111,83112],[83121,83133],[83134,83138],[83139,83150],[83151,83155],[83156,83160],[83161,83166],[83167,83173],[83174,83179],[83180,83183],[83184,83191],[83192,83198],[83199,83201],[83202,83207],[83208,83219],[83219,83220],[83231,83245],[83246,83253],[83254,83255],[83256,83261],[83270,83272],[83272,83276],[83277,83281],[83282,83284],[83293,83303],[83304,83307],[83308,83309],[83310,83320],[83320,83321],[83321,83329],[83329,83330],[83330,83334],[83334,83336],[83345,83352],[83352,83353],[83353,83357],[83357,83358],[83358,83361],[83361,83363],[83372,83374],[83375,83381],[83382,83386],[83387,83389],[83390,83396],[83397,83399],[83400,83408],[83409,83413],[83422,83424],[83425,83428],[83429,83436],[83437,83443],[83444,83446],[83447,83452],[83453,83464],[83473,83475],[83476,83477],[83477,83484],[83484,83485],[83485,83496],[83496,83499],[83500,83501],[83514,83516],[83517,83521],[83530,83531],[83541,83553],[83554,83558],[83559,83570],[83571,83575],[83576,83580],[83581,83587],[83588,83594],[83595,83600],[83601,83604],[83605,83612],[83613,83619],[83620,83622],[83623,83629],[83630,83632],[83633,83638],[83646,83657],[83657,83658],[83669,83683],[83684,83691],[83692,83693],[83694,83699],[83708,83710],[83711,83718],[83719,83725],[83726,83730],[83739,83749],[83750,83753],[83754,83755],[83756,83766],[83766,83767],[83767,83775],[83775,83776],[83776,83780],[83780,83782],[83791,83793],[83794,83799],[83800,83804],[83805,83808],[83817,83824],[83824,83825],[83825,83830],[83830,83831],[83831,83834],[83834,83836],[83845,83847],[83848,83852],[83853,83860],[83861,83867],[83868,83870],[83871,83876],[83877,83888],[83889,83893],[83894,83898],[83907,83914],[83914,83915],[83915,83923],[83923,83926],[84040,84042],[84079,84091],[84092,84093],[84093,84094],[84094,84095],[84096,84101],[84102,84104],[84105,84108],[84117,84123],[84124,84128],[84128,84129],[84130,84133],[84134,84139],[84140,84143],[84144,84146],[84147,84154],[84155,84157],[84158,84168],[84169,84177],[84178,84182],[84183,84193],[84194,84196],[84197,84203],[84204,84213],[84221,84228],[84229,84231],[84232,84235],[84236,84248],[84249,84253],[84254,84264],[84264,84265],[84266,84276],[84277,84279],[84280,84284],[84285,84291],[84292,84296],[84297,84299],[84300,84304],[84305,84307],[84308,84318],[84319,84321],[84329,84343],[84344,84352],[84353,84355],[84356,84358],[84359,84363],[84364,84367],[84368,84380],[84381,84387],[84388,84395],[84395,84396],[84397,84409],[84410,84414],[84415,84426],[84426,84427],[84435,84442],[84442,84443],[84444,84450],[84451,84461],[84462,84470],[84471,84492],[84492,84494],[84495,84498],[84511,84529],[84529,84531],[84539,84546],[84547,84549],[84550,84553],[84554,84562],[84563,84571],[84571,84572],[84584,84605],[84606,84610],[84614,84615],[84616,84621],[84632,84644],[84645,84653],[84654,84655],[84656,84659],[84660,84677],[84677,84678],[84678,84689],[84689,84690],[84690,84698],[84698,84699],[84713,84723],[84723,84724],[84724,84729],[84729,84730],[84731,84732],[84732,84734],[84734,84737],[84747,84762],[84763,84769],[84770,84771],[84772,84775],[84776,84791],[84791,84794],[84804,84810],[84810,84811],[84811,84825],[84825,84827],[84827,84831],[84831,84832],[84832,84837],[84837,84840],[84850,84856],[84856,84857],[84857,84867],[84867,84868],[84868,84872],[84872,84874],[84884,84890],[84890,84891],[84891,84901],[84901,84902],[84902,84906],[84906,84908],[84918,84926],[84926,84927],[84927,84936],[84936,84937],[84937,84943],[84943,84945],[84956,84960],[84960,84961],[84961,84975],[84975,84976],[84976,84984],[84984,84986],[84996,85004],[85004,85005],[85006,85014],[85015,85021],[85022,85031],[85032,85039],[85040,85044],[85045,85049],[85050,85052],[85053,85063],[85064,85072],[85073,85083],[85084,85088],[85089,85093],[85093,85094],[85102,85105],[85106,85108],[85109,85116],[85117,85119],[85120,85124],[85125,85146],[85146,85148],[85149,85151],[85152,85170],[85170,85172],[85173,85180],[85181,85185],[85186,85191],[85192,85194],[85202,85206],[85206,85207],[85207,85211],[85211,85212],[85212,85233],[85233,85234],[85235,85238],[85239,85249],[85250,85258],[85259,85262],[85263,85265],[85266,85270],[85271,85273],[85274,85283],[85284,85294],[85302,85304],[85305,85308],[85309,85317],[85318,85324],[85325,85329],[85330,85332],[85333,85340],[85341,85347],[85347,85348],[85360,85381],[85382,85386],[85387,85388],[85389,85394],[85405,85417],[85418,85426],[85427,85428],[85429,85433],[85433,85434],[85434,85449],[85449,85452],[85462,85472],[85473,85479],[85480,85481],[85482,85490],[85490,85491],[85491,85500],[85500,85503],[85513,85515],[85516,85517],[85517,85523],[85524,85526],[85527,85531],[85531,85532],[85533,85534],[85548,85554],[85554,85555],[85555,85558],[85558,85559],[85559,85566],[85566,85567],[85567,85573],[85573,85574],[85574,85588],[85588,85592],[85606,85612],[85612,85613],[85613,85616],[85616,85617],[85617,85624],[85624,85625],[85625,85631],[85631,85632],[85632,85648],[85648,85652],[85666,85672],[85672,85673],[85673,85676],[85676,85677],[85677,85684],[85684,85685],[85685,85691],[85691,85692],[85692,85701],[85701,85705],[85715,85716],[85720,85725],[85725,85726],[85727,85736],[85737,85749],[85750,85757],[85758,85766],[85767,85777],[85786,85793],[85794,85809],[85810,85812],[85813,85816],[85817,85829],[85830,85834],[85835,85845],[85846,85856],[85857,85864],[85865,85870],[85871,85878],[85886,85894],[85895,85905],[85906,85913],[85914,85916],[85917,85920],[85921,85925],[85925,85926],[85926,85929],[85930,85943],[85943,85944],[85953,85954],[85955,85969],[85970,85979],[85979,85980],[85983,85986],[85987,85990],[85991,85993],[85994,85997],[85998,86005],[86006,86012],[86013,86015],[86016,86026],[86027,86029],[86030,86033],[86034,86039],[86040,86042],[86043,86046],[86056,86070],[86071,86077],[86077,86078],[86079,86086],[86087,86093],[86094,86100],[86100,86101],[86102,86116],[86116,86117],[86127,86128],[86129,86137],[86138,86144],[86144,86145],[86146,86149],[86150,86153],[86154,86156],[86157,86160],[86161,86168],[86169,86175],[86176,86178],[86179,86189],[86190,86192],[86193,86200],[86201,86204],[86205,86215],[86216,86226],[86236,86237],[86237,86240],[86241,86243],[86244,86250],[86251,86260],[86260,86262],[86263,86266],[86267,86274],[86275,86282],[86283,86286],[86287,86295],[86296,86304],[86305,86308],[86309,86313],[86314,86316],[86317,86321],[86322,86324],[86325,86328],[86329,86335],[86345,86349],[86349,86350],[86351,86354],[86355,86361],[86362,86368],[86368,86369],[86370,86379],[86379,86380],[86389,86390],[86391,86396],[86397,86403],[86403,86404],[86411,86414],[86415,86422],[86423,86425],[86426,86430],[86431,86433],[86434,86439],[86440,86446],[86446,86447],[86448,86451],[86452,86458],[86459,86465],[86465,86466],[86467,86476],[86476,86477],[86486,86489],[86490,86501],[86502,86509],[86510,86515],[86516,86520],[86521,86523],[86524,86531],[86532,86545],[86546,86555],[86556,86558],[86559,86569],[86570,86572],[86573,86576],[86577,86583],[86591,86599],[86600,86604],[86605,86608],[86609,86616],[86616,86617],[86619,86624],[86624,86625],[86626,86632],[86633,86640],[86641,86642],[86642,86643],[86643,86644],[86653,86660],[86661,86666],[86667,86670],[86671,86680],[86681,86683],[86684,86688],[86689,86693],[86694,86702],[86703,86707],[86708,86710],[86711,86716],[86717,86721],[86722,86730],[86731,86733],[86734,86737],[86738,86748],[86749,86750],[86750,86751],[86751,86752],[86760,86767],[86767,86769],[86770,86777],[86777,86778],[86779,86787],[86788,86796],[86797,86805],[86806,86818],[86819,86828],[86829,86831],[86832,86833],[86834,86841],[86842,86848],[86848,86849],[86850,86858],[86858,86859],[86967,86969],[87006,87018],[87019,87020],[87020,87021],[87021,87022],[87023,87028],[87029,87031],[87032,87035],[87043,87048],[87049,87055],[87056,87060],[87061,87063],[87064,87067],[87068,87075],[87076,87079],[87080,87087],[87088,87102],[87103,87104],[87104,87118],[87119,87128],[87129,87132],[87133,87141],[87148,87154],[87154,87155],[87156,87159],[87160,87167],[87167,87168],[87169,87172],[87173,87181],[87182,87185],[87186,87190],[87190,87191],[87191,87194],[87194,87195],[87195,87206],[87207,87214],[87215,87218],[87219,87232],[87233,87241],[87248,87259],[87260,87262],[87263,87267],[87268,87276],[87277,87287],[87288,87292],[87293,87300],[87301,87304],[87305,87313],[87313,87314],[87322,87324],[87325,87328],[87329,87335],[87336,87343],[87344,87351],[87352,87362],[87363,87381],[87382,87385],[87386,87389],[87390,87394],[87395,87398],[87399,87401],[87402,87405],[87406,87413],[87414,87416],[87423,87427],[87428,87436],[87437,87444],[87445,87453],[87454,87456],[87457,87458],[87459,87463],[87464,87473],[87474,87476],[87477,87489],[87490,87494],[87494,87495],[87495,87498],[87498,87499],[87499,87509],[87509,87510],[87520,87534],[87535,87542],[87543,87544],[87545,87550],[87558,87560],[87560,87567],[87568,87572],[87573,87580],[87588,87599],[87600,87603],[87603,87604],[87612,87614],[87614,87618],[87619,87622],[87623,87625],[87626,87632],[87633,87637],[87638,87639],[87639,87640],[87640,87641],[87642,87644],[87645,87653],[87661,87663],[87664,87665],[87665,87672],[87673,87683],[87684,87702],[87702,87703],[87704,87705],[87717,87721],[87722,87731],[87732,87733],[87734,87736],[87736,87754],[87754,87755],[87756,87763],[87763,87764],[87780,87781],[87781,87789],[87789,87790],[87790,87793],[87793,87794],[87795,87796],[87796,87797],[87798,87802],[87802,87804],[87817,87819],[87820,87826],[87827,87831],[87832,87834],[87835,87841],[87842,87844],[87845,87853],[87854,87858],[87871,87873],[87874,87877],[87878,87885],[87886,87892],[87893,87895],[87896,87901],[87902,87913],[87926,87928],[87929,87930],[87930,87937],[87937,87938],[87938,87949],[87949,87952],[87953,87954],[87971,87973],[87974,87978],[87991,87992],[88000,88001],[88010,88012],[88013,88016],[88017,88023],[88024,88031],[88032,88039],[88040,88050],[88051,88069],[88070,88073],[88074,88077],[88078,88082],[88083,88086],[88087,88089],[88090,88093],[88094,88101],[88102,88104],[88111,88116],[88117,88125],[88126,88133],[88134,88142],[88143,88147],[88148,88149],[88150,88154],[88155,88164],[88165,88167],[88168,88180],[88181,88185],[88185,88186],[88186,88189],[88189,88190],[88190,88200],[88200,88201],[88211,88225],[88226,88233],[88234,88235],[88236,88241],[88249,88251],[88252,88259],[88260,88264],[88265,88272],[88280,88291],[88292,88295],[88295,88296],[88304,88306],[88307,88311],[88312,88315],[88316,88318],[88319,88325],[88326,88330],[88331,88332],[88332,88333],[88333,88334],[88335,88337],[88338,88346],[88354,88356],[88357,88358],[88358,88365],[88366,88376],[88377,88395],[88395,88396],[88397,88398],[88410,88412],[88413,88418],[88419,88423],[88424,88427],[88439,88443],[88444,88456],[88457,88458],[88459,88461],[88461,88479],[88479,88480],[88481,88488],[88488,88489],[88505,88506],[88506,88514],[88514,88515],[88515,88518],[88518,88519],[88520,88521],[88521,88522],[88523,88527],[88527,88529],[88541,88543],[88544,88548],[88549,88556],[88557,88563],[88564,88566],[88567,88572],[88573,88584],[88585,88589],[88590,88594],[88606,88613],[88613,88614],[88614,88622],[88622,88625],[88633,88634],[88638,88641],[88641,88642],[88643,88647],[88648,88649],[88649,88650],[88650,88651],[88652,88657],[88658,88669],[88676,88680],[88681,88682],[88682,88683],[88683,88684],[88685,88690],[88691,88702],[88703,88708],[88709,88711],[88712,88719],[88720,88727],[88728,88729],[88729,88730],[88730,88731],[88732,88738],[88739,88748],[88749,88751],[88752,88754],[88755,88756],[88756,88757],[88757,88758],[88759,88766],[88767,88769],[88770,88774],[88781,88789],[88790,88798],[88799,88805],[88805,88806],[88807,88811],[88812,88816],[88817,88819],[88820,88843],[88844,88847],[88848,88871],[88878,88888],[88889,88891],[88892,88901],[88902,88906],[88907,88915],[88916,88922],[88923,88925],[88926,88927],[88928,88932],[88933,88941],[88942,88949],[88949,88950],[88958,88964],[88965,88969],[88970,88974],[88975,88976],[88976,88977],[88977,88978],[88979,88985],[88986,88988],[88989,88996],[88997,88999],[89000,89003],[89004,89027],[89028,89037],[89037,89038],[89046,89047],[89048,89057],[89057,89058],[89064,89073],[89074,89078],[89079,89080],[89081,89084],[89085,89093],[89094,89104],[89105,89108],[89109,89113],[89114,89121],[89121,89122],[89130,89131],[89132,89147],[89147,89148],[89149,89158],[89159,89163],[89164,89165],[89166,89169],[89170,89174],[89175,89182],[89183,89185],[89186,89194],[89194,89195],[89196,89199],[89200,89210],[89211,89217],[89218,89220],[89221,89222],[89231,89240],[89241,89243],[89244,89248],[89249,89255],[89256,89258],[89259,89269],[89270,89272],[89273,89279],[89280,89281],[89282,89287],[89288,89292],[89293,89300],[89301,89307],[89307,89308],[89309,89311],[89312,89315],[89316,89323],[89324,89332],[89341,89349],[89350,89351],[89352,89359],[89360,89366],[89367,89371],[89372,89378],[89379,89383],[89384,89386],[89387,89395],[89396,89397],[89398,89404],[89405,89407],[89408,89418],[89419,89425],[89426,89428],[89429,89437],[89438,89441],[89450,89457],[89458,89465],[89465,89466],[89474,89475],[89476,89486],[89486,89487],[89493,89502],[89503,89507],[89508,89511],[89512,89522],[89523,89530],[89531,89533],[89534,89539],[89540,89543],[89544,89551],[89552,89553],[89554,89557],[89558,89565],[89574,89576],[89577,89580],[89581,89588],[89589,89595],[89596,89603],[89604,89607],[89608,89621],[89622,89629],[89630,89637],[89637,89638],[89639,89641],[89642,89645],[89646,89653],[89654,89662],[89663,89665],[89674,89680],[89681,89683],[89684,89691],[89692,89695],[89696,89704],[89705,89712],[89712,89713],[89714,89719],[89720,89725],[89726,89739],[89740,89743],[89744,89755],[89756,89765],[89774,89779],[89780,89789],[89790,89799],[89800,89801],[89801,89806],[89807,89816],[89817,89819],[89820,89841],[89841,89843],[89844,89850],[89851,89855],[89856,89860],[89861,89864],[89973,89975],[90006,90018],[90019,90020],[90020,90021],[90021,90022],[90023,90028],[90029,90031],[90032,90035],[90039,90060],[90066,90069],[90070,90084],[90085,90092],[90093,90096],[90097,90100],[90101,90112],[90113,90116],[90117,90123],[90124,90128],[90129,90131],[90132,90136],[90139,90145],[90146,90149],[90150,90157],[90158,90160],[90161,90165],[90166,90172],[90173,90177],[90177,90178],[90179,90182],[90183,90192],[90193,90199],[90200,90203],[90204,90206],[90207,90213],[90214,90217],[90218,90222],[90223,90225],[90226,90231],[90232,90238],[90241,90243],[90244,90250],[90251,90256],[90257,90262],[90263,90276],[90277,90281],[90282,90285],[90286,90293],[90294,90296],[90297,90304],[90305,90307],[90308,90318],[90319,90323],[90324,90331],[90331,90332],[90334,90335],[90336,90349],[90349,90350],[90356,90365],[90366,90370],[90371,90374],[90375,90385],[90386,90388],[90389,90394],[90395,90397],[90398,90404],[90405,90408],[90409,90413],[90414,90422],[90422,90423],[90424,90427],[90430,90438],[90439,90446],[90447,90451],[90452,90455],[90456,90460],[90461,90463],[90464,90470],[90471,90472],[90473,90481],[90482,90484],[90485,90487],[90488,90490],[90491,90494],[90495,90500],[90500,90501],[90503,90504],[90505,90516],[90516,90517],[90524,90533],[90534,90538],[90539,90542],[90543,90553],[90554,90561],[90562,90564],[90565,90570],[90571,90574],[90575,90582],[90583,90584],[90585,90589],[90590,90597],[90600,90602],[90603,90606],[90607,90615],[90616,90622],[90623,90630],[90631,90634],[90635,90648],[90649,90656],[90657,90664],[90664,90665],[90666,90668],[90669,90672],[90673,90680],[90681,90689],[90690,90692],[90695,90701],[90702,90704],[90705,90713],[90714,90717],[90718,90726],[90727,90734],[90734,90735],[90736,90742],[90743,90748],[90749,90762],[90763,90766],[90767,90769],[90770,90781],[90782,90791],[90794,90799],[90800,90809],[90810,90819],[90820,90821],[90821,90826],[90827,90836],[90837,90839],[90840,90861],[90861,90863],[90864,90870],[90871,90875],[90876,90880],[90881,90884],[90887,90908],[90909,90912],[90913,90927],[90928,90935],[90936,90939],[90940,90943],[90944,90955],[90956,90959],[90960,90966],[90967,90971],[90972,90974],[90975,90979],[90982,90988],[90989,90992],[90993,91000],[91001,91003],[91004,91008],[91009,91015],[91016,91020],[91020,91021],[91022,91025],[91026,91035],[91036,91042],[91043,91046],[91047,91049],[91050,91056],[91057,91060],[91061,91065],[91066,91068],[91069,91074],[91075,91081],[91084,91086],[91087,91093],[91094,91100],[91101,91106],[91107,91120],[91121,91125],[91126,91130],[91131,91138],[91139,91141],[91142,91146],[91147,91156],[91156,91157],[91159,91160],[91161,91170],[91170,91171],[91172,91181],[91182,91186],[91187,91189],[91190,91191],[91191,91192],[91192,91193],[91194,91199],[91200,91207],[91208,91213],[91214,91221],[91222,91226],[91227,91229],[91230,91237],[91238,91240],[91241,91244],[91245,91255],[91258,91265],[91266,91268],[91269,91273],[91274,91276],[91277,91281],[91282,91290],[91291,91300],[91301,91307],[91308,91313],[91314,91323],[91324,91326],[91327,91331],[91332,91339],[91339,91340],[91342,91343],[91344,91351],[91351,91352],[91359,91368],[91369,91373],[91374,91376],[91377,91382],[91383,91385],[91386,91394],[91395,91397],[91398,91402],[91403,91413],[91414,91418],[91419,91422],[91423,91430],[91431,91437],[91438,91440],[91443,91453],[91453,91454],[91456,91457],[91458,91464],[91464,91465],[91472,91481],[91482,91486],[91487,91490],[91491,91501],[91502,91505],[91506,91510],[91511,91517],[91517,91518],[91520,91526],[91527,91531],[91532,91536],[91537,91538],[91538,91539],[91539,91540],[91541,91547],[91548,91550],[91551,91558],[91559,91561],[91562,91565],[91566,91589],[91590,91599],[91599,91600],[91602,91603],[91604,91613],[91613,91614],[91615,91624],[91625,91629],[91630,91631],[91632,91635],[91636,91644],[91645,91655],[91656,91659],[91660,91664],[91665,91672],[91672,91673],[91674,91677],[91678,91688],[91689,91695],[91698,91704],[91705,91707],[91708,91709],[91710,91719],[91720,91722],[91723,91727],[91728,91733],[91734,91736],[91737,91739],[91740,91749],[91750,91756],[91757,91761],[91762,91765],[91766,91774],[91775,91777],[91778,91781],[91782,91789],[91790,91797],[91797,91798],[91800,91801],[91802,91814],[91814,91815],[91821,91830],[91831,91835],[91836,91839],[91840,91850],[91851,91853],[91854,91859],[91860,91862],[91863,91869],[91870,91873],[91874,91878],[91879,91886],[91886,91887],[91888,91891],[91894,91902],[91903,91910],[91911,91915],[91916,91919],[91920,91924],[91925,91927],[91928,91934],[91935,91936],[91937,91944],[91945,91947],[91948,91950],[91951,91953],[91954,91957],[91958,91963],[91963,91964],[91966,91967],[91968,91979],[91979,91980],[91987,91996],[91997,92001],[92002,92005],[92006,92016],[92017,92024],[92025,92027],[92028,92033],[92034,92037],[92038,92045],[92046,92047],[92048,92052],[92053,92060],[92063,92065],[92066,92069],[92070,92077],[92078,92084],[92085,92092],[92093,92096],[92097,92110],[92111,92118],[92119,92126],[92126,92127],[92128,92130],[92131,92134],[92135,92142],[92143,92151],[92152,92154],[92157,92163],[92164,92166],[92167,92175],[92176,92179],[92180,92188],[92189,92196],[92196,92197],[92198,92204],[92205,92210],[92211,92224],[92225,92228],[92229,92231],[92232,92243],[92244,92253],[92256,92261],[92262,92271],[92272,92281],[92282,92283],[92283,92288],[92289,92298],[92299,92301],[92302,92323],[92323,92325],[92326,92332],[92333,92337],[92338,92342],[92343,92346],[92349,92370],[92371,92374],[92375,92389],[92390,92397],[92398,92401],[92402,92405],[92406,92417],[92418,92421],[92422,92428],[92429,92433],[92434,92436],[92437,92441],[92444,92450],[92451,92454],[92455,92462],[92463,92465],[92466,92470],[92471,92477],[92478,92482],[92482,92483],[92484,92487],[92488,92497],[92498,92504],[92505,92508],[92509,92511],[92512,92518],[92519,92522],[92523,92527],[92528,92530],[92531,92536],[92537,92543],[92546,92548],[92549,92555],[92556,92562],[92563,92568],[92569,92582],[92583,92587],[92588,92592],[92593,92600],[92601,92603],[92604,92608],[92609,92618],[92618,92619],[92621,92622],[92623,92639],[92639,92640],[92647,92656],[92657,92661],[92662,92664],[92665,92669],[92670,92678],[92679,92681],[92682,92690],[92690,92691],[92692,92695],[92696,92706],[92707,92713],[92714,92716],[92719,92720],[92721,92730],[92731,92733],[92734,92738],[92739,92745],[92746,92748],[92749,92759],[92760,92762],[92763,92769],[92770,92771],[92772,92777],[92778,92782],[92783,92791],[92792,92798],[92798,92799],[92800,92802],[92803,92806],[92807,92815],[92818,92826],[92827,92835],[92836,92837],[92838,92846],[92847,92853],[92854,92858],[92859,92865],[92866,92870],[92871,92873],[92874,92882],[92883,92884],[92885,92891],[92892,92894],[92895,92905],[92906,92912],[92913,92915],[92918,92926],[92927,92930],[92931,92939],[92940,92947],[92947,92948],[92950,92951],[92952,92962],[92962,92963],[92970,92979],[92980,92984],[92985,92988],[92989,92999],[93000,93007],[93008,93010],[93011,93016],[93017,93020],[93021,93028],[93029,93030],[93031,93034],[93035,93042],[93045,93047],[93048,93051],[93052,93060],[93061,93067],[93068,93075],[93076,93079],[93080,93093],[93094,93101],[93102,93109],[93109,93110],[93111,93113],[93114,93117],[93118,93125],[93126,93134],[93135,93137],[93140,93146],[93147,93149],[93150,93157],[93158,93161],[93162,93170],[93171,93178],[93178,93179],[93180,93185],[93186,93191],[93192,93205],[93206,93209],[93210,93212],[93213,93224],[93225,93234],[93237,93242],[93243,93252],[93253,93262],[93263,93264],[93264,93269],[93270,93279],[93280,93282],[93283,93304],[93304,93306],[93307,93313],[93314,93318],[93319,93323],[93324,93327],[93330,93351],[93352,93355],[93356,93370],[93371,93378],[93379,93382],[93383,93386],[93387,93398],[93399,93402],[93403,93409],[93410,93414],[93415,93417],[93418,93422],[93425,93431],[93432,93435],[93436,93443],[93444,93446],[93447,93451],[93452,93458],[93459,93463],[93463,93464],[93465,93468],[93469,93478],[93479,93485],[93486,93489],[93490,93492],[93493,93499],[93500,93503],[93504,93508],[93509,93511],[93512,93517],[93518,93524],[93527,93529],[93530,93536],[93537,93542],[93543,93548],[93549,93562],[93563,93567],[93568,93571],[93572,93579],[93580,93582],[93583,93590],[93591,93593],[93594,93604],[93605,93609],[93610,93617],[93617,93618],[93720,93722],[93765,93777],[93778,93779],[93779,93780],[93780,93781],[93782,93787],[93788,93790],[93791,93794],[93805,93806],[93807,93816],[93816,93817],[93818,93827],[93828,93832],[93833,93835],[93836,93837],[93837,93838],[93838,93839],[93840,93845],[93846,93852],[93853,93858],[93859,93866],[93867,93871],[93872,93874],[93875,93882],[93883,93885],[93886,93889],[93890,93900],[93912,93919],[93920,93922],[93923,93927],[93928,93930],[93931,93935],[93936,93944],[93945,93954],[93955,93961],[93962,93967],[93968,93977],[93978,93980],[93981,93985],[93986,93994],[93994,93995],[94006,94007],[94008,94015],[94015,94016],[94024,94033],[94034,94038],[94039,94041],[94042,94047],[94048,94050],[94051,94059],[94060,94062],[94063,94067],[94068,94078],[94079,94083],[94084,94087],[94088,94095],[94096,94102],[94103,94105],[94117,94127],[94127,94128],[94139,94140],[94141,94147],[94147,94148],[94156,94165],[94166,94170],[94171,94174],[94175,94185],[94186,94189],[94190,94194],[94195,94201],[94201,94202],[94205,94208],[94208,94209],[94210,94222],[94223,94227],[94228,94235],[94236,94245],[94255,94257],[94258,94267],[94268,94278],[94279,94282],[94283,94290],[94291,94293],[94294,94301],[94302,94310],[94311,94314],[94315,94327],[94328,94339],[94340,94345],[94346,94356],[94366,94377],[94378,94386],[94387,94389],[94390,94394],[94395,94398],[94399,94407],[94408,94419],[94419,94420],[94421,94424],[94425,94432],[94433,94440],[94441,94448],[94449,94450],[94450,94451],[94451,94452],[94453,94464],[94474,94479],[94480,94482],[94483,94493],[94494,94502],[94503,94507],[94507,94508],[94508,94510],[94510,94511],[94511,94522],[94523,94526],[94527,94531],[94531,94532],[94532,94534],[94534,94535],[94535,94547],[94548,94555],[94556,94558],[94559,94562],[94572,94576],[94577,94583],[94584,94587],[94588,94600],[94601,94605],[94606,94614],[94614,94615],[94616,94618],[94619,94624],[94625,94627],[94628,94633],[94634,94645],[94646,94649],[94650,94661],[94662,94670],[94671,94672],[94672,94673],[94683,94684],[94685,94694],[94695,94706],[94707,94714],[94715,94719],[94719,94720],[94720,94723],[94723,94724],[94724,94732],[94732,94733],[94733,94752],[94753,94765],[94766,94770],[94780,94788],[94789,94792],[94793,94801],[94802,94804],[94805,94814],[94815,94818],[94819,94827],[94828,94837],[94838,94847],[94848,94872],[94872,94873],[94884,94887],[94888,94912],[94913,94922],[94923,94930],[94931,94938],[94939,94949],[94950,94956],[94957,94960],[94961,94970],[94971,94980],[94990,94992],[94993,95000],[95001,95003],[95004,95005],[95006,95018],[95019,95023],[95024,95034],[95034,95035],[95046,95047],[95048,95062],[95062,95063],[95072,95079],[95080,95082],[95083,95088],[95089,95092],[95093,95094],[95095,95100],[95101,95103],[95104,95111],[95112,95114],[95115,95118],[95119,95133],[95134,95135],[95147,95150],[95151,95160],[95161,95170],[95171,95174],[95175,95177],[95178,95182],[95183,95185],[95186,95193],[95194,95200],[95201,95207],[95208,95210],[95211,95214],[95215,95221],[95222,95224],[95225,95236],[95248,95254],[95255,95257],[95258,95265],[95266,95270],[95271,95278],[95278,95279],[95280,95284],[95285,95288],[95289,95296],[95297,95299],[95300,95308],[95308,95309],[95310,95313],[95314,95322],[95323,95327],[95328,95332],[95344,95367],[95367,95370],[95371,95378],[95379,95381],[95382,95384],[95385,95387],[95388,95391],[95392,95397],[95398,95401],[95402,95408],[95409,95411],[95412,95414],[95415,95426],[95427,95436],[95436,95437],[95449,95455],[95456,95460],[95461,95465],[95466,95469],[95470,95484],[95485,95491],[95492,95494],[95495,95498],[95499,95510],[95511,95514],[95515,95521],[95522,95526],[95527,95529],[95530,95534],[95535,95541],[95542,95545],[95557,95564],[95565,95567],[95568,95572],[95573,95579],[95580,95584],[95584,95585],[95586,95589],[95590,95599],[95600,95606],[95607,95610],[95611,95613],[95614,95620],[95621,95624],[95625,95629],[95630,95632],[95633,95638],[95639,95645],[95646,95652],[95664,95670],[95671,95676],[95677,95690],[95691,95695],[95696,95700],[95701,95708],[95709,95711],[95712,95716],[95717,95726],[95726,95727],[95738,95739],[95740,95752],[95752,95753],[95754,95764],[95765,95772],[95773,95775],[95776,95779],[95780,95784],[95785,95793],[95794,95796],[95797,95804],[95805,95807],[95808,95817],[95818,95821],[95822,95829],[95830,95834],[95846,95850],[95851,95855],[95855,95856],[95857,95867],[95868,95875],[95876,95885],[95886,95889],[95890,95898],[95899,95901],[95902,95904],[95905,95909],[95910,95912],[95913,95921],[95922,95927],[95928,95935],[95936,95940],[95941,95946],[95958,95964],[95965,95969],[95970,95976],[95976,95977],[95988,95989],[95990,95995],[95995,95996],[96004,96010],[96011,96014],[96015,96023],[96024,96027],[96028,96036],[96037,96040],[96041,96050],[96051,96060],[96061,96070],[96071,96073],[96074,96076],[96076,96077],[96079,96084],[96084,96085],[96086,96094],[96095,96107],[96108,96116],[96127,96134],[96135,96139],[96140,96146],[96147,96162],[96163,96171],[96172,96174],[96175,96183],[96184,96187],[96188,96195],[96196,96220],[96230,96239],[96239,96240],[96251,96252],[96253,96269],[96280,96281],[96282,96295],[96306,96307],[96308,96319],[96321,96328],[96328,96329],[96330,96346],[96357,96361],[96362,96364],[96365,96366],[96367,96373],[96374,96388],[96389,96399],[96400,96406],[96406,96407],[96408,96413],[96414,96422],[96423,96426],[96427,96434],[96435,96439],[96440,96441],[96442,96447],[96448,96452],[96453,96458],[96458,96459],[96469,96473],[96474,96478],[96479,96484],[96485,96487],[96488,96496],[96497,96499],[96500,96503],[96504,96515],[96515,96516],[96530,96546],[96547,96553],[96554,96555],[96556,96559],[96560,96576],[96576,96577],[96577,96580],[96581,96587],[96588,96589],[96589,96590],[96590,96591],[96592,96593],[96593,96594],[96595,96596],[96596,96599],[96712,96714],[96755,96767],[96768,96769],[96769,96770],[96770,96771],[96772,96777],[96778,96780],[96781,96784],[96786,96793],[96793,96794],[96795,96808],[96819,96823],[96824,96826],[96827,96828],[96829,96835],[96835,96836],[96837,96851],[96851,96852],[96853,96863],[96864,96870],[96871,96875],[96876,96885],[96886,96889],[96890,96894],[96895,96899],[96900,96901],[96902,96906],[96906,96907],[96907,96911],[96911,96912],[96912,96918],[96928,96934],[96934,96935],[96936,96938],[96939,96942],[96943,96944],[96945,96957],[96957,96958],[96959,96962],[96963,96969],[96970,96980],[96981,96985],[96986,96987],[96988,96993],[96994,97000],[97001,97006],[97007,97010],[97011,97016],[97017,97021],[97022,97027],[97028,97029],[97039,97048],[97049,97057],[97058,97061],[97062,97065],[97066,97070],[97071,97073],[97074,97077],[97078,97082],[97082,97083],[97083,97087],[97087,97088],[97088,97094],[97094,97095],[97109,97122],[97123,97131],[97132,97133],[97134,97137],[97138,97151],[97151,97153],[97153,97162],[97163,97170],[97170,97172],[97192,97198],[97198,97199],[97199,97204],[97204,97206],[97210,97217],[97217,97218],[97219,97230],[97241,97245],[97246,97252],[97253,97258],[97259,97262],[97263,97270],[97271,97275],[97276,97280],[97281,97282],[97283,97287],[97287,97288],[97289,97293],[97294,97299],[97300,97302],[97303,97309],[97310,97314],[97315,97317],[97318,97324],[97325,97330],[97331,97336],[97337,97339],[97340,97349],[97359,97364],[97364,97365],[97366,97368],[97369,97372],[97373,97378],[97379,97381],[97382,97388],[97389,97392],[97393,97400],[97401,97405],[97406,97408],[97409,97412],[97413,97417],[97418,97420],[97421,97425],[97426,97430],[97431,97434],[97435,97442],[97443,97446],[97447,97449],[97450,97459],[97469,97479],[97480,97483],[97484,97493],[97494,97496],[97497,97500],[97501,97510],[97510,97511],[97525,97529],[97530,97540],[97541,97542],[97543,97546],[97547,97551],[97551,97554],[97554,97558],[97558,97559],[97559,97561],[97561,97562],[97562,97567],[97567,97568],[97568,97571],[97571,97574],[97586,97597],[97598,97604],[97605,97606],[97607,97610],[97611,97622],[97622,97623],[97623,97633],[97633,97634],[97650,97661],[97661,97662],[97662,97668],[97668,97670],[97670,97681],[97681,97682],[97682,97694],[97694,97696],[97697,97701],[97701,97704],[97717,97720],[97721,97732],[97733,97737],[97738,97742],[97743,97746],[97747,97749],[97750,97753],[97754,97760],[97761,97768],[97769,97770],[97770,97771],[97771,97772],[97773,97781],[97782,97790],[97790,97791],[97792,97800],[97801,97804],[97805,97812],[97822,97829],[97830,97832],[97833,97840],[97841,97843],[97844,97856],[97857,97861],[97862,97870],[97871,97875],[97876,97877],[97878,97882],[97883,97885],[97886,97889],[97890,97896],[97897,97899],[97900,97903],[97904,97914],[97915,97925],[97925,97926],[97929,97932],[97932,97933],[97934,97946],[97947,97951],[97952,97960],[97961,97969],[97970,97975],[97975,97976],[97977,97989],[97990,97994],[97995,98002],[98012,98028],[98030,98032],[98033,98034],[98035,98040],[98041,98053],[98054,98058],[98059,98065],[98066,98070],[98071,98079],[98080,98087],[98088,98093],[98094,98096],[98097,98100],[98101,98105],[98115,98123],[98124,98125],[98125,98128],[98128,98129],[98130,98131],[98131,98132],[98132,98133],[98134,98139],[98139,98140],[98146,98162],[98163,98173],[98174,98184],[98185,98191],[98192,98197],[98198,98205],[98206,98209],[98219,98242],[98243,98252],[98253,98257],[98258,98267],[98268,98275],[98276,98280],[98281,98288],[98289,98298],[98298,98299],[98310,98314],[98315,98324],[98325,98327],[98328,98336],[98337,98344],[98345,98348],[98349,98365],[98366,98374],[98375,98378],[98379,98386],[98387,98390],[98391,98401],[98411,98415],[98416,98419],[98420,98426],[98427,98439],[98440,98445],[98453,98481],[98481,98482],[98483,98485],[98486,98494],[98494,98495],[98496,98499],[98509,98513],[98518,98549],[98550,98552],[98553,98557],[98558,98560],[98561,98568],[98569,98572],[98573,98580],[98581,98584],[98585,98587],[98588,98589],[98590,98600],[98610,98633],[98634,98642],[98643,98645],[98646,98652],[98653,98656],[98657,98664],[98665,98669],[98670,98673],[98674,98679],[98680,98683],[98683,98684],[98685,98688],[98689,98697],[98698,98705],[98715,98719],[98720,98723],[98724,98732],[98733,98756],[98757,98765],[98766,98768],[98769,98776],[98777,98780],[98781,98789],[98790,98797],[98798,98801],[98802,98804],[98805,98813],[98823,98825],[98826,98834],[98835,98843],[98843,98844],[98855,98871],[98872,98878],[98879,98881],[98882,98895],[98898,98900],[98901,98909],[98910,98919],[98920,98928],[98929,98936],[98937,98940],[98941,98944],[98945,98953],[98963,98971],[98972,98975],[98976,98981],[98982,98988],[98988,98989],[98990,99003],[99004,99011],[99012,99027],[99028,99030],[99031,99034],[99035,99043],[99044,99047],[99048,99056],[99066,99074],[99074,99075],[99076,99083],[99084,99094],[99095,99099],[99100,99107],[99108,99116],[99117,99120],[99121,99129],[99130,99132],[99133,99142],[99143,99154],[99155,99163],[99173,99180],[99181,99191],[99192,99195],[99196,99206],[99206,99207],[99221,99234],[99235,99243],[99244,99245],[99246,99266],[99266,99267],[99267,99273],[99273,99275],[99295,99296],[99296,99299],[99299,99300],[99300,99303],[99304,99316],[99316,99319],[99339,99340],[99340,99343],[99343,99344],[99344,99347],[99348,99362],[99362,99364],[99364,99377],[99377,99378],[99378,99381],[99381,99384],[99404,99405],[99405,99408],[99408,99409],[99409,99412],[99413,99428],[99428,99431],[99451,99452],[99452,99455],[99455,99456],[99456,99459],[99460,99479],[99479,99482],[99502,99503],[99503,99508],[99508,99511],[99523,99539],[99540,99555],[99556,99557],[99558,99561],[99562,99578],[99578,99579],[99579,99587],[99587,99588],[99589,99593],[99593,99595],[99607,99622],[99623,99638],[99639,99640],[99641,99644],[99645,99672],[99672,99673],[99693,99708],[99708,99709],[99729,99732],[99733,99768],[99768,99769],[99769,99785],[99785,99786],[99786,99793],[99793,99796],[99915,99917],[99956,99968],[99969,99970],[99970,99971],[99971,99972],[99973,99978],[99979,99981],[99982,99985],[99997,100015],[100016,100025],[100026,100027],[100028,100031],[100032,100057],[100057,100060],[100071,100080],[100080,100081],[100081,100088],[100088,100089],[100089,100104],[100104,100106],[100109,100116],[100116,100117],[100118,100130],[100131,100135],[100136,100143],[100144,100152],[100162,100185],[100191,100201],[100202,100203],[100204,100211],[100212,100215],[100216,100228],[100229,100239],[100240,100242],[100243,100244],[100245,100253],[100254,100259],[100260,100262],[100271,100283],[100284,100288],[100289,100297],[100297,100298],[100299,100307],[100308,100316],[100317,100320],[100321,100329],[100330,100332],[100333,100337],[100338,100342],[100343,100345],[100346,100354],[100355,100363],[100364,100371],[100371,100372],[100381,100388],[100389,100399],[100400,100407],[100408,100416],[100417,100420],[100421,100429],[100430,100432],[100433,100437],[100438,100442],[100443,100445],[100446,100457],[100458,100466],[100467,100471],[100472,100482],[100482,100483],[100492,100495],[100496,100500],[100501,100508],[100509,100511],[100512,100513],[100514,100521],[100522,100529],[100530,100532],[100533,100535],[100536,100544],[100545,100546],[100547,100555],[100556,100562],[100563,100567],[100568,100569],[100570,100577],[100578,100584],[100585,100587],[100588,100590],[100591,100595],[100604,100608],[100609,100611],[100612,100615],[100616,100622],[100623,100625],[100626,100634],[100635,100637],[100638,100641],[100642,100647],[100648,100655],[100655,100656],[100669,100705],[100706,100708],[100709,100710],[100711,100714],[100715,100751],[100751,100753],[100754,100755],[100772,100778],[100779,100816],[100817,100831],[100831,100832],[100856,100861],[100862,100873],[100874,100881],[100881,100882],[100906,100911],[100912,100923],[100924,100931],[100931,100932],[100933,100934],[100954,100956],[100957,100963],[100964,100971],[100972,100979],[100980,100982],[100983,100989],[100990,100993],[100994,101004],[101024,101030],[101031,101034],[101035,101060],[101060,101063],[101079,101080],[101097,101103],[101104,101108],[101109,101115],[101115,101116],[101140,101145],[101146,101157],[101158,101165],[101165,101166],[101190,101195],[101196,101213],[101214,101226],[101226,101227],[101251,101256],[101257,101268],[101269,101276],[101276,101277],[101278,101284],[101285,101298],[101298,101299],[101300,101311],[101312,101313],[101333,101345],[101346,101354],[101355,101356],[101357,101369],[101369,101370],[101370,101381],[101381,101384],[101404,101412],[101412,101413],[101413,101426],[101426,101427],[101427,101437],[101437,101438],[101438,101443],[101443,101445],[101465,101476],[101477,101481],[101482,101483],[101484,101487],[101488,101499],[101499,101500],[101500,101503],[101504,101508],[101508,101510],[101510,101516],[101516,101517],[101517,101521],[101521,101524],[101552,101563],[101563,101564],[101564,101570],[101570,101572],[101572,101576],[101576,101577],[101577,101581],[101581,101583],[101584,101590],[101590,101591],[101591,101596],[101596,101599],[101619,101627],[101627,101628],[101628,101637],[101637,101638],[101638,101642],[101642,101644],[101664,101676],[101676,101677],[101677,101691],[101691,101692],[101692,101695],[101696,101722],[101722,101723],[101723,101731],[101731,101734],[101750,101751],[101763,101765],[101776,101783],[101784,101792],[101793,101797],[101798,101800],[101801,101812],[101813,101815],[101816,101817],[101818,101829],[101830,101836],[101836,101837],[101838,101847],[101848,101850],[101851,101859],[101859,101860],[101861,101868],[101869,101877],[101886,101892],[101893,101896],[101897,101900],[101901,101909],[101910,101919],[101920,101926],[101927,101933],[101934,101936],[101937,101942],[101943,101952],[101953,101956],[101957,101969],[101969,101970],[101972,101979],[101979,101980],[101981,101993],[101994,101998],[101999,102007],[102017,102020],[102021,102025],[102026,102037],[102038,102048],[102049,102051],[102052,102055],[102056,102068],[102069,102076],[102077,102085],[102086,102094],[102095,102097],[102098,102103],[102104,102112],[102121,102133],[102134,102136],[102137,102144],[102145,102147],[102148,102153],[102154,102166],[102167,102169],[102170,102173],[102174,102178],[102179,102187],[102188,102192],[102193,102195],[102196,102199],[102200,102206],[102207,102214],[102223,102231],[102232,102235],[102236,102237],[102237,102238],[102238,102239],[102240,102246],[102247,102249],[102250,102260],[102261,102264],[102265,102272],[102273,102275],[102276,102284],[102285,102288],[102289,102293],[102294,102301],[102302,102304],[102305,102306],[102307,102313],[102322,102328],[102329,102331],[102332,102339],[102340,102347],[102347,102348],[102349,102352],[102353,102361],[102362,102364],[102365,102382],[102383,102389],[102390,102392],[102393,102394],[102395,102404],[102405,102407],[102408,102411],[102420,102450],[102451,102457],[102458,102460],[102461,102467],[102468,102469],[102470,102478],[102479,102481],[102482,102484],[102485,102486],[102487,102492],[102493,102498],[102499,102503],[102504,102512],[102521,102528],[102529,102536],[102537,102546],[102546,102547],[102557,102560],[102561,102578],[102579,102588],[102589,102592],[102593,102595],[102596,102606],[102607,102611],[102612,102617],[102618,102621],[102622,102631],[102632,102639],[102639,102640],[102650,102651],[102652,102662],[102662,102663],[102669,102676],[102677,102680],[102681,102689],[102690,102694],[102695,102702],[102703,102710],[102710,102711],[102721,102722],[102723,102734],[102734,102735],[102741,102748],[102749,102752],[102753,102760],[102761,102765],[102766,102774],[102775,102782],[102783,102787],[102788,102791],[102792,102801],[102802,102806],[102807,102812],[102812,102813],[102823,102824],[102825,102839],[102839,102840],[102847,102854],[102855,102857],[102858,102862],[102863,102871],[102872,102875],[102876,102885],[102886,102889],[102890,102897],[102898,102906],[102906,102907],[102917,102918],[102919,102930],[102930,102931],[102937,102947],[102948,102955],[102956,102958],[102959,102962],[102963,102966],[102967,102974],[102975,102983],[102984,102987],[102988,102992],[102993,103002],[103002,103003],[103013,103014],[103015,103026],[103026,103027],[103028,103032],[103033,103044],[103045,103053],[103054,103056],[103057,103059],[103060,103067],[103068,103070],[103071,103075],[103076,103079],[103080,103090],[103091,103101],[103102,103107],[103118,103121],[103122,103124],[103125,103129],[103130,103140],[103141,103152],[103153,103155],[103156,103159],[103160,103166],[103166,103167],[103168,103172],[103173,103181],[103182,103185],[103186,103188],[103189,103193],[103194,103196],[103197,103203],[103204,103205],[103206,103210],[103211,103218],[103229,103237],[103238,103248],[103249,103256],[103257,103259],[103260,103261],[103262,103270],[103271,103273],[103274,103276],[103277,103283],[103284,103290],[103290,103291],[103402,103404],[103443,103455],[103456,103457],[103457,103458],[103458,103459],[103460,103465],[103466,103468],[103469,103472],[103482,103483],[103484,103494],[103494,103495],[103501,103505],[103506,103513],[103514,103517],[103518,103522],[103523,103530],[103531,103539],[103539,103540],[103550,103551],[103552,103562],[103562,103563],[103569,103576],[103577,103584],[103585,103588],[103589,103593],[103594,103601],[103602,103610],[103610,103611],[103623,103659],[103660,103662],[103663,103664],[103665,103668],[103669,103705],[103705,103707],[103708,103709],[103725,103731],[103732,103769],[103770,103784],[103784,103785],[103808,103813],[103814,103825],[103826,103833],[103833,103834],[103857,103862],[103863,103874],[103875,103882],[103882,103883],[103884,103885],[103904,103906],[103907,103913],[103914,103921],[103922,103929],[103930,103932],[103933,103939],[103940,103943],[103944,103954],[103973,103979],[103980,103983],[103984,104009],[104009,104012],[104027,104028],[104044,104050],[104051,104055],[104056,104062],[104062,104063],[104086,104091],[104092,104103],[104104,104111],[104111,104112],[104135,104140],[104141,104158],[104159,104171],[104171,104172],[104195,104200],[104201,104212],[104213,104220],[104220,104221],[104222,104228],[104229,104242],[104242,104243],[104244,104255],[104256,104257],[104277,104280],[104281,104287],[104287,104289],[104290,104291],[104315,104324],[104347,104353],[104354,104358],[104359,104362],[104362,104364],[104365,104366],[104393,104396],[104397,104398],[104429,104435],[104435,104436],[104436,104441],[104441,104442],[104442,104444],[104444,104446],[104473,104474],[104501,104506],[104506,104507],[104507,104527],[104528,104530],[104530,104531],[104532,104534],[104561,104573],[104574,104582],[104583,104584],[104585,104597],[104597,104598],[104598,104609],[104609,104612],[104639,104647],[104647,104648],[104648,104661],[104661,104662],[104662,104672],[104672,104673],[104673,104678],[104678,104680],[104707,104718],[104719,104723],[104724,104725],[104726,104729],[104730,104741],[104741,104742],[104742,104745],[104746,104750],[104750,104752],[104752,104758],[104758,104759],[104759,104763],[104763,104766],[104801,104812],[104812,104813],[104813,104819],[104819,104821],[104821,104825],[104825,104826],[104826,104830],[104830,104832],[104833,104839],[104839,104840],[104840,104845],[104845,104848],[104875,104883],[104883,104884],[104884,104893],[104893,104894],[104894,104898],[104898,104900],[104927,104939],[104939,104940],[104940,104954],[104954,104955],[104955,104958],[104959,104985],[104985,104986],[104986,104994],[104994,104997],[105020,105021],[105040,105042],[105042,105047],[105047,105050],[105066,105067],[105078,105080],[105091,105097],[105098,105102],[105103,105115],[105116,105125],[105126,105129],[105130,105133],[105134,105145],[105146,105149],[105150,105153],[105154,105157],[105158,105160],[105161,105169],[105170,105182],[105182,105183],[105184,105188],[105197,105205],[105206,105213],[105214,105222],[105223,105227],[105228,105234],[105235,105239],[105240,105248],[105249,105255],[105256,105258],[105259,105267],[105268,105270],[105271,105275],[105276,105280],[105281,105284],[105285,105291],[105300,105302],[105303,105304],[105305,105309],[105309,105310],[105312,105319],[105319,105320],[105321,105333],[105334,105338],[105339,105346],[105347,105355],[105365,105389],[105394,105405],[105406,105409],[105410,105417],[105418,105420],[105421,105433],[105434,105444],[105445,105447],[105448,105452],[105453,105461],[105461,105462],[105463,105465],[105474,105476],[105477,105478],[105479,105487],[105488,105497],[105498,105502],[105503,105505],[105506,105530],[105531,105533],[105534,105541],[105542,105544],[105545,105553],[105554,105558],[105559,105566],[105575,105582],[105583,105586],[105587,105589],[105590,105596],[105597,105600],[105601,105608],[105609,105613],[105614,105615],[105616,105628],[105629,105635],[105636,105640],[105641,105645],[105646,105656],[105656,105657],[105667,105671],[105672,105673],[105673,105674],[105674,105675],[105676,105682],[105683,105686],[105687,105694],[105695,105697],[105698,105705],[105706,105708],[105709,105712],[105713,105737],[105738,105747],[105747,105748],[105758,105759],[105760,105775],[105775,105776],[105783,105790],[105791,105795],[105796,105797],[105798,105802],[105803,105810],[105811,105818],[105819,105821],[105822,105830],[105830,105831],[105841,105842],[105843,105857],[105857,105858],[105865,105872],[105873,105875],[105876,105883],[105884,105885],[105886,105891],[105892,105894],[105895,105902],[105903,105907],[105908,105911],[105912,105926],[105926,105927],[105928,105931],[105942,105951],[105952,105961],[105962,105965],[105966,105968],[105969,105973],[105974,105976],[105977,105984],[105985,105990],[105991,105997],[105998,106000],[106001,106004],[106005,106013],[106014,106016],[106017,106028],[106029,106035],[106046,106048],[106049,106056],[106057,106061],[106062,106069],[106069,106070],[106071,106074],[106075,106083],[106084,106087],[106088,106091],[106092,106095],[106096,106122],[106122,106124],[106125,106131],[106142,106144],[106145,106149],[106150,106153],[106154,106161],[106162,106164],[106165,106168],[106169,106172],[106173,106180],[106181,106188],[106189,106192],[106193,106197],[106198,106203],[106204,106212],[106212,106213],[106214,106220],[106221,106225],[106226,106230],[106231,106234],[106245,106259],[106260,106266],[106267,106269],[106270,106273],[106274,106285],[106286,106289],[106290,106296],[106297,106301],[106302,106304],[106305,106309],[106310,106316],[106317,106320],[106321,106328],[106329,106331],[106332,106336],[106337,106343],[106354,106358],[106358,106359],[106360,106363],[106364,106373],[106374,106380],[106381,106384],[106385,106387],[106388,106394],[106395,106398],[106399,106403],[106404,106406],[106407,106412],[106413,106419],[106420,106422],[106423,106429],[106430,106435],[106436,106441],[106442,106455],[106566,106568],[106607,106619],[106620,106621],[106621,106622],[106622,106623],[106624,106629],[106630,106632],[106633,106636],[106648,106652],[106653,106656],[106657,106665],[106666,106668],[106669,106676],[106677,106679],[106680,106690],[106691,106695],[106696,106703],[106703,106704],[106705,106709],[106710,106715],[106716,106718],[106719,106726],[106727,106731],[106732,106734],[106735,106738],[106739,106747],[106758,106765],[106766,106773],[106774,106777],[106778,106779],[106780,106787],[106788,106794],[106795,106803],[106804,106806],[106807,106809],[106809,106810],[106820,106821],[106822,106838],[106838,106839],[106846,106853],[106854,106856],[106857,106863],[106864,106868],[106869,106872],[106873,106880],[106881,106884],[106885,106889],[106890,106895],[106896,106905],[106905,106906],[106916,106917],[106918,106924],[106924,106925],[106930,106937],[106938,106940],[106941,106947],[106948,106952],[106953,106956],[106957,106964],[106965,106975],[106976,106986],[106987,106997],[106997,106998],[107008,107009],[107010,107022],[107022,107023],[107030,107037],[107038,107040],[107041,107050],[107051,107053],[107054,107058],[107059,107061],[107062,107064],[107065,107073],[107074,107085],[107085,107086],[107087,107091],[107092,107098],[107099,107106],[107117,107121],[107122,107124],[107125,107128],[107129,107136],[107137,107146],[107147,107149],[107150,107155],[107156,107163],[107164,107166],[107167,107169],[107170,107172],[107173,107182],[107183,107195],[107195,107196],[107206,107207],[107208,107217],[107217,107218],[107219,107226],[107227,107228],[107229,107235],[107236,107238],[107239,107242],[107243,107250],[107251,107260],[107260,107261],[107262,107266],[107267,107276],[107276,107277],[107278,107282],[107283,107289],[107290,107297],[107298,107302],[107313,107315],[107316,107319],[107320,107327],[107328,107337],[107338,107340],[107341,107346],[107347,107354],[107354,107355],[107365,107366],[107367,107373],[107373,107374],[107379,107389],[107390,107397],[107398,107400],[107401,107404],[107405,107408],[107409,107416],[107417,107426],[107427,107436],[107436,107437],[107438,107440],[107441,107444],[107445,107452],[107453,107463],[107474,107484],[107485,107493],[107494,107503],[107503,107505],[107506,107509],[107510,107512],[107513,107517],[107518,107520],[107521,107527],[107528,107531],[107532,107538],[107538,107539],[107540,107542],[107543,107546],[107547,107554],[107555,107565],[107576,107586],[107587,107597],[107598,107610],[107610,107612],[107613,107616],[107617,107619],[107620,107624],[107625,107627],[107628,107634],[107635,107638],[107639,107644],[107644,107645],[107655,107656],[107657,107662],[107662,107663],[107668,107674],[107675,107678],[107679,107687],[107688,107691],[107692,107700],[107701,107704],[107705,107714],[107715,107724],[107725,107734],[107735,107737],[107738,107740],[107740,107741],[107751,107775],[107780,107795],[107796,107799],[107800,107808],[107809,107811],[107812,107814],[107815,107826],[107826,107827],[107837,107862],[107869,107871],[107872,107873],[107874,107878],[107879,107884],[107885,107899],[107900,107902],[107903,107906],[107907,107931],[107940,107949],[107950,107957],[107958,107962],[107963,107966],[107967,107974],[107974,107975],[107976,107982],[107983,107987],[107988,107992],[107993,107997],[107998,108006],[108007,108014],[108015,108022],[108023,108030],[108031,108033],[108034,108040],[108049,108052],[108053,108062],[108063,108069],[108070,108072],[108073,108077],[108078,108081],[108082,108092],[108093,108098],[108099,108106],[108107,108115],[108115,108116],[108118,108125],[108125,108126],[108127,108139],[108140,108144],[108145,108153],[108154,108162],[108172,108197],[108205,108216],[108217,108220],[108221,108228],[108229,108231],[108232,108244],[108245,108255],[108256,108258],[108259,108263],[108264,108273],[108273,108274],[108283,108285],[108286,108288],[108289,108290],[108291,108299],[108300,108309],[108310,108314],[108315,108317],[108318,108342],[108343,108345],[108346,108354],[108355,108357],[108358,108362],[108363,108371],[108372,108379],[108388,108391],[108392,108394],[108395,108401],[108402,108405],[108406,108413],[108414,108416],[108417,108418],[108419,108431],[108432,108438],[108439,108443],[108444,108448],[108449,108459],[108459,108460],[108470,108474],[108475,108476],[108476,108477],[108477,108478],[108479,108485],[108486,108489],[108490,108497],[108498,108500],[108501,108508],[108509,108511],[108512,108515],[108516,108541],[108542,108551],[108551,108552],[108562,108563],[108564,108580],[108580,108581],[108588,108595],[108596,108598],[108599,108607],[108608,108609],[108610,108614],[108615,108623],[108624,108631],[108632,108638],[108638,108639],[108649,108650],[108651,108665],[108665,108666],[108674,108681],[108682,108684],[108685,108690],[108691,108694],[108695,108696],[108697,108702],[108703,108705],[108706,108713],[108714,108716],[108717,108720],[108721,108735],[108735,108736],[108737,108740],[108751,108760],[108766,108775],[108776,108779],[108780,108782],[108783,108787],[108788,108790],[108791,108798],[108799,108805],[108806,108812],[108813,108815],[108816,108819],[108820,108828],[108829,108831],[108832,108843],[108854,108860],[108861,108863],[108864,108871],[108872,108876],[108877,108884],[108884,108885],[108886,108890],[108891,108894],[108895,108902],[108903,108905],[108906,108914],[108914,108915],[108916,108919],[108920,108928],[108929,108933],[108934,108938],[108949,108972],[108972,108975],[108976,108983],[108984,108986],[108987,108989],[108990,108992],[108993,108996],[108997,109002],[109003,109006],[109007,109013],[109014,109016],[109017,109019],[109020,109031],[109032,109041],[109041,109042],[109053,109059],[109060,109064],[109065,109069],[109070,109073],[109074,109088],[109089,109095],[109096,109098],[109099,109102],[109103,109114],[109115,109118],[109119,109125],[109126,109130],[109131,109133],[109134,109138],[109139,109145],[109146,109149],[109160,109167],[109168,109170],[109171,109175],[109176,109182],[109183,109187],[109187,109188],[109189,109192],[109193,109202],[109203,109209],[109210,109213],[109214,109216],[109217,109223],[109224,109227],[109228,109232],[109233,109235],[109236,109241],[109242,109248],[109249,109255],[109266,109272],[109273,109278],[109279,109292],[109293,109297],[109298,109302],[109303,109310],[109311,109313],[109314,109318],[109319,109328],[109328,109329],[109330,109334],[109335,109340],[109341,109343],[109344,109351],[109352,109356],[109357,109360],[109361,109363],[109364,109367],[109378,109386],[109387,109395],[109396,109403],[109404,109407],[109408,109409],[109410,109417],[109418,109424],[109425,109433],[109434,109436],[109437,109439],[109439,109440],[109441,109445],[109446,109448],[109449,109471],[109471,109473],[109484,109491],[109492,109496],[109496,109497],[109507,109508],[109509,109526],[109526,109527],[109534,109541],[109542,109544],[109545,109551],[109552,109556],[109557,109560],[109561,109569],[109570,109573],[109574,109578],[109579,109584],[109585,109592],[109593,109596],[109596,109597],[109607,109608],[109609,109615],[109615,109616],[109621,109628],[109629,109631],[109632,109638],[109639,109643],[109644,109647],[109648,109656],[109657,109667],[109668,109678],[109679,109689],[109689,109690],[109700,109701],[109702,109707],[109707,109708],[109713,109719],[109720,109723],[109724,109732],[109733,109736],[109737,109745],[109746,109749],[109750,109759],[109760,109769],[109770,109779],[109780,109782],[109783,109785],[109785,109786],[109796,109821],[109827,109842],[109843,109846],[109847,109855],[109856,109858],[109859,109861],[109862,109873],[109873,109874],[109884,109910],[109917,109919],[109920,109921],[109922,109927],[109928,109942],[109943,109945],[109946,109949],[109950,109975],[109984,109993],[109994,110001],[110002,110006],[110007,110010],[110011,110018],[110018,110019],[110020,110023],[110024,110032],[110033,110036],[110037,110041],[110042,110045],[110046,110048],[110049,110052],[110053,110077],[110188,110190],[110229,110241],[110242,110243],[110243,110244],[110244,110245],[110246,110251],[110252,110254],[110255,110258],[110269,110278],[110279,110281],[110282,110293],[110294,110300],[110301,110304],[110305,110312],[110313,110320],[110321,110323],[110324,110325],[110326,110338],[110339,110343],[110344,110354],[110354,110355],[110356,110358],[110359,110361],[110362,110364],[110374,110385],[110386,110388],[110389,110392],[110393,110403],[110404,110412],[110413,110415],[110416,110419],[110420,110428],[110428,110429],[110431,110438],[110438,110439],[110440,110452],[110453,110460],[110461,110468],[110469,110477],[110488,110491],[110492,110502],[110503,110505],[110506,110518],[110519,110523],[110524,110531],[110532,110540],[110541,110543],[110544,110549],[110550,110557],[110558,110560],[110561,110565],[110566,110568],[110569,110577],[110578,110582],[110592,110599],[110600,110608],[110608,110609],[110610,110617],[110618,110620],[110621,110629],[110630,110632],[110633,110664],[110665,110667],[110668,110672],[110673,110675],[110676,110684],[110685,110686],[110696,110704],[110705,110707],[110708,110715],[110716,110724],[110725,110728],[110729,110731],[110732,110739],[110740,110741],[110742,110749],[110750,110753],[110754,110756],[110757,110758],[110759,110769],[110770,110777],[110778,110785],[110785,110786],[110787,110795],[110805,110813],[110814,110818],[110819,110820],[110821,110825],[110826,110832],[110833,110847],[110848,110850],[110851,110854],[110855,110862],[110863,110870],[110871,110879],[110880,110885],[110886,110888],[110889,110890],[110891,110898],[110899,110906],[110916,110924],[110925,110934],[110934,110935],[110936,110967],[110968,110976],[110977,110981],[110982,110987],[110988,110995],[110995,110996],[110997,110999],[111000,111005],[111005,111006],[111007,111010],[111020,111022],[111022,111026],[111026,111027],[111041,111065],[111065,111067],[111068,111085],[111086,111087],[111088,111093],[111104,111128],[111128,111130],[111131,111148],[111149,111150],[111151,111156],[111167,111191],[111191,111193],[111194,111211],[111212,111213],[111214,111219],[111230,111262],[111263,111278],[111279,111280],[111299,111302],[111303,111335],[111335,111338],[111349,111364],[111364,111365],[111365,111373],[111373,111376],[111376,111383],[111383,111387],[111388,111405],[111405,111407],[111418,111433],[111433,111434],[111434,111442],[111442,111446],[111446,111448],[111448,111450],[111451,111468],[111468,111470],[111481,111496],[111496,111497],[111497,111505],[111505,111510],[111511,111528],[111528,111530],[111542,111547],[111551,111554],[111559,111569],[111575,111577],[111621,111628],[111634,111638],[111643,111656],[111660,111675],[111685,111687],[111697,111728],[111728,111729],[111730,111733],[111734,111742],[111742,111743],[111744,111749],[111750,111752],[111753,111760],[111761,111772],[111772,111773],[111776,111781],[111781,111782],[111783,111795],[111796,111800],[111801,111808],[111809,111817],[111828,111852],[111855,111857],[111858,111859],[111860,111865],[111866,111878],[111879,111885],[111886,111890],[111891,111895],[111896,111904],[111905,111912],[111913,111918],[111919,111921],[111931,111934],[111935,111938],[111939,111940],[111940,111952],[111952,111953],[111954,111955],[111955,111956],[111956,111957],[111958,111963],[111963,111964],[111965,111989],[111990,112000],[112001,112011],[112012,112018],[112019,112024],[112034,112041],[112042,112045],[112046,112069],[112070,112079],[112080,112084],[112085,112094],[112095,112102],[112103,112107],[112108,112115],[112116,112125],[112125,112126],[112137,112161],[112165,112171],[112172,112174],[112178,112210],[112211,112213],[112214,112223],[112233,112244],[112245,112253],[112254,112261],[112262,112272],[112273,112276],[112277,112287],[112288,112291],[112292,112294],[112295,112301],[112302,112311],[112312,112319],[112329,112335],[112336,112338],[112339,112343],[112344,112351],[112352,112353],[112354,112362],[112363,112372],[112372,112373],[112374,112379],[112380,112383],[112384,112388],[112389,112393],[112394,112400],[112401,112409],[112419,112430],[112430,112431],[112432,112445],[112446,112454],[112455,112457],[112458,112461],[112466,112498],[112499,112507],[112517,112521],[112522,112524],[112525,112529],[112530,112532],[112533,112541],[112542,112551],[112552,112560],[112561,112568],[112569,112572],[112573,112576],[112577,112585],[112586,112594],[112595,112598],[112599,112604],[112614,112620],[112620,112621],[112622,112635],[112636,112643],[112644,112659],[112660,112662],[112663,112666],[112667,112675],[112676,112679],[112680,112688],[112689,112697],[112697,112698],[112699,112702],[112712,112718],[112719,112721],[112722,112730],[112731,112733],[112734,112738],[112739,112741],[112742,112750],[112751,112753],[112754,112786],[112787,112789],[112790,112792],[112793,112797],[112807,112810],[112811,112814],[112815,112819],[112820,112826],[112827,112829],[112830,112834],[112835,112842],[112843,112852],[112853,112860],[112861,112864],[112865,112875],[112876,112883],[112884,112889],[112899,112936],[112937,112946],[112946,112947],[112948,112952],[112953,112961],[112962,112970],[112971,112973],[112974,112984],[112994,113002],[113003,113007],[113008,113011],[113012,113051],[113051,113053],[113054,113060],[113061,113068],[113069,113073],[113073,113074],[113087,113111],[113112,113114],[113115,113116],[113117,113120],[113121,113145],[113145,113148],[113159,113174],[113175,113190],[113191,113192],[113193,113196],[113197,113224],[113224,113225],[113225,113227],[113227,113228],[113247,113250],[113251,113286],[113286,113287],[113287,113303],[113303,113304],[113304,113311],[113311,113314],[113325,113344],[113345,113354],[113355,113356],[113357,113360],[113361,113387],[113387,113390],[113401,113410],[113410,113411],[113411,113418],[113418,113419],[113419,113434],[113434,113436],[113448,113451],[113452,113470],[113471,113478],[113479,113484],[113485,113488],[113489,113491],[113492,113496],[113497,113499],[113500,113508],[113509,113513],[113514,113517],[113518,113523],[113524,113531],[113532,113534],[113544,113576],[113584,113594],[113594,113595],[113596,113602],[113603,113607],[113608,113626],[113627,113635],[113645,113651],[113652,113656],[113657,113664],[113665,113666],[113667,113675],[113676,113685],[113686,113690],[113690,113691],[113692,113694],[113695,113699],[113700,113703],[113704,113711],[113712,113716],[113717,113731],[113732,113735],[113736,113740],[113741,113744],[113754,113760],[113761,113770],[113771,113784],[113784,113785],[113897,113899],[113938,113950],[113951,113952],[113952,113953],[113953,113954],[113955,113960],[113961,113963],[113964,113967],[113978,113991],[113992,114000],[114001,114002],[114003,114023],[114023,114024],[114024,114030],[114030,114032],[114050,114051],[114051,114054],[114054,114055],[114055,114058],[114059,114073],[114073,114076],[114094,114095],[114095,114098],[114098,114099],[114099,114102],[114103,114120],[114120,114123],[114141,114142],[114142,114145],[114145,114146],[114146,114149],[114150,114168],[114168,114171],[114189,114190],[114190,114193],[114193,114194],[114194,114197],[114198,114214],[114214,114216],[114216,114228],[114228,114229],[114229,114232],[114232,114235],[114253,114254],[114254,114257],[114257,114258],[114258,114261],[114262,114283],[114283,114284],[114284,114288],[114288,114290],[114308,114309],[114309,114314],[114314,114317],[114327,114345],[114346,114355],[114356,114357],[114358,114361],[114362,114380],[114380,114381],[114381,114389],[114389,114391],[114401,114422],[114423,114427],[114428,114429],[114430,114435],[114445,114465],[114466,114472],[114473,114474],[114475,114484],[114484,114485],[114485,114492],[114492,114493],[114511,114514],[114515,114540],[114540,114541],[114567,114570],[114571,114579],[114579,114581],[114581,114590],[114590,114593],[114619,114622],[114623,114639],[114639,114641],[114641,114644],[114644,114646],[114647,114653],[114671,114674],[114675,114701],[114701,114704],[114722,114726],[114726,114728],[114738,114750],[114751,114759],[114760,114761],[114762,114768],[114768,114769],[114769,114772],[114772,114775],[114778,114785],[114785,114786],[114787,114799],[114800,114804],[114805,114812],[114813,114821],[114831,114855],[114861,114872],[114873,114876],[114877,114884],[114885,114887],[114888,114900],[114901,114911],[114912,114914],[114915,114919],[114920,114928],[114928,114929],[114930,114932],[114941,114943],[114944,114945],[114946,114954],[114955,114964],[114965,114970],[114971,114978],[114979,114982],[114983,114990],[114991,114993],[114994,115002],[115003,115005],[115006,115010],[115011,115018],[115019,115026],[115027,115030],[115031,115033],[115034,115040],[115049,115056],[115057,115064],[115065,115067],[115068,115069],[115070,115082],[115083,115089],[115090,115094],[115095,115099],[115100,115110],[115110,115111],[115121,115131],[115132,115139],[115140,115149],[115150,115157],[115158,115160],[115161,115171],[115172,115175],[115176,115180],[115181,115188],[115189,115196],[115197,115201],[115202,115206],[115207,115211],[115212,115215],[115216,115218],[115227,115232],[115233,115235],[115236,115241],[115242,115249],[115250,115255],[115256,115258],[115259,115266],[115267,115270],[115271,115283],[115283,115285],[115286,115292],[115292,115293],[115294,115296],[115297,115302],[115303,115308],[115309,115316],[115317,115326],[115335,115338],[115339,115347],[115348,115350],[115351,115358],[115359,115368],[115369,115378],[115379,115388],[115389,115393],[115394,115397],[115398,115400],[115401,115407],[115408,115414],[115415,115417],[115418,115428],[115429,115438],[115447,115453],[115454,115456],[115457,115463],[115464,115467],[115468,115475],[115475,115476],[115486,115490],[115491,115492],[115492,115493],[115493,115494],[115495,115501],[115502,115505],[115506,115513],[115514,115516],[115517,115524],[115525,115527],[115528,115531],[115532,115556],[115557,115566],[115566,115567],[115577,115578],[115579,115588],[115588,115589],[115595,115602],[115603,115605],[115606,115612],[115613,115616],[115617,115624],[115625,115631],[115632,115636],[115636,115637],[115647,115648],[115649,115664],[115664,115665],[115666,115673],[115674,115676],[115677,115685],[115686,115687],[115688,115692],[115693,115700],[115701,115708],[115709,115715],[115715,115716],[115717,115720],[115721,115728],[115729,115731],[115732,115740],[115751,115753],[115754,115763],[115764,115767],[115768,115794],[115795,115804],[115805,115807],[115808,115810],[115811,115813],[115814,115816],[115817,115824],[115825,115826],[115827,115834],[115835,115841],[115841,115842],[115852,115853],[115854,115868],[115868,115869],[115876,115883],[115884,115886],[115887,115892],[115893,115896],[115897,115898],[115899,115904],[115905,115907],[115908,115915],[115916,115918],[115919,115922],[115923,115937],[115937,115938],[115939,115942],[115953,115962],[115967,115976],[115977,115980],[115981,115983],[115984,115988],[115989,115991],[115992,115999],[116000,116006],[116007,116013],[116014,116016],[116017,116020],[116021,116029],[116030,116032],[116033,116044],[116055,116061],[116062,116064],[116065,116072],[116073,116077],[116078,116085],[116085,116086],[116087,116091],[116092,116095],[116096,116103],[116104,116106],[116107,116115],[116115,116116],[116117,116120],[116121,116129],[116130,116134],[116135,116139],[116150,116173],[116173,116176],[116177,116184],[116185,116187],[116188,116190],[116191,116193],[116194,116197],[116198,116203],[116204,116207],[116208,116214],[116215,116217],[116218,116220],[116221,116232],[116233,116242],[116253,116259],[116260,116264],[116265,116269],[116270,116273],[116274,116288],[116289,116295],[116296,116298],[116299,116302],[116303,116314],[116315,116318],[116319,116325],[116326,116330],[116331,116333],[116334,116338],[116339,116345],[116356,116359],[116360,116367],[116368,116370],[116371,116375],[116376,116382],[116383,116387],[116387,116388],[116389,116392],[116393,116402],[116403,116409],[116410,116413],[116414,116416],[116417,116423],[116424,116427],[116428,116432],[116433,116435],[116436,116441],[116452,116458],[116459,116465],[116466,116472],[116473,116478],[116479,116492],[116493,116497],[116498,116502],[116503,116510],[116511,116513],[116514,116518],[116519,116528],[116528,116529],[116530,116534],[116535,116540],[116541,116543],[116554,116561],[116562,116566],[116567,116570],[116571,116573],[116574,116577],[116578,116586],[116587,116594],[116595,116602],[116603,116606],[116607,116608],[116609,116616],[116617,116623],[116624,116632],[116633,116635],[116636,116638],[116638,116639],[116640,116644],[116645,116647],[116658,116694],[116694,116696],[116697,116704],[116705,116709],[116710,116711],[116722,116723],[116724,116740],[116740,116741],[116748,116755],[116756,116758],[116759,116765],[116766,116770],[116771,116774],[116775,116782],[116783,116786],[116787,116791],[116792,116797],[116798,116805],[116806,116809],[116809,116810],[116820,116821],[116822,116828],[116828,116829],[116835,116842],[116843,116845],[116846,116852],[116853,116857],[116858,116861],[116862,116869],[116870,116880],[116881,116891],[116892,116902],[116902,116903],[116913,116914],[116915,116927],[116927,116928],[116929,116936],[116937,116939],[116940,116945],[116946,116949],[116950,116958],[116959,116961],[116962,116965],[116966,116973],[116974,116979],[116979,116980],[116981,116991],[116992,116999],[117000,117009],[117010,117013],[117024,117032],[117033,117035],[117036,117043],[117044,117053],[117054,117063],[117064,117073],[117074,117078],[117079,117082],[117083,117085],[117086,117092],[117093,117099],[117100,117102],[117103,117113],[117114,117123],[117134,117140],[117141,117143],[117144,117150],[117151,117154],[117155,117162],[117162,117163],[117173,117174],[117175,117180],[117180,117181],[117186,117192],[117193,117196],[117197,117205],[117206,117209],[117210,117218],[117219,117222],[117223,117232],[117233,117242],[117243,117252],[117253,117255],[117256,117258],[117258,117259],[117269,117293],[117299,117314],[117315,117318],[117319,117327],[117328,117330],[117331,117333],[117334,117345],[117345,117346],[117457,117459],[117498,117510],[117511,117512],[117512,117513],[117513,117514],[117515,117520],[117521,117523],[117524,117527],[117537,117562],[117568,117570],[117571,117572],[117573,117578],[117579,117593],[117594,117596],[117597,117600],[117601,117625],[117626,117635],[117644,117651],[117652,117656],[117657,117660],[117661,117668],[117668,117669],[117670,117673],[117674,117682],[117683,117686],[117687,117691],[117692,117695],[117696,117698],[117699,117702],[117703,117727],[117728,117737],[117738,117740],[117749,117760],[117761,117767],[117768,117771],[117772,117779],[117780,117787],[117788,117790],[117791,117792],[117793,117805],[117806,117810],[117811,117821],[117821,117822],[117823,117825],[117826,117828],[117829,117831],[117832,117843],[117844,117846],[117855,117858],[117859,117869],[117870,117878],[117879,117881],[117882,117885],[117886,117893],[117893,117894],[117896,117903],[117903,117904],[117905,117917],[117918,117922],[117923,117931],[117932,117940],[117950,117975],[117981,117992],[117993,117996],[117997,118004],[118005,118007],[118008,118020],[118021,118031],[118032,118034],[118035,118039],[118040,118049],[118049,118050],[118059,118061],[118062,118064],[118065,118066],[118067,118075],[118076,118085],[118086,118091],[118092,118099],[118100,118103],[118104,118111],[118112,118114],[118115,118122],[118123,118125],[118126,118130],[118131,118139],[118140,118147],[118148,118151],[118152,118154],[118163,118169],[118170,118177],[118178,118185],[118186,118190],[118191,118192],[118193,118205],[118206,118212],[118213,118217],[118218,118222],[118223,118233],[118233,118234],[118244,118248],[118249,118250],[118250,118251],[118251,118252],[118253,118259],[118260,118263],[118264,118271],[118272,118274],[118275,118282],[118283,118285],[118286,118289],[118290,118315],[118316,118325],[118325,118326],[118336,118337],[118338,118354],[118354,118355],[118362,118369],[118370,118374],[118375,118376],[118377,118381],[118382,118390],[118391,118398],[118399,118401],[118402,118410],[118410,118411],[118421,118422],[118423,118437],[118437,118438],[118445,118452],[118453,118455],[118456,118463],[118464,118465],[118466,118471],[118472,118474],[118475,118482],[118483,118487],[118488,118491],[118492,118506],[118506,118507],[118508,118511],[118522,118531],[118532,118541],[118542,118545],[118546,118548],[118549,118553],[118554,118556],[118557,118564],[118565,118570],[118571,118577],[118578,118580],[118581,118584],[118585,118593],[118594,118596],[118597,118608],[118609,118615],[118626,118628],[118629,118636],[118637,118641],[118642,118649],[118649,118650],[118651,118654],[118655,118663],[118664,118667],[118668,118671],[118672,118675],[118676,118702],[118702,118704],[118705,118711],[118722,118724],[118725,118729],[118730,118733],[118734,118741],[118742,118744],[118745,118748],[118749,118752],[118753,118760],[118761,118768],[118769,118772],[118773,118777],[118778,118783],[118784,118792],[118792,118793],[118794,118800],[118801,118805],[118806,118810],[118811,118814],[118825,118839],[118840,118846],[118847,118849],[118850,118853],[118854,118865],[118866,118869],[118870,118876],[118877,118881],[118882,118884],[118885,118889],[118890,118896],[118897,118900],[118901,118908],[118909,118911],[118912,118916],[118917,118923],[118934,118938],[118938,118939],[118940,118943],[118944,118953],[118954,118960],[118961,118964],[118965,118967],[118968,118974],[118975,118978],[118979,118983],[118984,118986],[118987,118992],[118993,118999],[119000,119002],[119003,119009],[119010,119015],[119016,119021],[119022,119035],[119046,119050],[119051,119054],[119055,119063],[119064,119066],[119067,119074],[119075,119077],[119078,119088],[119089,119093],[119094,119101],[119101,119102],[119103,119107],[119108,119113],[119114,119116],[119117,119124],[119125,119129],[119130,119133],[119134,119136],[119137,119140],[119151,119159],[119160,119168],[119169,119176],[119177,119180],[119181,119182],[119183,119190],[119191,119197],[119198,119206],[119207,119209],[119210,119212],[119212,119213],[119223,119224],[119225,119242],[119242,119243],[119250,119257],[119258,119260],[119261,119267],[119268,119272],[119273,119276],[119277,119285],[119286,119289],[119290,119294],[119295,119300],[119301,119310],[119310,119311],[119321,119322],[119323,119329],[119329,119330],[119335,119342],[119343,119345],[119346,119352],[119353,119357],[119358,119361],[119362,119370],[119371,119381],[119382,119392],[119393,119403],[119403,119404],[119414,119415],[119416,119428],[119428,119429],[119435,119442],[119443,119445],[119446,119455],[119456,119458],[119459,119463],[119464,119466],[119467,119469],[119470,119478],[119479,119490],[119490,119491],[119492,119496],[119497,119503],[119504,119511],[119522,119526],[119527,119529],[119530,119533],[119534,119542],[119543,119553],[119554,119556],[119557,119562],[119563,119570],[119571,119573],[119574,119576],[119577,119579],[119580,119589],[119590,119602],[119602,119603],[119614,119615],[119616,119625],[119625,119626],[119632,119639],[119640,119641],[119642,119648],[119649,119651],[119652,119655],[119656,119664],[119665,119675],[119675,119676],[119677,119681],[119682,119691],[119691,119692],[119693,119697],[119698,119704],[119705,119712],[119723,119727],[119728,119730],[119731,119734],[119735,119743],[119744,119754],[119755,119757],[119758,119763],[119764,119771],[119771,119772],[119783,119784],[119785,119791],[119791,119792],[119793,119803],[119804,119811],[119812,119814],[119815,119818],[119819,119822],[119823,119831],[119832,119842],[119843,119852],[119852,119853],[119854,119856],[119857,119860],[119861,119869],[119870,119880],[119891,119901],[119902,119910],[119911,119920],[119920,119922],[119923,119926],[119927,119929],[119930,119934],[119935,119937],[119938,119944],[119945,119948],[119949,119955],[119955,119956],[119957,119959],[119960,119963],[119964,119972],[119973,119983],[119994,120004],[120005,120015],[120016,120028],[120028,120030],[120031,120034],[120035,120037],[120038,120042],[120043,120045],[120046,120052],[120053,120056],[120057,120062],[120062,120063],[120073,120074],[120075,120080],[120080,120081],[120086,120092],[120093,120096],[120097,120105],[120106,120109],[120110,120118],[120119,120122],[120123,120132],[120133,120142],[120143,120152],[120153,120155],[120156,120158],[120158,120159],[120169,120194],[120200,120215],[120216,120219],[120220,120228],[120229,120231],[120232,120234],[120235,120246],[120246,120247],[120257,120283],[120290,120292],[120293,120294],[120295,120299],[120300,120305],[120306,120320],[120321,120323],[120324,120327],[120328,120353],[120362,120371],[120372,120379],[120380,120384],[120385,120388],[120389,120396],[120396,120397],[120398,120404],[120405,120409],[120410,120414],[120415,120419],[120420,120428],[120429,120436],[120437,120445],[120446,120453],[120454,120456],[120457,120463],[120472,120475],[120476,120485],[120486,120492],[120493,120495],[120496,120500],[120501,120504],[120505,120515],[120516,120521],[120522,120530],[120531,120539],[120539,120540],[120543,120546],[120546,120547],[120548,120560],[120561,120571],[120572,120577],[120586,120598],[120599,120609],[120610,120615],[120616,120619],[120620,120625],[120626,120633],[120634,120636],[120637,120645],[120646,120649],[120650,120654],[120655,120658],[120659,120670],[120671,120682],[120683,120687],[120696,120700],[120701,120705],[120706,120708],[120709,120714],[120715,120717],[120718,120719],[120719,120720],[120720,120721],[120722,120729],[120730,120732],[120733,120742],[120743,120746],[120747,120758],[120758,120759],[120760,120762],[120763,120764],[120765,120771],[120772,120783],[120784,120790],[120791,120795],[120804,120805],[120806,120818],[120819,120823],[120824,120827],[120828,120836],[120837,120842],[120843,120854],[120855,120858],[120859,120866],[120867,120872],[120873,120875],[120876,120877],[120878,120888],[120889,120890],[120890,120891],[120891,120892],[120893,120900],[120900,120901],[120902,120906],[120915,120923],[120924,120935],[120936,120943],[120944,120946],[120947,120948],[120949,120959],[120960,120964],[120965,120971],[120972,120974],[120975,120980],[120981,120983],[120984,120986],[120987,120996],[120997,120998],[120998,120999],[120999,121000],[121001,121008],[121008,121009],[121120,121122],[121158,121170],[121171,121172],[121172,121173],[121173,121174],[121175,121180],[121181,121183],[121184,121187],[121197,121205],[121206,121212],[121213,121214],[121215,121218],[121219,121227],[121227,121229],[121229,121238],[121238,121241],[121249,121268],[121269,121278],[121279,121280],[121281,121286],[121294,121310],[121311,121319],[121320,121321],[121322,121325],[121326,121342],[121342,121343],[121343,121352],[121352,121354],[121362,121370],[121370,121371],[121371,121376],[121376,121377],[121377,121383],[121383,121384],[121385,121389],[121389,121390],[121406,121408],[121408,121409],[121410,121418],[121418,121419],[121419,121426],[121426,121427],[121443,121446],[121447,121480],[121480,121482],[121483,121484],[121504,121513],[121533,121539],[121540,121544],[121545,121554],[121554,121555],[121555,121572],[121573,121578],[121578,121579],[121580,121581],[121605,121626],[121627,121631],[121632,121633],[121634,121639],[121639,121640],[121640,121653],[121653,121656],[121680,121686],[121686,121687],[121687,121690],[121690,121691],[121691,121698],[121698,121700],[121700,121710],[121711,121723],[121724,121730],[121730,121733],[121757,121759],[121760,121766],[121767,121777],[121778,121785],[121786,121789],[121790,121797],[121798,121804],[121828,121832],[121832,121833],[121833,121846],[121846,121849],[121869,121870],[121894,121903],[121926,121932],[121933,121937],[121938,121944],[121944,121945],[121945,121954],[121955,121957],[121957,121958],[121959,121960],[121987,121993],[121993,121994],[121994,121997],[121997,121998],[121998,122005],[122005,122007],[122007,122017],[122018,122025],[122026,122032],[122032,122035],[122062,122064],[122064,122065],[122065,122080],[122080,122083],[122106,122107],[122131,122140],[122163,122169],[122170,122174],[122175,122184],[122184,122186],[122187,122188],[122211,122212],[122229,122232],[122241,122247],[122248,122252],[122253,122256],[122257,122259],[122260,122272],[122273,122279],[122280,122282],[122283,122295],[122296,122309],[122310,122315],[122316,122318],[122319,122321],[122322,122327],[122328,122337],[122344,122346],[122347,122353],[122354,122360],[122361,122368],[122369,122371],[122372,122382],[122383,122394],[122395,122399],[122400,122402],[122403,122406],[122407,122411],[122411,122412],[122413,122416],[122417,122420],[122421,122425],[122426,122429],[122430,122432],[122439,122457],[122458,122460],[122461,122467],[122468,122478],[122479,122484],[122485,122488],[122489,122496],[122497,122503],[122504,122507],[122508,122513],[122513,122514],[122525,122544],[122545,122554],[122555,122556],[122557,122562],[122570,122583],[122584,122592],[122593,122594],[122595,122600],[122608,122624],[122625,122633],[122634,122635],[122636,122639],[122640,122656],[122656,122657],[122657,122666],[122666,122668],[122676,122694],[122695,122704],[122705,122706],[122707,122710],[122711,122729],[122729,122730],[122730,122738],[122738,122740],[122748,122756],[122757,122763],[122764,122765],[122766,122769],[122770,122778],[122778,122780],[122780,122789],[122789,122792],[122800,122820],[122821,122827],[122828,122829],[122830,122839],[122839,122840],[122840,122847],[122847,122848],[122864,122867],[122868,122893],[122893,122894],[122918,122921],[122922,122930],[122930,122932],[122932,122941],[122941,122944],[122968,122971],[122972,122988],[122988,122990],[122990,122993],[122993,122995],[122996,123002],[123018,123021],[123022,123048],[123048,123051],[123067,123075],[123075,123077],[123081,123085],[123085,123086],[123087,123096],[123097,123104],[123105,123114],[123121,123123],[123124,123132],[123133,123135],[123136,123139],[123140,123146],[123147,123154],[123155,123156],[123157,123165],[123166,123175],[123176,123180],[123181,123199],[123200,123202],[123203,123207],[123208,123215],[123216,123218],[123225,123234],[123235,123243],[123244,123246],[123247,123250],[123251,123253],[123254,123260],[123261,123270],[123271,123275],[123276,123283],[123284,123291],[123292,123300],[123301,123304],[123305,123316],[123317,123324],[123331,123334],[123335,123337],[123338,123341],[123342,123352],[123353,123363],[123363,123364],[123365,123371],[123372,123376],[123377,123381],[123382,123388],[123389,123398],[123399,123407],[123408,123411],[123412,123414],[123415,123423],[123424,123426],[123427,123430],[123437,123446],[123447,123451],[123452,123455],[123456,123459],[123460,123461],[123461,123467],[123467,123468],[123469,123477],[123477,123478],[123479,123488],[123489,123495],[123496,123498],[123499,123507],[123508,123509],[123509,123516],[123517,123525],[123526,123532],[123539,123547],[123548,123550],[123551,123552],[123552,123558],[123558,123559],[123560,123563],[123563,123572],[123572,123573],[123574,123580],[123580,123582],[123592,123605],[123606,123614],[123615,123616],[123617,123622],[123630,123648],[123649,123658],[123659,123660],[123661,123664],[123665,123683],[123683,123684],[123684,123692],[123692,123694],[123702,123710],[123711,123717],[123718,123719],[123720,123723],[123724,123732],[123732,123734],[123734,123737],[123737,123738],[123738,123744],[123744,123745],[123745,123748],[123748,123751],[123759,123790],[123791,123807],[123808,123809],[123810,123816],[123816,123817],[123817,123823],[123823,123824],[123840,123843],[123844,123869],[123869,123870],[123870,123876],[123876,123877],[123878,123881],[123882,123898],[123898,123900],[123900,123903],[123903,123905],[123906,123908],[123908,123913],[123913,123914],[123914,123918],[123918,123922],[123938,123941],[123942,123967],[123967,123968],[123968,123974],[123974,123975],[123976,123979],[123980,123996],[123996,123998],[123998,124001],[124001,124003],[124004,124006],[124006,124016],[124016,124017],[124017,124022],[124022,124023],[124023,124027],[124027,124031],[124047,124050],[124051,124076],[124076,124077],[124077,124083],[124083,124084],[124085,124088],[124089,124105],[124105,124107],[124107,124110],[124110,124112],[124113,124115],[124115,124125],[124125,124126],[124126,124138],[124138,124139],[124139,124141],[124149,124151],[124159,124191],[124192,124209],[124210,124211],[124212,124218],[124218,124219],[124219,124225],[124225,124226],[124242,124245],[124246,124272],[124272,124275],[124382,124384],[124423,124435],[124436,124437],[124437,124438],[124438,124439],[124440,124445],[124446,124448],[124449,124452],[124473,124476],[124477,124503],[124503,124506],[124526,124529],[124530,124556],[124556,124558],[124569,124571],[124582,124597],[124598,124605],[124606,124607],[124608,124623],[124623,124624],[124624,124630],[124630,124633],[124644,124670],[124671,124677],[124678,124679],[124680,124689],[124689,124690],[124690,124706],[124706,124707],[124726,124732],[124732,124733],[124734,124750],[124750,124751],[124752,124769],[124769,124770],[124771,124775],[124775,124776],[124777,124784],[124784,124785],[124786,124790],[124790,124792],[124804,124810],[124811,124815],[124816,124820],[124821,124826],[124827,124830],[124831,124838],[124839,124842],[124843,124853],[124854,124859],[124860,124864],[124865,124872],[124873,124876],[124877,124879],[124880,124886],[124887,124889],[124890,124896],[124897,124906],[124916,124924],[124925,124934],[124934,124935],[124936,124939],[124940,124943],[124944,124953],[124954,124963],[124964,124968],[124969,124973],[124974,124981],[124981,124982],[124985,124989],[124989,124990],[124991,125003],[125004,125007],[125007,125008],[125008,125011],[125012,125018],[125018,125019],[125020,125023],[125024,125025],[125025,125026],[125026,125027],[125028,125035],[125045,125057],[125060,125062],[125063,125064],[125065,125074],[125075,125080],[125081,125089],[125090,125092],[125093,125106],[125107,125113],[125114,125117],[125118,125127],[125128,125137],[125138,125142],[125152,125161],[125162,125167],[125168,125176],[125177,125189],[125190,125195],[125196,125198],[125199,125202],[125203,125206],[125206,125207],[125207,125210],[125211,125219],[125219,125220],[125221,125228],[125229,125233],[125234,125244],[125254,125269],[125270,125273],[125274,125282],[125283,125291],[125292,125298],[125299,125301],[125302,125306],[125307,125309],[125310,125314],[125315,125319],[125320,125323],[125324,125332],[125333,125340],[125341,125348],[125358,125371],[125372,125374],[125375,125388],[125388,125389],[125402,125412],[125413,125423],[125424,125425],[125426,125436],[125436,125437],[125437,125448],[125448,125450],[125450,125457],[125457,125460],[125471,125481],[125481,125482],[125482,125486],[125486,125487],[125487,125491],[125491,125492],[125493,125497],[125497,125498],[125499,125503],[125503,125505],[125516,125518],[125519,125524],[125525,125526],[125526,125527],[125527,125528],[125529,125536],[125547,125556],[125557,125566],[125567,125568],[125569,125574],[125585,125597],[125598,125608],[125609,125610],[125611,125614],[125615,125627],[125627,125628],[125647,125656],[125656,125657],[125658,125665],[125665,125666],[125666,125672],[125672,125673],[125674,125684],[125684,125685],[125686,125690],[125690,125692],[125703,125712],[125712,125713],[125713,125725],[125725,125726],[125726,125738],[125738,125739],[125739,125750],[125750,125751],[125752,125762],[125762,125764],[125775,125796],[125797,125801],[125802,125803],[125804,125807],[125808,125836],[125836,125837],[125856,125866],[125866,125867],[125868,125869],[125870,125871],[125872,125876],[125876,125878],[125890,125893],[125894,125897],[125898,125902],[125903,125906],[125907,125938],[125939,125941],[125942,125973],[125983,125990],[125991,125993],[125994,126006],[126007,126013],[126014,126017],[126018,126028],[126029,126033],[126034,126045],[126045,126046],[126059,126069],[126070,126080],[126081,126082],[126083,126093],[126093,126094],[126094,126105],[126105,126107],[126107,126114],[126114,126117],[126128,126138],[126138,126139],[126139,126143],[126143,126144],[126144,126148],[126148,126149],[126150,126154],[126154,126155],[126156,126160],[126160,126162],[126173,126175],[126176,126181],[126182,126183],[126183,126184],[126184,126185],[126186,126193],[126204,126213],[126214,126223],[126224,126225],[126226,126231],[126242,126273],[126274,126285],[126286,126287],[126288,126291],[126292,126323],[126323,126324],[126343,126353],[126353,126354],[126355,126359],[126359,126360],[126361,126377],[126377,126378],[126378,126385],[126385,126387],[126398,126419],[126420,126424],[126425,126426],[126427,126438],[126438,126439],[126439,126455],[126455,126456],[126456,126465],[126465,126467],[126470,126478],[126478,126479],[126480,126483],[126484,126489],[126490,126497],[126508,126520],[126521,126524],[126525,126534],[126535,126542],[126543,126550],[126551,126553],[126554,126557],[126558,126561],[126561,126562],[126562,126565],[126566,126574],[126575,126577],[126578,126585],[126586,126587],[126588,126594],[126604,126618],[126619,126621],[126622,126625],[126626,126641],[126642,126651],[126651,126652],[126663,126666],[126667,126673],[126674,126676],[126677,126684],[126685,126687],[126688,126691],[126692,126707],[126708,126717],[126717,126718],[126729,126730],[126731,126740],[126740,126741],[126746,126755],[126756,126760],[126761,126764],[126765,126768],[126769,126779],[126780,126782],[126783,126788],[126789,126800],[126800,126801],[126802,126805],[126806,126813],[126814,126817],[126818,126821],[126822,126826],[126838,126846],[126847,126849],[126850,126859],[126860,126870],[126871,126873],[126874,126877],[126878,126883],[126883,126884],[126884,126887],[126887,126888],[126888,126891],[126891,126892],[126892,126901],[126902,126906],[126907,126909],[126910,126919],[126920,126923],[126924,126927],[126939,126946],[126946,126947],[126958,126959],[126960,126966],[126966,126967],[126973,126982],[126983,126987],[126988,126991],[126992,126995],[126996,127006],[127007,127010],[127011,127015],[127016,127027],[127028,127031],[127032,127039],[127040,127043],[127044,127053],[127065,127068],[127069,127073],[127074,127086],[127087,127096],[127096,127097],[127098,127101],[127102,127109],[127110,127113],[127114,127117],[127118,127122],[127123,127131],[127132,127134],[127135,127141],[127142,127152],[127153,127155],[127156,127159],[127171,127181],[127181,127182],[127183,127186],[127187,127195],[127196,127200],[127201,127206],[127207,127209],[127210,127213],[127214,127219],[127220,127225],[127226,127228],[127229,127236],[127237,127240],[127241,127247],[127248,127256],[127256,127257],[127258,127266],[127278,127289],[127290,127295],[127296,127299],[127300,127302],[127303,127311],[127312,127318],[127318,127319],[127432,127434],[127470,127482],[127483,127484],[127484,127485],[127485,127486],[127487,127492],[127493,127495],[127496,127499],[127509,127519],[127520,127530],[127531,127532],[127533,127544],[127544,127545],[127545,127558],[127558,127561],[127570,127572],[127573,127578],[127579,127580],[127580,127581],[127581,127582],[127583,127590],[127599,127608],[127609,127618],[127619,127620],[127621,127626],[127636,127648],[127649,127659],[127660,127661],[127662,127665],[127666,127678],[127678,127679],[127696,127705],[127705,127706],[127707,127714],[127714,127715],[127715,127721],[127721,127722],[127723,127733],[127733,127734],[127735,127738],[127739,127754],[127754,127756],[127757,127758],[127774,127780],[127781,127785],[127786,127795],[127795,127796],[127796,127801],[127802,127811],[127812,127821],[127821,127822],[127823,127829],[127830,127842],[127843,127844],[127863,127865],[127866,127873],[127874,127877],[127878,127881],[127882,127889],[127890,127893],[127912,127921],[127921,127922],[127922,127941],[127941,127942],[127942,127945],[127946,127954],[127955,127956],[127983,127984],[127984,127989],[127989,127991],[128018,128019],[128019,128024],[128024,128026],[128026,128028],[128055,128056],[128056,128061],[128061,128063],[128063,128064],[128065,128068],[128087,128089],[128090,128097],[128098,128104],[128105,128112],[128131,128140],[128140,128141],[128141,128163],[128163,128164],[128164,128167],[128168,128176],[128177,128178],[128205,128206],[128206,128234],[128234,128236],[128263,128264],[128264,128296],[128296,128298],[128325,128326],[128326,128358],[128358,128359],[128360,128363],[128378,128379],[128395,128401],[128402,128406],[128407,128413],[128413,128414],[128437,128442],[128443,128452],[128453,128462],[128462,128463],[128486,128491],[128492,128502],[128503,128513],[128513,128514],[128515,128521],[128522,128534],[128535,128536],[128555,128570],[128570,128572],[128573,128578],[128579,128580],[128581,128591],[128591,128592],[128592,128615],[128615,128618],[128637,128639],[128640,128647],[128648,128652],[128653,128664],[128665,128670],[128689,128692],[128693,128694],[128694,128709],[128710,128714],[128714,128715],[128716,128721],[128721,128722],[128723,128724],[128747,128753],[128753,128754],[128754,128757],[128757,128758],[128758,128765],[128765,128766],[128766,128770],[128770,128771],[128771,128779],[128779,128783],[128802,128803],[128818,128819],[128829,128832],[128842,128857],[128858,128873],[128874,128877],[128878,128882],[128883,128885],[128886,128890],[128891,128895],[128896,128899],[128900,128931],[128932,128934],[128942,128973],[128977,128984],[128984,128985],[128996,129006],[129007,129017],[129018,129019],[129020,129031],[129031,129032],[129032,129045],[129045,129048],[129057,129059],[129060,129065],[129066,129067],[129067,129068],[129068,129069],[129070,129077],[129086,129095],[129096,129105],[129106,129107],[129108,129113],[129123,129138],[129139,129151],[129152,129153],[129154,129157],[129158,129173],[129173,129175],[129176,129177],[129193,129199],[129200,129204],[129205,129214],[129214,129215],[129215,129220],[129221,129230],[129231,129240],[129240,129241],[129242,129248],[129249,129261],[129262,129263],[129282,129284],[129285,129292],[129293,129296],[129297,129300],[129301,129308],[129309,129312],[129331,129340],[129340,129341],[129341,129360],[129360,129361],[129361,129364],[129365,129373],[129374,129375],[129402,129403],[129403,129408],[129408,129410],[129437,129438],[129438,129443],[129443,129445],[129445,129447],[129474,129475],[129475,129480],[129480,129482],[129482,129483],[129484,129487],[129502,129503],[129519,129525],[129526,129530],[129531,129537],[129537,129538],[129561,129566],[129567,129576],[129577,129586],[129586,129587],[129588,129593],[129594,129604],[129605,129615],[129615,129616],[129617,129623],[129624,129636],[129637,129638],[129653,129654],[129666,129668],[129677,129708],[129709,129720],[129721,129722],[129723,129726],[129727,129758],[129758,129759],[129776,129786],[129786,129787],[129788,129800],[129800,129801],[129802,129818],[129818,129819],[129819,129826],[129826,129828],[129837,129858],[129859,129863],[129864,129865],[129866,129877],[129877,129878],[129878,129894],[129894,129895],[129895,129904],[129904,129906],[129910,129916],[129916,129917],[129918,129921],[129921,129922],[129922,129925],[129926,129931],[129932,129933],[129933,129934],[129934,129935],[129936,129941],[129942,129952],[129961,129968],[129972,129987],[129989,130004],[130005,130012],[130015,130019],[130022,130025],[130028,130035],[130038,130042],[130046,130048],[130056,130083],[130084,130087],[130090,130117],[130118,130131],[130132,130138],[130139,130142],[130244,130246],[130281,130293],[130294,130295],[130295,130296],[130296,130297],[130298,130303],[130304,130306],[130307,130310],[130317,130326],[130327,130335],[130336,130339],[130340,130346],[130347,130350],[130351,130360],[130361,130368],[130369,130382],[130382,130383],[130384,130391],[130391,130392],[130393,130399],[130400,130401],[130401,130402],[130402,130403],[130404,130409],[130415,130426],[130427,130431],[130432,130434],[130435,130438],[130439,130445],[130446,130464],[130465,130468],[130469,130477],[130478,130480],[130481,130485],[130486,130490],[130491,130501],[130502,130509],[130510,130512],[130518,130524],[130525,130532],[130533,130544],[130545,130547],[130548,130551],[130552,130561],[130562,130567],[130568,130578],[130578,130579],[130586,130587],[130588,130591],[130592,130593],[130593,130594],[130594,130595],[130596,130604],[130605,130608],[130609,130613],[130614,130616],[130617,130621],[130622,130644],[130644,130646],[130647,130653],[130654,130656],[130657,130662],[130663,130665],[130666,130669],[130670,130673],[130674,130677],[130685,130692],[130693,130699],[130700,130704],[130705,130706],[130707,130713],[130714,130716],[130717,130718],[130719,130725],[130726,130730],[130730,130731],[130732,130734],[130735,130738],[130739,130742],[130743,130750],[130751,130754],[130755,130758],[130759,130763],[130764,130767],[130768,130779],[130779,130780],[130787,130788],[130789,130793],[130794,130797],[130798,130808],[130809,130810],[130810,130811],[130811,130812],[130813,130820],[130821,130823],[130824,130829],[130830,130835],[130835,130836],[130837,130840],[130841,130842],[130842,130843],[130843,130844],[130845,130855],[130856,130862],[130863,130868],[130869,130876],[130877,130880],[130881,130884],[130885,130886],[130886,130887],[130895,130896],[130897,130904],[130905,130907],[130908,130913],[130914,130916],[130917,130924],[130925,130930],[130931,130935],[130936,130938],[130939,130946],[130947,130975],[130975,130978],[130979,130983],[130984,130991],[130999,131001],[131002,131005],[131006,131014],[131015,131022],[131023,131025],[131026,131028],[131029,131031],[131031,131032],[131033,131036],[131037,131044],[131045,131049],[131050,131079],[131079,131081],[131082,131088],[131089,131091],[131092,131097],[131105,131107],[131108,131110],[131111,131114],[131115,131124],[131125,131128],[131129,131140],[131141,131144],[131145,131152],[131153,131158],[131159,131163],[131163,131164],[131171,131172],[131173,131177],[131178,131181],[131182,131192],[131193,131194],[131194,131195],[131195,131196],[131197,131204],[131205,131207],[131208,131214],[131215,131220],[131220,131221],[131222,131225],[131226,131227],[131227,131228],[131228,131229],[131230,131240],[131241,131247],[131248,131253],[131254,131261],[131262,131265],[131266,131269],[131270,131271],[131271,131272],[131280,131281],[131282,131289],[131290,131292],[131293,131298],[131299,131301],[131302,131308],[131309,131315],[131316,131320],[131321,131323],[131324,131331],[131332,131361],[131361,131364],[131365,131369],[131370,131377],[131385,131387],[131388,131391],[131392,131400],[131401,131408],[131409,131411],[131412,131414],[131415,131417],[131417,131418],[131419,131422],[131423,131430],[131431,131435],[131436,131466],[131466,131468],[131469,131475],[131476,131478],[131486,131491],[131492,131494],[131495,131497],[131498,131501],[131502,131511],[131512,131515],[131516,131527],[131528,131531],[131532,131539],[131540,131551],[131552,131556],[131556,131557],[131560,131564],[131564,131565],[131566,131574],[131575,131587],[131588,131592],[131593,131599],[131605,131607],[131608,131610],[131611,131618],[131619,131622],[131623,131631],[131632,131637],[131638,131642],[131643,131645],[131646,131654],[131655,131667],[131668,131672],[131673,131679],[131680,131685],[131686,131688],[131689,131701],[131707,131708],[131708,131709],[131709,131710],[131711,131721],[131722,131731],[131732,131737],[131737,131738],[131747,131771],[131771,131773],[131774,131788],[131789,131790],[131791,131796],[131803,131816],[131817,131830],[131831,131832],[131833,131838],[131845,131857],[131858,131870],[131871,131872],[131873,131885],[131885,131886],[131886,131892],[131892,131894],[131909,131910],[131910,131922],[131922,131923],[131923,131928],[131928,131929],[131944,131945],[131945,131958],[131958,131959],[131959,131963],[131963,131964],[131979,131980],[131980,131985],[131985,131988],[131995,132000],[132001,132011],[132012,132018],[132019,132020],[132021,132036],[132036,132037],[132037,132046],[132046,132048],[132063,132064],[132064,132079],[132079,132080],[132080,132084],[132084,132085],[132100,132101],[132101,132117],[132117,132118],[132118,132131],[132131,132132],[132147,132148],[132148,132163],[132163,132164],[132164,132176],[132176,132177],[132192,132193],[132193,132211],[132211,132212],[132212,132215],[132216,132239],[132239,132242],[132257,132258],[132258,132273],[132273,132278],[132279,132293],[132293,132294],[132309,132310],[132310,132316],[132316,132319],[132326,132332],[132332,132333],[132333,132338],[132338,132341],[132348,132354],[132354,132355],[132355,132371],[132371,132372],[132372,132376],[132376,132377],[132377,132386],[132386,132387],[132388,132396],[132396,132397],[132397,132401],[132401,132403],[132411,132418],[132418,132419],[132419,132429],[132429,132432],[132432,132447],[132447,132448],[132448,132451],[132452,132458],[132458,132460],[132461,132462],[132473,132482],[132493,132499],[132500,132504],[132505,132508],[132508,132510],[132511,132512],[132527,132533],[132533,132534],[132534,132542],[132542,132543],[132543,132544],[132544,132545],[132546,132554],[132554,132555],[132555,132562],[132562,132564],[132575,132576],[132583,132586],[132694,132696],[132697,132705],[132706,132707],[132707,132708],[132709,132717],[132718,132724],[132725,132728],[132728,132729],[132730,132734],[132735,132742],[132743,132750],[132751,132754],[132755,132765],[132766,132775],[132783,132787],[132788,132795],[132796,132806],[132807,132816],[132817,132819],[132820,132828],[132829,132831],[132832,132834],[132835,132845],[132846,132849],[132850,132858],[132859,132864],[132865,132874],[132882,132888],[132889,132898],[132899,132902],[132903,132907],[132907,132908],[132909,132917],[132918,132922],[132923,132930],[132931,132941],[132942,132946],[132947,132955],[132956,132960],[132961,132965],[132966,132978],[132986,132993],[132994,132997],[132998,133002],[133003,133012],[133013,133022],[133023,133026],[133027,133030],[133031,133038],[133039,133042],[133043,133053],[133054,133064],[133064,133065],[133066,133069],[133070,133074],[133075,133079],[133087,133094],[133095,133102],[133103,133106],[133107,133117],[133118,133121],[133122,133125],[133126,133141],[133142,133145],[133146,133150],[133151,133153],[133154,133158],[133159,133162],[133163,133171],[133172,133175],[133176,133180],[133188,133196],[133197,133206],[133207,133222],[133222,133223],[133224,133229],[133230,133235],[133236,133242],[133243,133244],[133245,133255],[133256,133264],[133265,133267],[133268,133272],[133273,133281],[133289,133299],[133300,133302],[133303,133306],[133307,133308],[133308,133309],[133309,133310],[133311,133316],[133316,133317],[133319,133324],[133324,133325],[133326,133330],[133331,133335],[133336,133343],[133344,133347],[133348,133358],[133367,133375],[133376,133384],[133385,133386],[133387,133393],[133394,133396],[133397,133400],[133401,133406],[133407,133417],[133418,133421],[133422,133425],[133426,133429],[133430,133434],[133435,133442],[133443,133446],[133447,133457],[133458,133465],[133465,133466],[133475,133490],[133491,133501],[133502,133503],[133504,133512],[133513,133515],[133516,133526],[133526,133527],[133528,133535],[133536,133537],[133538,133544],[133545,133549],[133550,133552],[133553,133555],[133556,133560],[133561,133568],[133569,133575],[133583,133587],[133588,133590],[133591,133592],[133593,133600],[133601,133605],[133605,133606],[133607,133608],[133609,133615],[133616,133620],[133621,133623],[133624,133625],[133626,133632],[133632,133633],[133634,133644],[133645,133660],[133661,133663],[133664,133670],[133671,133673],[133674,133676],[133677,133682],[133683,133685],[133693,133698],[133698,133699],[133700,133705],[133706,133709],[133710,133712],[133713,133721],[133722,133724],[133725,133736],[133737,133741],[133742,133747],[133748,133750],[133751,133757],[133757,133758],[133759,133774],[133775,133779],[133780,133788],[133796,133797],[133798,133804],[133805,133807],[133808,133815],[133816,133823],[133824,133827],[133828,133840],[133841,133848],[133849,133851],[133852,133855],[133856,133862],[133862,133863],[133864,133871],[133872,133876],[133877,133881],[133882,133885],[133886,133896],[133904,133911],[133912,133914],[133915,133919],[133919,133920],[133931,133946],[133947,133950],[133951,133952],[133953,133956],[133957,133972],[133972,133973],[133973,133975],[133975,133977],[133986,133989],[133989,133990],[133990,133996],[133996,133998],[133998,134004],[134004,134005],[134006,134010],[134011,134014],[134023,134026],[134027,134028],[134029,134030],[134031,134034],[134034,134035],[134035,134042],[134042,134048],[134057,134063],[134064,134065],[134066,134067],[134068,134071],[134071,134072],[134072,134088],[134088,134089],[134089,134090],[134091,134092],[134093,134094],[134094,134095],[134096,134099],[134099,134100],[134100,134106],[134106,134110],[134119,134125],[134125,134126],[134126,134129],[134129,134130],[134130,134137],[134137,134138],[134138,134139],[134139,134141],[134150,134156],[134156,134157],[134157,134160],[134160,134161],[134161,134168],[134168,134169],[134169,134171],[134171,134177],[134177,134181],[134191,134197],[134198,134199],[134210,134214],[134223,134224],[134234,134246],[134247,134257],[134258,134259],[134260,134267],[134268,134270],[134271,134272],[134273,134280],[134281,134290],[134290,134291],[134292,134295],[134296,134302],[134303,134311],[134312,134315],[134316,134321],[134322,134324],[134325,134328],[134329,134336],[134344,134353],[134354,134357],[134358,134361],[134362,134369],[134370,134378],[134379,134382],[134383,134390],[134391,134400],[134401,134403],[134404,134412],[134413,134415],[134416,134421],[134422,134424],[134424,134425],[134436,134451],[134452,134455],[134456,134457],[134458,134461],[134462,134477],[134477,134478],[134478,134480],[134480,134482],[134491,134494],[134494,134495],[134495,134501],[134501,134503],[134503,134509],[134509,134510],[134511,134515],[134516,134519],[134528,134531],[134532,134533],[134534,134535],[134536,134539],[134539,134540],[134540,134547],[134547,134553],[134562,134574],[134575,134581],[134582,134583],[134584,134587],[134588,134600],[134600,134601],[134601,134602],[134602,134603],[134604,134607],[134607,134608],[134608,134614],[134614,134618],[134627,134633],[134633,134634],[134634,134643],[134643,134644],[134644,134645],[134646,134647],[134648,134649],[134649,134651],[134660,134666],[134666,134667],[134667,134670],[134670,134671],[134671,134678],[134678,134679],[134679,134685],[134685,134687],[134697,134703],[134704,134705],[134716,134717],[134717,134723],[134723,134724],[134734,134744],[134746,134748],[134749,134752],[134753,134762],[134763,134766],[134767,134774],[134775,134780],[134781,134783],[134784,134787],[134788,134792],[134793,134800],[134801,134803],[134804,134806],[134807,134811],[134812,134819],[134819,134820],[134821,134826],[134827,134830],[134838,134848],[134849,134856],[134857,134860],[134861,134868],[134869,134870],[134871,134878],[134879,134883],[134883,134884],[134885,134886],[134887,134893],[134894,134898],[134898,134899],[134900,134902],[134903,134904],[134905,134911],[134912,134916],[134916,134917],[134918,134921],[134922,134927],[134928,134930],[134931,134936],[134937,134940],[134948,134954],[134955,134964],[134964,134965],[134966,134969],[134970,134976],[134977,134981],[134982,134985],[134986,134992],[134993,134995],[134996,134999],[135000,135008],[135009,135010],[135010,135011],[135011,135012],[135013,135022],[135022,135023],[135132,135134],[135173,135181],[135182,135188],[135192,135207],[135208,135211],[135212,135213],[135214,135217],[135218,135233],[135233,135234],[135234,135236],[135236,135238],[135240,135243],[135243,135244],[135244,135250],[135250,135252],[135252,135256],[135256,135257],[135257,135260],[135261,135264],[135264,135267],[135269,135281],[135282,135288],[135289,135290],[135291,135294],[135295,135307],[135307,135308],[135308,135309],[135309,135310],[135311,135314],[135314,135315],[135315,135321],[135321,135325],[135328,135338],[135339,135345],[135346,135347],[135348,135363],[135363,135364],[135364,135372],[135372,135373],[135375,135390],[135391,135394],[135395,135396],[135397,135403],[135403,135404],[135404,135424],[135424,135425],[135425,135428],[135428,135429],[135430,135436],[135436,135438],[135440,135446],[135446,135447],[135447,135450],[135450,135451],[135451,135458],[135458,135459],[135459,135462],[135462,135464],[135466,135472],[135472,135473],[135473,135476],[135476,135477],[135477,135484],[135484,135485],[135485,135488],[135488,135489],[135489,135505],[135505,135506],[135516,135522],[135522,135523],[135523,135529],[135529,135532],[135542,135548],[135548,135549],[135549,135562],[135562,135567],[135570,135576],[135577,135578],[135582,135586],[135586,135587],[135587,135590],[135592,135595],[135600,135615],[135616,135619],[135620,135621],[135622,135625],[135626,135641],[135641,135642],[135642,135644],[135644,135646],[135648,135651],[135651,135652],[135652,135658],[135658,135660],[135660,135664],[135664,135665],[135665,135668],[135669,135672],[135673,135675],[135675,135678],[135680,135692],[135693,135699],[135700,135701],[135702,135705],[135706,135718],[135718,135719],[135719,135720],[135720,135721],[135722,135725],[135725,135726],[135726,135732],[135732,135736],[135738,135748],[135749,135755],[135756,135757],[135758,135761],[135762,135777],[135777,135780],[135782,135792],[135793,135795],[135796,135797],[135798,135804],[135804,135805],[135805,135820],[135820,135821],[135821,135824],[135824,135825],[135826,135832],[135832,135834],[135836,135842],[135842,135843],[135843,135846],[135846,135847],[135847,135854],[135854,135855],[135855,135857],[135857,135858],[135858,135873],[135873,135877],[135880,135886],[135887,135888],[135892,135894],[135897,135910],[135915,135918],[135919,135929],[135930,135938],[135939,135941],[135942,135945],[135946,135950],[135951,135958],[135959,135961],[135962,135964],[135965,135969],[135970,135977],[135977,135978],[135979,135983],[135984,135986],[135987,135990],[135991,136001],[136002,136004],[136005,136015],[136016,136017],[136018,136023],[136024,136027],[136028,136038],[136039,136046],[136047,136050],[136051,136061],[136062,136063],[136064,136071],[136072,136076],[136076,136077],[136078,136079],[136080,136086],[136087,136091],[136091,136092],[136093,136095],[136096,136097],[136098,136104],[136105,136109],[136109,136110],[136112,136118],[136119,136123],[136124,136127],[136128,136138],[136139,136143],[136144,136147],[136148,136155],[136156,136159],[136160,136168],[136169,136173],[136174,136179],[136180,136188],[136189,136194],[136194,136195],[136199,136214],[136215,136218],[136219,136220],[136221,136224],[136225,136240],[136240,136241],[136241,136243],[136243,136245],[136247,136260],[136261,136270],[136271,136272],[136273,136276],[136277,136295],[136295,136298],[136300,136309],[136309,136310],[136310,136327],[136327,136328],[136328,136331],[136331,136332],[136338,136341],[136342,136358],[136358,136360],[136360,136363],[136363,136365],[136366,136370],[136371,136382],[136382,136383],[136383,136391],[136391,136394],[136396,136402],[136402,136403],[136403,136406],[136406,136407],[136407,136414],[136414,136415],[136415,136418],[136418,136419],[136419,136427],[136427,136431],[136433,136442],[136442,136443],[136443,136455],[136455,136456],[136456,136459],[136459,136460],[136466,136469],[136470,136481],[136481,136483],[136483,136495],[136495,136497],[136498,136499],[136499,136503],[136503,136504],[136504,136509],[136509,136513],[136515,136521],[136521,136522],[136522,136525],[136525,136526],[136526,136533],[136533,136534],[136534,136537],[136537,136538],[136538,136546],[136546,136550],[136553,136559],[136560,136561],[136565,136568],[136569,136570],[136571,136575],[136575,136576],[136576,136579],[136581,136593],[136593,136594],[136595,136599],[136599,136600],[136600,136605],[136608,136625],[136629,136631],[136632,136635],[136636,136645],[136646,136649],[136650,136657],[136658,136664],[136665,136671],[136672,136676],[136677,136685],[136685,136686],[136690,136705],[136706,136709],[136710,136711],[136712,136715],[136716,136731],[136731,136732],[136732,136734],[136734,136736],[136738,136755],[136756,136762],[136763,136764],[136765,136768],[136769,136791],[136791,136794],[136796,136799],[136799,136800],[136800,136806],[136806,136808],[136808,136820],[136820,136821],[136822,136831],[136831,136832],[136833,136834],[136835,136836],[136842,136843],[136843,136848],[136849,136850],[136851,136852],[136852,136853],[136853,136860],[136860,136862],[136863,136868],[136869,136870],[136871,136877],[136877,136880],[136882,136894],[136895,136901],[136902,136903],[136904,136907],[136908,136920],[136920,136921],[136921,136922],[136922,136923],[136924,136927],[136927,136928],[136928,136934],[136934,136938],[136940,136946],[136946,136947],[136947,136950],[136950,136951],[136951,136958],[136958,136959],[136959,136965],[136965,136966],[136966,136984],[136984,136985],[136985,136988],[136988,136989],[136990,136996],[136996,136999],[137102,137104],[137150,137158],[137159,137165],[137175,137181],[137181,137182],[137182,137185],[137185,137186],[137186,137193],[137193,137194],[137194,137200],[137200,137201],[137201,137219],[137219,137220],[137220,137223],[137223,137224],[137225,137231],[137231,137234],[137243,137249],[137249,137250],[137250,137253],[137253,137254],[137254,137261],[137261,137262],[137262,137268],[137268,137269],[137269,137287],[137287,137288],[137288,137291],[137291,137292],[137293,137299],[137299,137302],[137312,137318],[137319,137320],[137331,137343],[137343,137344],[137345,137354],[137363,137375],[137384,137396],[137406,137426],[137428,137430],[137431,137434],[137435,137444],[137445,137448],[137449,137459],[137460,137468],[137469,137471],[137472,137473],[137474,137480],[137481,137486],[137486,137487],[137488,137492],[137493,137495],[137496,137499],[137507,137517],[137518,137520],[137521,137538],[137539,137540],[137551,137566],[137567,137570],[137571,137572],[137573,137576],[137577,137592],[137592,137593],[137593,137595],[137595,137597],[137606,137626],[137627,137636],[137637,137638],[137639,137642],[137643,137668],[137668,137671],[137680,137695],[137696,137699],[137700,137701],[137702,137705],[137706,137721],[137722,137723],[137740,137743],[137744,137762],[137762,137764],[137764,137769],[137769,137771],[137772,137773],[137773,137779],[137779,137781],[137806,137809],[137810,137825],[137826,137827],[137856,137859],[137860,137878],[137878,137880],[137880,137886],[137886,137888],[137889,137890],[137890,137892],[137892,137895],[137896,137898],[137915,137918],[137919,137937],[137937,137939],[137939,137944],[137944,137946],[137947,137948],[137948,137954],[137954,137957],[137974,137977],[137978,137996],[137996,137998],[137998,138003],[138003,138005],[138006,138007],[138007,138013],[138013,138016],[138025,138027],[138036,138045],[138045,138046],[138046,138060],[138060,138061],[138061,138064],[138064,138065],[138066,138069],[138069,138070],[138071,138075],[138075,138077],[138086,138092],[138092,138093],[138093,138096],[138096,138097],[138097,138104],[138104,138105],[138105,138108],[138108,138109],[138109,138117],[138117,138121],[138131,138137],[138138,138139],[138150,138156],[138156,138157],[138157,138163],[138163,138165],[138166,138173],[138173,138174],[138174,138176],[138176,138178],[138179,138185],[138185,138186],[138186,138192],[138192,138194],[138195,138201],[138201,138202],[138202,138208],[138208,138209],[138212,138217],[138217,138218],[138219,138223],[138224,138231],[138232,138239],[138240,138243],[138244,138251],[138252,138253],[138253,138254],[138254,138255],[138256,138263],[138271,138279],[138280,138288],[138289,138290],[138291,138297],[138298,138300],[138301,138308],[138309,138316],[138317,138320],[138321,138324],[138325,138333],[138334,138337],[138338,138350],[138351,138352],[138352,138353],[138353,138354],[138355,138361],[138362,138366],[138374,138384],[138385,138388],[138389,138399],[138400,138402],[138403,138407],[138408,138415],[138416,138423],[138423,138424],[138425,138433],[138434,138442],[138443,138445],[138446,138451],[138452,138461],[138462,138467],[138468,138470],[138471,138475],[138483,138491],[138492,138495],[138496,138502],[138503,138515],[138516,138520],[138521,138530],[138530,138531],[138540,138544],[138545,138555],[138556,138571],[138572,138579],[138580,138584],[138585,138587],[138588,138595],[138596,138601],[138601,138602],[138602,138608],[138609,138616],[138617,138620],[138621,138628],[138629,138632],[138633,138640],[138648,138652],[138653,138657],[138658,138661],[138662,138664],[138665,138667],[138668,138672],[138673,138680],[138681,138687],[138687,138688],[138689,138696],[138697,138702],[138702,138703],[138703,138709],[138710,138716],[138717,138732],[138733,138736],[138737,138738],[138738,138739],[138739,138740],[138741,138746],[138754,138762],[138763,138766],[138767,138770],[138771,138780],[138781,138787],[138788,138791],[138792,138800],[138801,138803],[138804,138816],[138817,138827],[138827,138828],[138837,138845],[138846,138850],[138851,138862],[138863,138866],[138867,138873],[138874,138879],[138880,138887],[138888,138895],[138896,138898],[138899,138907],[138908,138912],[138912,138913],[138914,138921],[138922,138928],[138929,138939],[138947,138950],[138951,138958],[138959,138961],[138962,138966],[138966,138967],[138967,138969],[138969,138970],[138970,138981],[138982,138983],[138984,138988],[138988,138989],[138989,138991],[138991,138992],[138992,139004],[139005,139012],[139012,139013],[139014,139017],[139018,139022],[139023,139027],[139028,139035],[139036,139043],[139051,139054],[139055,139062],[139063,139066],[139067,139074],[139075,139080],[139081,139090],[139091,139096],[139096,139097],[139108,139114],[139115,139122],[139123,139124],[139125,139130],[139139,139145],[139146,139153],[139154,139155],[139156,139161],[139170,139194],[139195,139202],[139203,139204],[139205,139208],[139209,139233],[139233,139236],[139245,139267],[139268,139276],[139277,139278],[139279,139282],[139283,139305],[139305,139306],[139306,139313],[139313,139314],[139315,139316],[139317,139318],[139319,139323],[139323,139325],[139334,139342],[139342,139343],[139343,139347],[139347,139348],[139348,139355],[139355,139356],[139356,139370],[139370,139374],[139383,139406],[139407,139416],[139417,139418],[139419,139422],[139423,139446],[139446,139447],[139447,139454],[139454,139455],[139456,139457],[139458,139459],[139460,139464],[139464,139466],[139475,139484],[139484,139485],[139485,139489],[139489,139490],[139490,139497],[139497,139498],[139498,139513],[139513,139517],[139526,139541],[139542,139549],[139550,139551],[139552,139555],[139556,139571],[139571,139572],[139572,139576],[139576,139578],[139587,139595],[139595,139596],[139596,139604],[139604,139605],[139605,139612],[139612,139614],[139623,139632],[139632,139633],[139633,139642],[139642,139643],[139643,139650],[139650,139652],[139662,139674],[139675,139679],[139680,139691],[139692,139695],[139696,139703],[139704,139711],[139712,139721],[139722,139725],[139726,139733],[139734,139737],[139738,139745],[139746,139750],[139751,139755],[139756,139759],[139767,139769],[139770,139782],[139783,139786],[139787,139795],[139795,139796],[139797,139800],[139801,139808],[139809,139814],[139814,139815],[139815,139821],[139822,139830],[139831,139835],[139836,139840],[139841,139845],[139846,139851],[139852,139861],[139862,139867],[139875,139877],[139878,139879],[139880,139892],[139893,139894],[139894,139895],[139895,139896],[139897,139901],[139901,139902],[140011,140013],[140055,140063],[140064,140070],[140081,140100],[140101,140109],[140110,140111],[140112,140117],[140126,140145],[140146,140154],[140155,140156],[140157,140162],[140172,140190],[140191,140199],[140200,140201],[140202,140205],[140206,140228],[140228,140229],[140229,140230],[140231,140232],[140233,140237],[140237,140239],[140248,140267],[140268,140277],[140278,140279],[140280,140283],[140284,140307],[140307,140308],[140308,140309],[140310,140311],[140312,140316],[140316,140318],[140328,140343],[140344,140351],[140352,140353],[140354,140357],[140358,140373],[140373,140374],[140374,140378],[140378,140380],[140389,140396],[140397,140408],[140409,140410],[140411,140416],[140416,140417],[140426,140429],[140430,140439],[140440,140441],[140442,140450],[140450,140451],[140451,140455],[140455,140456],[140456,140464],[140464,140466],[140475,140477],[140478,140479],[140479,140488],[140489,140491],[140492,140494],[140494,140495],[140496,140497],[140510,140521],[140522,140523],[140524,140528],[140528,140529],[140538,140539],[140548,140550],[140551,140552],[140552,140560],[140560,140561],[140561,140569],[140569,140570],[140570,140577],[140577,140578],[140579,140590],[140590,140592],[140593,140594],[140607,140616],[140616,140617],[140617,140626],[140626,140627],[140627,140634],[140634,140636],[140645,140646],[140655,140657],[140658,140659],[140659,140668],[140668,140669],[140669,140676],[140676,140679],[140680,140681],[140694,140703],[140703,140704],[140704,140709],[140709,140710],[140710,140718],[140718,140720],[140729,140730],[140734,140739],[140739,140740],[140741,140745],[140746,140753],[140754,140761],[140762,140765],[140766,140776],[140784,140792],[140793,140797],[140798,140806],[140807,140821],[140822,140828],[140829,140833],[140834,140844],[140845,140848],[140849,140856],[140857,140860],[140861,140871],[140872,140874],[140875,140879],[140886,140894],[140894,140895],[140896,140903],[140904,140919],[140920,140922],[140923,140928],[140929,140939],[140940,140945],[140946,140950],[140951,140954],[140955,140968],[140969,140977],[140984,140986],[140987,141005],[141006,141007],[141008,141027],[141028,141031],[141032,141046],[141047,141048],[141049,141066],[141073,141088],[141088,141089],[141097,141104],[141105,141107],[141108,141112],[141113,141120],[141121,141128],[141129,141130],[141131,141138],[141139,141142],[141143,141151],[141152,141156],[141157,141168],[141168,141169],[141180,141198],[141199,141207],[141208,141209],[141210,141215],[141224,141243],[141244,141253],[141254,141255],[141256,141261],[141271,141301],[141302,141315],[141316,141317],[141318,141321],[141322,141346],[141346,141347],[141360,141368],[141368,141370],[141379,141390],[141391,141398],[141399,141400],[141401,141414],[141414,141415],[141415,141420],[141420,141423],[141432,141462],[141463,141476],[141477,141478],[141479,141482],[141483,141507],[141507,141508],[141521,141530],[141530,141532],[141541,141554],[141554,141555],[141555,141560],[141560,141561],[141561,141568],[141568,141570],[141579,141586],[141587,141589],[141590,141594],[141595,141603],[141604,141611],[141612,141613],[141614,141621],[141622,141625],[141626,141634],[141635,141639],[141640,141651],[141651,141652],[141663,141681],[141682,141690],[141691,141692],[141693,141698],[141707,141726],[141727,141736],[141737,141738],[141739,141744],[141754,141785],[141786,141800],[141801,141802],[141803,141806],[141807,141832],[141832,141833],[141850,141858],[141858,141860],[141869,141881],[141882,141890],[141891,141892],[141893,141907],[141907,141908],[141908,141913],[141913,141916],[141925,141956],[141957,141971],[141972,141973],[141974,141977],[141978,142003],[142003,142004],[142021,142030],[142030,142032],[142041,142055],[142055,142056],[142056,142061],[142061,142062],[142062,142070],[142070,142072],[142081,142087],[142088,142095],[142096,142103],[142104,142107],[142108,142115],[142116,142119],[142120,142122],[142123,142130],[142131,142135],[142136,142139],[142140,142147],[142148,142158],[142159,142167],[142168,142175],[142176,142177],[142184,142190],[142191,142201],[142202,142209],[142209,142210],[142221,142259],[142260,142281],[142282,142283],[142324,142327],[142328,142366],[142366,142368],[142369,142370],[142383,142392],[142405,142411],[142412,142443],[142444,142450],[142450,142451],[142472,142491],[142492,142498],[142498,142499],[142500,142501],[142605,142607],[142644,142652],[142653,142659],[142671,142702],[142703,142715],[142716,142717],[142718,142723],[142734,142740],[142741,142753],[142753,142754],[142760,142761],[142763,142765],[142767,142804],[142805,142825],[142826,142827],[142861,142864],[142865,142902],[142902,142904],[142905,142906],[142912,142921],[142927,142933],[142934,142964],[142965,142971],[142971,142972],[142986,143004],[143005,143011],[143011,143012],[143026,143044],[143045,143056],[143056,143057],[143058,143059],[143069,143099],[143100,143112],[143113,143114],[143115,143120],[143130,143136],[143137,143149],[143149,143150],[143156,143157],[143159,143161],[143163,143214],[143215,143217],[143218,143219],[143253,143256],[143257,143292],[143292,143293],[143303,143319],[143319,143320],[143320,143327],[143327,143328],[143338,143358],[143358,143359],[143369,143390],[143390,143392],[143394,143400],[143401,143407],[143408,143409],[143410,143415],[143417,143445],[143446,143450],[143451,143452],[143453,143455],[143455,143456],[143456,143472],[143472,143473],[143473,143479],[143479,143481],[143484,143491],[143492,143494],[143495,143499],[143500,143507],[143508,143515],[143516,143517],[143518,143525],[143526,143529],[143530,143542],[143543,143547],[143548,143559],[143559,143560],[143564,143582],[143583,143591],[143592,143593],[143594,143599],[143601,143620],[143621,143630],[143631,143632],[143633,143638],[143641,143672],[143673,143686],[143687,143688],[143689,143692],[143693,143717],[143717,143718],[143728,143736],[143736,143738],[143740,143751],[143752,143759],[143760,143761],[143762,143775],[143775,143776],[143776,143781],[143781,143784],[143786,143817],[143818,143831],[143832,143833],[143834,143837],[143838,143862],[143862,143863],[143873,143882],[143882,143884],[143886,143899],[143899,143900],[143900,143905],[143905,143906],[143906,143913],[143913,143915],[143918,143925],[143926,143928],[143929,143933],[143934,143942],[143943,143950],[143951,143952],[143953,143960],[143961,143964],[143965,143977],[143978,143982],[143983,143994],[143994,143995],[143999,144017],[144018,144026],[144027,144028],[144029,144034],[144036,144055],[144056,144065],[144066,144067],[144068,144073],[144076,144108],[144109,144123],[144124,144125],[144126,144129],[144130,144155],[144155,144156],[144166,144174],[144174,144176],[144178,144190],[144191,144199],[144200,144201],[144202,144216],[144216,144217],[144217,144222],[144222,144225],[144227,144245],[144246,144260],[144261,144262],[144263,144266],[144267,144292],[144292,144293],[144303,144312],[144312,144314],[144316,144330],[144330,144331],[144331,144336],[144336,144337],[144337,144345],[144345,144347],[144350,144356],[144357,144369],[144370,144377],[144378,144385],[144386,144389],[144390,144397],[144398,144401],[144402,144404],[144405,144412],[144413,144417],[144418,144421],[144422,144429],[144430,144440],[144441,144449],[144450,144457],[144458,144459],[144460,144466],[144467,144477],[144478,144485],[144485,144486],[144490,144529],[144530,144551],[144552,144553],[144579,144582],[144583,144622],[144622,144624],[144625,144626],[144632,144641],[144647,144653],[144654,144686],[144687,144693],[144693,144694],[144694,144713],[144714,144720],[144720,144721],[144722,144723],[144733,144765],[144766,144778],[144779,144780],[144781,144786],[144796,144802],[144803,144815],[144815,144816],[144822,144823],[144825,144827],[144829,144867],[144868,144888],[144889,144890],[144916,144919],[144920,144958],[144958,144960],[144961,144962],[144968,144977],[144983,144989],[144990,145021],[145022,145028],[145028,145029],[145043,145061],[145062,145068],[145068,145069],[145070,145088],[145089,145100],[145100,145101],[145102,145103],[145204,145206],[145251,145259],[145260,145266],[145284,145315],[145316,145328],[145329,145330],[145331,145336],[145353,145359],[145360,145372],[145372,145373],[145385,145386],[145394,145396],[145404,145456],[145457,145459],[145460,145461],[145493,145496],[145497,145532],[145532,145533],[145549,145553],[145553,145554],[145570,145590],[145590,145591],[145607,145628],[145628,145629],[145645,145661],[145661,145662],[145662,145669],[145669,145671],[145679,145688],[145689,145698],[145699,145700],[145701,145706],[145714,145742],[145743,145747],[145748,145749],[145750,145752],[145752,145753],[145753,145769],[145769,145770],[145770,145779],[145779,145781],[145784,145789],[145789,145790],[145791,145795],[145796,145802],[145803,145810],[145811,145813],[145814,145820],[145827,145830],[145831,145838],[145839,145854],[145855,145857],[145858,145875],[145876,145879],[145880,145898],[145899,145909],[145910,145912],[145913,145916],[145917,145922],[145929,145933],[145934,145941],[145942,145953],[145953,145954],[145955,145962],[145963,145965],[145966,145972],[145973,145978],[145979,145981],[145982,145990],[145991,145996],[145997,146000],[146001,146011],[146012,146015],[146016,146024],[146024,146025],[146026,146031],[146038,146045],[146046,146050],[146051,146054],[146055,146060],[146061,146065],[146066,146068],[146069,146072],[146073,146084],[146085,146089],[146090,146093],[146094,146096],[146097,146103],[146104,146106],[146107,146110],[146110,146111],[146112,146115],[146116,146131],[146132,146139],[146146,146149],[146150,146156],[146157,146160],[146161,146163],[146164,146172],[146173,146180],[146181,146183],[146184,146192],[146193,146208],[146209,146218],[146218,146219],[146229,146241],[146242,146250],[146251,146252],[146253,146258],[146266,146272],[146273,146275],[146276,146277],[146278,146286],[146286,146287],[146287,146301],[146301,146303],[146303,146315],[146315,146318],[146326,146328],[146329,146330],[146330,146332],[146333,146343],[146344,146359],[146359,146360],[146361,146362],[146374,146389],[146390,146393],[146394,146395],[146396,146398],[146398,146413],[146413,146414],[146415,146417],[146417,146419],[146419,146428],[146428,146431],[146443,146449],[146449,146450],[146450,146453],[146453,146454],[146454,146461],[146461,146462],[146462,146465],[146465,146467],[146475,146476],[146586,146588]]},{"type":"zone","hasSpan":true,"attrs":[{"name":"region_type","type":"string","aggregation":null}],"annots":[[0,146590,"body"]]}]}